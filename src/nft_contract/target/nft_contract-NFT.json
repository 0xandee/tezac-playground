{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "NFT",
  "functions": [
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACYHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADBJwICAAUvDAACAAMeAgAEAQo4AwQFJAIABQAAAJElAAAA0zAMAAEAAiYoAIAEBHgADQAAAIAEgAMkAIADAAAAwCoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFedUGXr5zdNI8AQECJg==",
      "debug_symbols": "5ZXdisIwEIXfJde9mMlMkomvsixStUqhtFLrwiK++ybS1KrFgog3eyNO+dJz5qeZk9oUq+NuWdbb5qAWXydVNeu8K5s6RKdzplZtWVXlbjl+rCD+OHPhD/u8juGhy9tOLZC0gUwV9Sb+JzHhHduyKkKEfM4eedA64cB6ROMEzdZiT7N1MNDOT8BiwPSwGI1j+DtTAu+x733CEf0H7b+p+kaG6stc9dE4l2hL9Ny+Nz7l6i3xnX1P77aP+tZ+FJEPiCDYT6ggTqkQQOoIgb5qGJiSQDaDxGj6MDb+gXZGuKedBfO82Y6EEswj95MwIjk7GGHwd7OBaP9PrlpP50o45Mr+ea4slNyzsJ67VZwebhVxD3bcbOmNHtuJh0i/cIjhlUNm+pCkS5jCNTYzGQyptMjazUyGAKX2SfhCZyZDKPlw4mFuMliuI2q0vWnFOUQ/eVvmq6roN/H2WK9Hi7n73Rd3O3rfNutic2yLuK2vixpjpbVkRJePKwTkMvJBI+j8AQ==",
      "brillig_names": [
        "set_admin"
      ]
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_finalize_transfer_to_private_unsafe"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "get_private_nfts",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "page_index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "array",
                "length": 10,
                "type": {
                  "kind": "field"
                }
              },
              {
                "kind": "boolean"
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_private_nfts"
      ]
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3dTtw6EMffZa+58NfYM32V6ggBpdVKK6iAHumo6rufBHASiBMr4xST7NxU3db/nfEv43gyztq/D99ur3/9uDzefb9/PHz5+vtwur+5ejre3zWffv+5OFw/HE+n44/L4T8fVPuHNvZZ8Pjz6q79/Ph09fB0+KKtAXVxuL371v7dIjRf8v14um0+affnYtxeGRObK2cGrXWitfNev7Z2PqiudaBEYwQFr40RjB42/uei8R/X8Z8oNteaPtB/uxJ/wI4/5vhrCCG29tbO+09AsbPkrXvvv9Nr+6/NW/+frdBHWAGXsoIeY2xgUKFTgUqFBloXQwMHA2EiNILpQgPDe7SQ7DQG3bmDSs+7Q03ExYsHDuYba+VtPwj6sNDBJoPIvzY2qu+ntZBoG8jFMRCI+m82hInWNsSL6gbxZlIuG6PjFxsziOSmcUsQlRAsJAhCsJCgjOJCgmSFYCFBFIJFBI2SGCwlGIRgGUGthWAhQclmSglKNlNI0MhMUkpQZpJCgtYIwUKCXgiWEXRSmyklKNlMKUHJZgoJgmQzpQSlNlNI0Es2U0pQsplCgkFqM6UEJZspJSjZTCFBdEKwkKBkM4UESbKZUoJSHywjaJVkM1mCVkeXm3KqHxGUjLqQoKx2FhOUjLqUoGTUhQRltbOYoGQzhQStzCSlBGUmKSQoq53FBCUGSwlKNlNIEKQ+WEpQ6oOFBGW1s5ig1GYKCQbJZkoJykxSSlBmkkKCKLWZUoISg4UEZbUzTzC42NYEcCOCUh8sI+hktbOYoNRmSglKbaaQoJZsppSgzCSFBI1kM6UEJQYLCcpqZzHBj85mNHbbkplB4zRBAIrOezS981qHFMNup7oQsG+L5rmnzp5LT0GfTU/pXHrq3Qo97XbgIyDM9bS7HzXuqjf+JHwHjDsBBq96LsmdAENTjIuNnclsG9jcZYPvHGkeHYbNWzCrlOd7MH5gAV5ukav8WGfWwirFyXkLKxTvPMYLQWEw96XDpyk0xKvW5DmZ8EFl41ejAsyED9rodEBSufBx2McxDGpyr+FD5eNKK93tg9n8fTDHJpvXGyug1Md3NvSdNZmL1YcwYO+7BfviPGzYeb1l8np18qjf3aBghXdn8zZwBRtGd0NMGRuyLlG/V7HRg29/GZErbK2ytkvOfTqXwHw+l8LHu4Su33ccPQxdSsyp/Wz9dvS33nuzae83zT5smn3wW/Ye9aa93zR72jR7gg1771dJ/Ot57zbtPW3Ze71p9hq37L3ZcqbgzZazNG8//WzVLQGRsUPvE5W70NXACLUfdfXTpxWrddWdz1V1nz5hWa2r8Omzm/W6ej5X1VcYqzToKgU739VmPYG6o8W0x0zzpovd2WhmUJtPr/A7VPG7HQ6mp2bl/4WOFzrTdIISOjN0QOhM00GJnTk6EjszdEhiZ46OEzozdFDoTNIJygqdGTpB6EzT0UbozNA5oyeJtr/mjObo5/6eUcb23F/aWX/77WvRgMmM9kq76AbY26jaBvW9je1tUJc7TAXqfm9PANugvren0k1QDxLrNajv7Sl6E9Rxb+t826AumWMN6pI5VqBOMpvWoC6z6cdTR7W3Wvc2qO+thr4J6lpqjjWoS+ZYg7pkjhWoG8kca1CXmmMF6lYyxxrUJXOsQN1JzbEGdckca1CXzLEC9RVOzxLqy6lL5liBupfMsQZ1qa9XoI4S63+HOvTU/fuTc2h3v/74JNRn9wYnJbNpBeq7+7XKNqhLHaYC9d39Fmcb1J1Qr0BdZtMK1K1kjjWoS6xXoO4kc6xBvUbm2H15ewX0PEZnCLq+5k4CINcdIUGg3hzF0XYWZOHsr4SYNdFp83w+2NsQA3k4qUB9dxvQbYO6LBL/HepzR5PT7jbM2wZ1J9QrUJeHkwrUZeGsCnXJHCtQ3902kNugLrNpDeryeuHHU9dKSbBXwS65Yw3s6X0TwMWegsORJv2r/4wGF2u0sgwNw45m2NFhucYw7BhGf6xjaJbHgU7/6gAwnk8NaMYaWq5Jv/Gd0SS5+W5M+tELiM2YNgxNWK4JDDuBYQcZdtKPNfMaYtih5f0x6ftBRrM8Dkz6ZLaMhpZr0mNBq25RrL09j1RgWaok73ZsdVNaGI0iky4Z51TpPdayKuSo0jHexnFUvdnJ9kVl05GknYm3FD08Er5TBY5Ka5YKWCriqAyrX5bloUs+wDcXubvKEPRY5TmqiZGSUyFH5R1LRRxVYNmaGF9AMT/UXo/uURY9R5U+kTarIobKKcdScWi49BvEWRWHoUvvLt6Mu05lYTS+nFUslWOpkKNKv0uTVXmOClg0gEXes2x5FnnPIh9Y5MMEeY+dCkd3GzcxL+dUxFGRY6hAKZYKOKr0E2ZWxZmXwWiWijObg2XZSo/l+ZfBNEyMZY/drBfU2NbEbJ5Rpc8AzKmCZqnS5ENfbBoe4RhV6bPUsirHUiFHlX4qzKo8QzVxCntWxSHvNcuWdiwVh/zE6dZZFYu8ZdGwLBqWRcOlbVE/65Ebq8AwVJSu8AUfb2zBj+5rlPaPfDREYWzH4XJNukcZjV+umciD5usTEy+nZVWcCsrEy0FZFcsWsmwhyxaxbBHDllEKWCqWLe1YKuSoJu6dOZXnqKxiqWDpPabRJLmTidXJ5iY00iy/LxmVHsXzdjzDt3SFMaMJyzXpHfTnGaBfriGGHUqzxu6UcHpfUzA6nSdlNBw7lOlPQqOXx5tO/8o1ownLNdYwNLhc4yxDw7ADjP4szwWa1XjG9fEL4+BP8+nfq4fj1fXp9rFRtP/56+7m6Xh/9/rx6b+f8X+uH46n0/HH5c+H+5vbb78ebi9P9zft/x3U6x9fbbMSb71v58b2o1Fw0QR0+7EdpG2xpCl9N1Yby/8D",
      "brillig_names": [
        "finalize_transfer_to_private"
      ]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQAFLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFi40qC3IiUlA8AQECJg==",
      "debug_symbols": "5ZXdisIwEIXfJde9yGRm8uOrLItUjVIordS6sIjvvok0tdayXUR6szfiyDeek5wMcxE7vzkf1kW1r09i9XERZb3N26KuQnW5ZmLTFGVZHNbDn4WMH4Zv/OmYV7E8tXnTihWgYpkJX+3id7Qc/mNflD5UQNfsmZdKJVySGtAwQZPW0NGkjexp4yZgy5I72LKCIfyZCSvfY9+5hAO4Be2/6fbZ9rdv524f2JhEa8Tf7Tt26axOI43sO3y3fVCP9qOIXUAEpF5CBWBSRYWXkdoUE86omPBeO9wEfiZBpdNoOmV5lCCA/oujx3PHPgUv9r2oh/Rin5vqI7qPMJn7wLOcChWI+1AH8w5x1J7DYUspHC1nwjFoMcE0eC+TMAAa3Rsh6cZZEv2Ts15D9ZU3Rb4pfbfh9udqO1h47ffRj3bfsam3fndufNyC9wUIcYMolyHdxiEUyBmaoBF0fgA=",
      "brillig_names": [
        "get_admin"
      ]
    },
    {
      "name": "set_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "minter",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "approve",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgMEAicCBAQAHxgABAADgEgdAIBJgEkBLgiASAABLgiASQACJQAAAFIlAAAAdigCAAEEgEonAgIEADsNAAEAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJ3HgIAAwAeAgAEADM4AAMABAAFJAIABQAAAJolAAACoCcCAwAFLwwAAwAEHgIAAwEKOAQDBSQCAAUAAAC8JQAAArInAgMAAC0IAQQnAgUEBAAQAQUBJwMEBAEAKAQCBS0MBQYtDgMGACgGAgYtDgMGACgGAgYtDgMGLQ0EBQAoBQIFLQ4FBCsCAAUAAAAAAAAAAAIAAAAAAAAAAC0IAQYnAgcEBQAQAQcBJwMGBAEAKAYCBy0MBwgtDgMIACgIAggtDgMIACgIAggtDgMIACgIAggtDgUILQ0EBQAoBQIFLQ4FBC0NBgUAKAUCBS0OBQYtCAEFAAABAgEtDgQFLQgBBAAAAQIBLQ4GBC0IAQYAAAECAS4KgEUABi0IAQcAAAECAS4KgEQABycCCAAGJwIJBAotCAAKLQwFCy0MBAwtDAYNLQwHDi0MCA8AEAAJACUAAALELQQAACcCCAQJLQgACS0MBQotDAQLLQwGDC0MBw0tDAEOABAACAAlAAACxC0EAAAtDQcBCygAAYBEAAgkAgAIAAACGicCCQQAPAkBCScCAQQILQgACC0MBQktDAQKLQwGCy0MBwwAEAABACUAAAPtLQQAAC0NBAEBKAABgEcABS0NBQQKOAQDAQsoAAGARAADJAIAAwAAAmslAAAFABwMAgEAMAwAAQAEJigAgAQEeAANAAAAgASAAyQAgAMAAAKfKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV51QZevnN00jwBAQImJQAAAnctDQMGLQ0EBwsoAAeARAAIJAIACAAAAuonAgkEADwJAQkLKAAGgEMAByQCAAcAAAN5IwAAAv8tDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADJCUAAAUSLgQABoADKACABAQABCUAAAUkLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2QlAAAFsi0OCgEtDgcCLQ4FAy0OCQQjAAAD7CcCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPtLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFJC4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+wmJQAAAncuCIBFAAUjAAAD/Q0oAAWAQwAGJAIABgAABG0jAAAEEi0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASLIwAABPctDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUkLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPctDAYFIwAAA/0qAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU/IwAABUouAIADgAUjAAAFsS4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWdLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVsKAGABQQAAQMAgAYAAoAGIwAABbEmKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3bbuM4DIbfJde9EHUk51UGi6LtZIoAQVKk7QKLou++TjZS3IixECroYmDeFOMJf5P+LIkSnVgfi1/Lx/fn+9Xm9/Z18ePnx2K9fXp4W203w9HH593icbdar1fP9+P/Xpj9H7DuIHh9edjsj1/fHnZvix/gbDB3i+Xm1/7fDsNwkt+r9XI4Av95V9sba7O58XZkDYy1jxGO1j4mU6wTMcYYTDgaY7AwNv7rbogfbxM/UTYHoG+M392If8DCH1v8IaSUraNz0/FToHyxFJ0/j9/DreMH+zX+gxf6Di/Bc16cjbltOIupqILhXIAPxcWoacD+plTWKaA/WqdowvSNSA5dNvaj6FljAJdiCcQbOr9vgeZzrTHw10rZh3MA09fq0eXoPXrb6vLJli4/ongMJ5kWegd+HM5BFAQidBIRO6I6F6CIIjVahonuNJyeBhhIjh2O8t2z5kR2cMg1DCptLhGdzmwJGWuX8vDgRyOX5UK2FvKJrR2Niaxx8Hn8DB7Hpnt+5JRfF7+k/Dr4Ddeg/Lr4afvr4gfa/vr4afvr4mdB+XXxC8qvh58zyq+Ln1d+XfxI+fXw87p+a/LDzCKMio2Zn85fuvgFnT/38YvKr8EvFtv41XTPL2n/7eKHuv7o46f9t4sfafvr46ftr4efM9r++vhp/aWPn65/u/iBV35d/PT5eRc/q/WXPn66fuvi57T+0sdP5881FK8PhRgoOtNloOj0tYYSdE7AQNGJZg0lavZmoGhKrqEkrVMxUDQlM1A0JddQ0CuUGoqm5BoKaUpmoGiVpoLijU7zGSjaUmoo+iMDDso8s4+DHLJ1Np5DmenjhAYUbSk1lJkW/htQ5lk6mIYy02p+A4pXKDUUHWhrKDP9hnsDyjyn+dNQZlrNb0DRlFxDmWk1vwFlntX8BpR5VvOnoaCukhkompJrKDP9eUkDig60FZRgdJXMQNGWwkCZZ0pOPtvaFOTGe4Iwz/x9DUGI5QWUkMz5z8bDTF8bdEuC2os7Cc701Te3JDjPeutVBBOVtz8jVLl4pq+/uSXBeS4bb0gwaC7uJTjPZcYtCepsppNg1EzSS1BnM50Ek7bBXoI6m+kkONMXgl1FkFy5PvI1Qc3FnQRvsSkFYNk9x/rQIDjMn3LwEe0peIDEMSwbKqV0eiHrfiOZQ/D45wYfTfyDg7/Fu4D+v+Dbowa6RvDeZGPwNn1xUVujSbkPohmdmt0kyJc6lqfTiV1wh9it//bYXSyxB5yOPaHLOwglJDNtDOAxlKE3jJ7+/LcfUuKfXYApox8YpLMBLfG7JDREfI1/CKqUFCHZSkQCkUsCkbcSUeRFWLbEsqYCEfnwvB21mMoT/xWrlihIRCQQ8V9haYhIck0kCA8N26OHe1tubkhwLgIjESWByFqJCAWiCzseNkQSTxf6Uyj7vkGE8x9RYTASURCIopOIUCBKEhApCkQooYcXdnc8zWhdqPoTeYkIrxcRv6FWSxQFogvdvSHyEpEAOVmJJytB7iTInQS5v4A8lkmrQ6hEUSAKTiJCgSh6iYgEIr441BChIOcSBolIkKiJBJ7A8FPLFPN0NEVfafj8RKVQQSnWmni9hk9pDY0XaPD6Ofm+LiNSJYnqQiJsqUS+UOQLRb5I5IskvsA4kUrkC6xIFSUqa0QqL1JJesqFvcInxxjgF6Jk84qcfK0RjEvA9+JpP1EQG78IbWiCQEPXM0Av0Aj88MVcwtwOvlShswav1ljjBJrUuB5GA9e3N8u/62Jaw+9sOK1xRqC5PkdbDwKNwI9gLmAFcwEbBPcnXtkOPoejvx92q4fH9fJ1UOw/fN88va22m+Ph2z8v+ZPH3Wq9Xj3fv+y2T8tf77vl/Xr7tP9sYY5/ftqQ7mzCQ24cDgfAd2Dp0H32h8M6YlhBDF4Hz/8C",
      "brillig_names": [
        "set_minter"
      ]
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finish_transfer_to_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgMEAicCBAQAHxgABAADgEguCIBIAAEuCIBJAAIlAAAASyUAAABvKAIAAQSASicCAgQAOw0AAQACKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAmUeAgADAB4CAAQAMzgAAwAEAAUkAgAFAAAAkyUAAAKOHgIAAwEeAgAEAAo4AwQFJAIABQAAAK8lAAACoCcCAwAALQgBBCcCBQQEABABBQEnAwQEAQAoBAIFLQwFBi0OAwYAKAYCBi0OAwYAKAYCBi0OAwYtDQQFACgFAgUtDgUEKwIABQAAAAAAAAAAAgAAAAAAAAAALQgBBicCBwQFABABBwEnAwYEAQAoBgIHLQwHCC0OAwgAKAgCCC0OAwgAKAgCCC0OAwgAKAgCCC0OBQgtDQQFACgFAgUtDgUELQ0GBQAoBQIFLQ4FBi0IAQUAAAECAS0OBAUtCAEEAAABAgEtDgYELQgBBgAAAQIBLgqARQAGLQgBBwAAAQIBLgqARAAHJwIIAAknAgkECi0IAAotDAULLQwEDC0MBg0tDAcOLQwIDwAQAAkAJQAAArItBAAAJwIIBAktCAAJLQwFCi0MBAstDAYMLQwHDS0MAg4AEAAIACUAAAKyLQQAAC0NBwILKAACgEQACCQCAAgAAAINJwIJBAA8CQEJJwICBAgtCAAILQwFCS0MBAotDAYLLQwHDAAQAAIAJQAAA9stBAAALQ0EAgEoAAKARwAFLQ0FBAo4BAMCCygAAoBEAAMkAgADAAACXiUAAATuMAwAAQAEJigAgAQEeAANAAAAgASAAyQAgAMAAAKNKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQVjmNPyHedZZDwBAQImJQAAAmUtDQMGLQ0EBwsoAAeARAAIJAIACAAAAtgnAgkEADwJAQkLKAAGgEMAByQCAAcAAANnIwAAAu0tDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADEiUAAAUALgQABoADKACABAQABCUAAAUSLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA1IlAAAFoC0OCgEtDgcCLQ4FAy0OCQQjAAAD2icCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPbLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFEi4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA9omJQAAAmUuCIBFAAUjAAAD6w0oAAWAQwAGJAIABgAABFsjAAAEAC0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAAR5IwAABOUtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUSLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABOUtDAYFIwAAA+sqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAUtIwAABTguAIADgAUjAAAFny4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWLLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVaKAGABQQAAQMAgAYAAoAGIwAABZ8mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dbts6DMffJde9ECVKlPYqw0HRj6wIECRFmh7goOi7H6eLHCemrZjKNgzmTTHP/IfyL5Qo0bH8sXhePr6/3K82P7Zvi2/fPxbr7dPDfrXdNEcfn3eLx91qvV693Hf/e2EOfwDCl+Dt9WFzOH7bP+z2i2/grDd3i+Xm+fBvF33zIT9W62VzBPh517c31mZzg7ZjDYw1hgBHawxkWmtKjHH0xh+No7fQNf7nbgEWbtP+lLI5QPqd7b8Rfx9b/rHEHzxRtg7Ojbc/+ZQvNgWHl+13eOv2gz1v/8EL2t/ihVgvkFIrswZCwQtGhzk6YqcvDEQH2TY6Il3S9fx12053s+f9DX9xvPprGCGeteigC1amIyPUeZ4cupMOw4mcN2zABHcaFk4dBcix3SocjZvvp7V1zjO2lDBTppROn2xTZKwd5TDHTg+0XJOthfzB1nb6NmvsMY8DHmPX9EAwGiVYSRCVYCXBpATrCCaNwVqCGoN1BJv8rAQrCUYlWEcQrBKsJEhKsI7gQK1CCV5PMCjBOoJOV3VXEIy5XuI7xbRMEJVgJUGdUVcSRKcEiwRDaxvOTQ8Eg/biWoK6JqkkSNqLawlqDFYSjBqDtQQ1BisJJq3N1BLUdXEdQWe0NlNLUO+4VxIErc3UEkQlWElQazOVBK3OqC8JfmHR20ccFqdzXxaLTmg5LKgzBBaLTj1ZLJrLOSxeEzSLRetYHJagCZrFogmaw0JaRmKxaIJmsWiC5rDocxMslqSTfxaLRguLRccWBgvO9i6Fg9xk62y4xDLbWw8FLBotLJa5ji3jWGZb+S9gmWvlfxyLm+tSsYBFh1wWiw65HBZExcJh0WjhsMy28l/AMtfK/ziW2Vb+C1jmWvkfx0K6gmaxaIJmseiQy2GJOuSyWHQFzWGZ7XMjBSxzTdCE2daSlxs3DL2ZazafwhBCzDtdAhnbYzjXHHdDhqB9uZrhbLfduSXDuVZlJzGk1O6rHOEyL/vZbr1zS4aoDKsZal6uZohzXXrckqHObaoZes0p9Qx1blPNMGgc1jNEZVjNUOc2VzBMrr2+hD2GpHm5muFtXp4BsWPtCwy9T7n5IdruG1GIo9i+EobotEksRPuz+f6vbn5yf3Pzw232Ivpzzb9m/Ojo+OajyT4ALZ056VtH4/IAEo0/fTT7hiOKLr/si2Iy48YAGH07kPnO3ZafL0QKie8qph1LwMR0MTyEgYczRkVk+KgG3xbugC4LdwQgESWByKJExOdriKENFdMDMfDrNrSdiOl5GvjtV0FEAlEAicgLRCS5pihpXuT7tMf2y/UEl6KB+7MFUZouigYFooFnXgoiLxBZiaeB/tQktywKcPl4UxzYTqYgIoFoYM+NcdFAuaIgkoAY+E3juChI6A088u1O80PnbU8UBKKBSWVBhBJRFIgGuntBJACRDEhEEk9gJCKUiATIkx1AHtqZlovQE0WBaOCxjHHRwHZFBVEQiDxIREkgCoKcm4JgHpEIJCKBJzD81JJCno5SwJ6Gz0+pXfYnCn1NnK7hU1pBE6ZrBoJ1dE7enPUiVZKoBhJhSSXyFUS+gsgXiXyRyFcUfV9R5CuJritFgarpWiJVkKjAiFR+8hgD/EI02bwiT9jXCMYl4HvxuB8UtI1fhBY0NF3DL0HHGYTpYyaQwA+/F1CKOQ7OarpHDT/zLWgkflLhehhNmh5vlv95aUFD0zVgBZrpOdryT74XNAI/grmAFcwFLAq+H5wYB5/N0b8Pu9XD43r51igOJ983T/vVdnM83P/3ms887lbr9erl/nW3fVo+v++W9+vt0+Hcwhz/fLdNoa25b/GVQ5rD5ou8Axu+QvRwlkJzNjZeG8//Aw==",
      "brillig_names": [
        "_finish_transfer_to_public"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5527120278801020911": {
            "error_kind": "string",
            "string": "invalid NFT owner"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "7176719043052132708": {
            "error_kind": "string",
            "string": "Function _finish_transfer_to_public can only be called internally"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "8778930052620580050": {
            "error_kind": "string",
            "string": "caller is not an admin"
          },
          "9171385800979035582": {
            "error_kind": "string",
            "string": "Invalid partial note"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14466155340988305413": {
            "error_kind": "string",
            "string": "caller is not a minter"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17922298012674089187": {
            "error_kind": "string",
            "string": "Cannot complete a PartialNFTNote with a value of 0"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954044801249163952": {
            "error_kind": "string",
            "string": "NFT not found when transferring"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "H4sIAAAAAAAA/+xdBZwUR/O9IHechYMEiAfiQGR61mYjxN3dZXdnN+7u7u7uQkKIu7u7u7uHuJJ/VzIXdpdZTubV/KvybX+//u4YLk29rlfV9Xq696Zq+KcVhtn/m/6f76eyvW/wtY/tw6uedX4t/75/yM+1hjxrD3k2MOTZoJBnQ21frOrZrCE/Nzzk2YiQZ7OFPJs7eFbepgq+LhZ8TTjpZLKYcYsmYXKOm817KSeZyqc945mUl/JdL5Eoekkvk81nM07WJBNFU0plEyXnn0b/WOdYTqTmFjjtnKr3dqaqH5Btg23vV26rHX9i8P08DZO+H1n2/VTBz3T+d33sn/va3s/2/n0nPe9sfavmwInWzCjgWH364nzTCOOQ5SPj/I0GjtUXOH9NwPkL43ZjGbebyr7vV/Z9/ypuD7B/bra9xfbWEG73Aftm7gbcfLbh5tOU52MadzjzPLQBedXONA/twTz0q5qD8jYVeF6mauDJMQ1YO/NhY0+WyCIv2sCJnQdo19TAREbkGlJGJE5yTQ1OwJ1tYF9Gg2lw9LgdfbEk5cDd0XfSBIPGdaZErqjzMAhXYfucdg7uvZ3J6gdhVcigsmqDWuf3fcq+H1xVhUxj/zyt7UNsHxpDhT0AuGJOA4ylYcwV4rAy30xb9v2Qsu+HVvlmOvvn6W2fwfYZQ3yD5udMfXXE+8y9t9OtftCVUp2u7PuZyr6fucpXs9g/z0pVm+0jAl/1a5i021CrLYaZb9O5QzOleXeiNTNdTPxwojUzC4OdU9UyNiqZO4AJkQhHyb5/w+QNPcnzNPCQoQFkZyGT8ZJZk+Gcg1mUBER7X9m+6rSzXObOFmTN2fsqCb6KveayfQwOm2n8vgzjouZiNmBlNgeTj+Yo22Pp2xCPDJ6dQQaXr/xzagqWKZVdc3az7JrL/nlu2+exfWTfyTfMkNiBzvt7G4BsR29uzg4MvLnAqwYHH+cEzmEy4+cKfiaB5PmcAH/kPDeVcL1iQ1lDz+Uo3BZKidPO0b23M1H9ICwHjarxkrJcBo6uykHz2j/PZ/v8ti9QJv36NcSzqMz7vyp3uOxDVlfF0j9NanXl4Oxyy6srZwoVsBOt/f2WWdsetcHNcyYscZkaiWtKxZNr/5ywPWl7qixxxfVSyGWohqml+zIanA4hXlRy0KTTnk1bg75JH9wQ3lD2Mo3rMo3r8IzrMo07aX7RPAMepeLCXh+3Pm593P/guMCx/96pGtgQ3kD/Rt2P9XHr49bH/c+Oq2Rso9PunFe3O067/6kJqNHXHYLvM1ZXe7ZnbV/Q9oVsX9j2RWwfY/uipLttX9z2JWxf0valbF/a9mVsX9b25Wxf3vYVbF/R9pVsX9n2VWxf1fbVbF/d9jVsX9P2tWxf2/Z1bF/X9vVsX9/2DWzf0PaNbN/Y9k1s39T2zWzP2Z63vWC7b3vR9pLtm9u+he1b2r6V7Vvbvo3t29q+ne3b276D7TvavpPtO9u+i+272r6b7bvbvofte9q+l+17276P7fvavp/t+9t+gO0H2n6Q7Qfbfojth9p+mO2H236E7UfafpTtR9t+jO3H2n6c7cfbfoLtJ9p+ku0n236K7afafprtp9t+hu1n2n6W7Wfbfo7t59p+nu3n236B7RfafpHtF9t+ie2X2n5Z34bKe2HkzKmqnpEzB1Q9GxPyc0uG/NzSIT+3QsjPrRTyc6uH/NyaIT+3XsjPbRDyc5uG/Fwu5OdKIT+3RcjPbRvyc9uH/NwuIT+3W8jP7R3yc/uG/NxBIT93SMjPHRnyc0eH/NwJIT93UsjPnR7yc2eG/Nx5IT93QcjPXRr8HP25paGeUP4zCaXhn930xoZJm2vlC0ZD2TNqiwVfnWjNEG9AYzlcNnoKbMwqsHFBBTYupMDGhRXYuIgCG8cosHFRBTYupsDGxRXYuIQCG5dUYONSCmxcWoGNyyiwcVkFNi6nwMblFdi4ggIbV1Rg40oKbFxZgY2rKLBxVQU2rqbAxtUV2LiGAhvXVGDjWgpsXFuBjesosHFdBTaup8DG9RXYuIECGzdUYONGCmzcWIGNmyiwcVMFNm6mwMacAhvzCmwsKLDRV2BjUYGNJQU2bq7Axi0U2LilAhu3UmDj1gps3EaBjdsqsHE7BTZur8DGHRTYuKMCG3dSYOPOCmzcRYGNuyqwcTcFNu6uwMY9FNi4pwIb91Jg494KbNxHgY37KrBxPwU27q/AxgMU2HigAhsPUmDjwQpsPESBjYcqsPEwBTYersDGIxTYeKQCG49SYOPRCmw8RoGNxyqw8TgFNh6vwMYTFNh4ogIbT1Jg48kKbDxFgY2nKrDxNAU2nq7AxjMU2HimAhvPUmDj2QpsPEeBjecqsPE8BTaer8DGCxTYeKECGy9SYOPFCmy8RIGNlyqw8TKgjeWfvr9Z8P1YO/7ltl9h+zjbr7R9vO1X2X617dfYfq3t19l+ve032H6j7TfZfrPtt9h+q+232X677XfYfqftd9l+t+332H6v7ffZfr/tD9j+oO0P2f6w7Y/Y/qjtj9n+uO1P2P6k7U/Z/rTtz9j+rO3P2f687S/Y/qLtL9n+su2v2P6q7a/Z/rrtb9j+pu1v2f627e/Y/q7t79n+vu0f2P6h7R/Z/rHtn9j+qe2f2f657V/Y/qXtX9n+te3f2P6t7RNs/872723/wfYfbf/J9p9t/8X2X23/zfbfbf/D9j9tn2j7X7bThypNZXsf2/va3s/2/rY3Bg5p6vePTzoCnwywf262vcX2VtvbbG+3fWrbB9reYfsg2wfbPo3t09o+xPahtg8Lxpyu/Fd50ldybPWHe10X8uyWkGd3hTx7IOTZYyHPngl59lLIszdCnr0X8uyTkGdfhTz7PuTZryHP/gp5Rs6pfkZOGV71rDnkWUvIs9aQZ20hz9pDnk0d8mxgyLOOkGeDQp4NDnk2TcizaUOeDQl5NjTk2bCQZ9MFz8pb3+DrYsFXJ1pDfpBYxQcDRf1tGdP3w9nV0IBfZOiDSKbvN/m4UXHPgMPtlHNphhAu9QHbvjTQ/zOC/f+/Fj8z9cMWalriZ6YhsnETr2diwD3zEHxhHhYvke0ExjXQ1wY4fyzrDX34zMwMvJmFab2ZJYb1ZiVgvpw1pvUmqp3D//vxw5J32eJHOG7i9XAG3LMqWW9GAOMF6Gszq/D1hj5waAQDb2ZjWm9mi2G9WRO43syuZL2Z478fPyx5lyt+hgvHTbyegwH3CCXrzZzAeAH62owQvt7Qh0zNycCbuZjWm7liWG82AK43cytZb+b578cPS97lip/ZhOMmXs/DgHt2JevNSGC8AH1tZhe+3tAHi41k4M0opvVmVAzrTQ643oxWst7M+9+PH5a8yxU/cwjHTbyelwH3nErWm/mA8QL0tZlT+HpDHyY3HwNv5mdab+aPYb3ZArjeLKBkvXH++/HDkne54mcu4biJ1w4D7rmVrDcGGC9AX5u5ha839AGChoE3LtN648aw3mwPXG8SStab5H8/fljyLlf8zCMcN/E6yYB7pJL1JgWMF6CvzUjh6w19aGSKgTdppvUmHcN6sxtwvckoWW+8/378sORdrvgZJRw38dpjwD1ayXqTBcYL0NdmtPD1hj4oNMvAmwWZ1psFY1hv9gWuNwspWW8W/u/HD0ve5YqfeYXjJl4vzIB7PiXrzSLAeAH62swnfL2hD4ddhIE3Y5jWmzExrDeHANebRZWsN4v99+OHJe9yxc/8wnH/zWsG3AsoWW8WB8YL0NdmAeHrDX0g8OIMvFmCab1ZIob15mjgerOkkvVmqf9+/LDkXa74cYTjJl4vxYDbKFlvlgbGC9DXxghfb+hDoJdm4M0yTOvNMjGsNycB15tllaw3y/3344cl73LFjyscN/F6OQbcCSXrzfLAeAH62iSErzf0wd/LM/BmBab1ZoUY1pszgevNikrWm5X++/HDkne54icpHDfxeiUG3Ckl683KwHgB+tqkhK83F1hHrMzAm1WY1ptVYlhvLgCuN6sqWW9W++/HjxPGFSda+zd+UOMRX1ZjiMemfjx5HD2f5XZGxTwdELMdqmFoGd7yJtBXpvObEHNhY5fPxer9/vm6Rr+Gyg/rXj0gc/mzNfp1/QHeyEns5VhuMJZZHUjKNYDO7QkpnWjNDAAEU+mfFhsp1wxIuVY1KdcMIeVa3SClE61VTGJUUq4JJOVaYOeiyUcBuCbDqrgmeFWs445mX/EfDuUoTgg7uLrIDADGzNrAOSScLQ2TN6SPOPi5dj/5Nq6DtvF/kezrAiWOVrKvq4Ds62khO7iygpIdWe6vj3OIqzVw1lcQOBvUAyeyjSVk4GyIc0hCa+BsqCBwNqoHTmQbi8jA2RjnkKTWwNlYQeBsUtcl0cm+KW4SU1rJvqkCsm9WXyUi21hArhI5nEPSWgMnpyBw8lIDp1wsr4NfJSreuTnRWsUWYFS8NAZ6Duk3p3e+J0WO6wk/tEaY18MnXTMWeIAHuKNmPObDLFGxXh7wEOnfDRhyw+VA/6I3ftAxfAVTblhYQW7YiCE3XAHkDnDvw3D7IyrWcUw8HKOAh5sw8HAckIfArQQzRvgadSXDGrUZwxp1JdC/aPWM9sl4Bp/kGXwyHuiTfD/ZeatTUzRgx2Wx9XJFtl6hyNZximy9UpGt45lsVXrI3ISYixq74jxvIZhzv/o8r6/sQHkBuCHlAx0Z54HyZoUHyosBAUvVBCyGHCgvxXCgvBlIyiKQlCXhB8opAIsMarYovCrUijvq6z2KkwLDu+xmYMxsXj9QbjbvJ9/GLaS/y9ZA9i3rB8rNlgrIvpUWsqMPbiDJjiz3t64fKDdbKwicbeqBE/1AOTJwtq0fKDfbKgic7eqBE/1AOTJwtq8fKDfbKwicHeq6JDrZd6wfKDc7KiD7TvVVIvqBcuQqsXP9QLnZWUHg7CL9QDmRcguGwx8F4I7TFuAD5egDOVf1/Sf5IOduKwafXAU8kIPeqUL75GoGn2zD4JOrgT7ZRrhPrmHwyXYMPrkG6JPthPvkWgaf7MDgk2uBPtlBuE+uY/DJTgw+uQ7ok52E++R6Bp/swuCT64E+QRavYWedOC5HDmCYU+QVesA5rNg/bXbX4BzWbtXnsHYNOYe1W9k5LLSDO6+N91Pi4KhnxHYF2rUbE/HQiRaJeXdgwg7jsxOt/X3zImzXCpEIUWMhd632EO4P4sse/fB5aw9wccOVVyUvnHsKP+vZuQnUgB2XxdarFdl6jSJbr1Vk63WKbL2eydYwUdLZBN8AckPMZSn89wrmfO/qwn+vkMJ/77LCv7NJvhW0F3Bx2hvo3J6Q0onWTAtgUY37VtA+ASn3rSblPiGk3LcbpHSitYpJjErKfYCk3BfsXDT5KAD3Yai29xFeKWrFHfWMBsXJXgwHklqAMbMfcA61nqvYr598G/eXfiBJA9kPAG7HaCX7AQrIfqAWsqNP3yHJjiz3D8I5RO2toIMUBM7B9cCJfisIGTiH4Byi9lbQIQoC59B64ES/FYQMnMNwDlF7K+gwBYFzeF2XRCf7EbhJVHsr6AgFZD+yvkpEvxWEXCWOwjlE7a2goxQEztFSA6dcLO/PcCBkL+CO0/7AwKEx+oDn8Ia+/yQf5NwdyOCTG4AnhtE7VWif3Mjgk4MZfHIj0CcHC/fJTQw+OZTBJzcBfXKocJ/czOCTwxl8cjPQJ4cL98ktDD45ksEntwB9cqRwn9zK4JOjGXxyK9An8OI1aGjfIIXVMcwH1xEH/gsMR0qOBeIOO9eG9jnNQTPQZhpvT4Z4RH6GDuAMX+w3yo4LzvAdX32G77iQM3zH9+O7UdbMFDibCP89S53ERuPedAjP4tAIxs8VgFHPfx4HtOt4YCIE8tkAOBLLTUSkL05gLiCcaM1QgXMsQz44UfhZXPLLiQpwc3H8GCDHTwJzvLP1A/scmftP/u/m2H8bR9zRpvNJ/Sb5WLKtNyqy9SZFtt6syNZbFNl6K5OtYQK+swm+LZkIMZdF1J4SzPmp1aL2lBBRe2qZqO1skm9LngJcNE8FOrcnpHSiNdMKWOzjvi15WkDK06tJeVoIKU/vBimdaK1iEqOS8jQgKU8HOxdNPgrA0xiUymnCFZpW3FHPrlGcnMJwULMVGDNnAOeQcGo8b3ZGP/k2nin9oKYGsp8FlPpayX6WArKfrYXs6FPJSLIjy/1zcA5Re1vyHAWBc249cKLflkQGznk4h6i9LXmegsA5vx440W9LIgPnApxD1N6WvEBB4FxY1yXRyX4RbhLV3pa8SAHZL66vEtFvSyJXiUtwDlF7W/ISBYFzqdTAKRfLZzKcEj4FuON0JjBwaAz0QaTb+v6TfJBzdzaDT24D3qRA71ShfXI7g0/OZfDJ7UCfnCvcJ3cw+OR8Bp/cAfTJ+cJ9cieDTy5k8MmdQJ9cKNwndzH45GIGn9wF9MnFwn1yN4NPLmXwyd1An8CL16ChfYMUVpcxX3ZAHHo/Fi90DfKW6LFAf4wFcjDsvB06/mgeW4BzSYdhT2Y4QgQ4Dxj7zcvLg/OAV1SfB7w85DzgFf1q37x0orW/f2vCMQxO2Vb4zQcuMm7HdPOyP9hO5PnPy4FJ8gpgwgFy0Gyn5LYk0hfjmAsIJ1ozVOCMZYjhK/vJzl3klysV4Obi+GVAjo8Hc7yzoS+RXPXfzYv/No5YoY3i8f0m+UWyrbcrsvUORbbeqcjWuxTZejeTrWHitrMJvuGYDDGXRTxeHcz5NdXi8eoQ8XhNmXjsbJJvOF4NXNyvATq3J6R0ojXTBljs477heG1AyuuqSXltCCmv6wYpnWitYhKjkvJaICmvAzsXTT4KwGsZ1MW1wlWVVtxRz5tRnFzNcLiyDRgz1wPnkHBqPCN2fT/5Nt4g/XClBrLfCJT6Wsl+owKy36SF7OiTxEiyI8v9m3EOUXvD8WYFgXNLPXCi33BEBs6tOIeoveF4q4LAua0eONFvOCID53acQ9TecLxdQeDcUdclgPPVuElUe8PxTgVkv6u+SkS/4YhcJe7GOUTtDce7FQTOPVIDp1ws38Bw0v5q4I7TDcDAoTHQh4fu6ftP8kHO3U0MPrkHePsBvVOF9sm9DD65hcEn9wJ9cotwn9zH4JPbGHxyH9Antwn3yf0MPrmDwSf3A31yh3CfPMDgk7sYfPIA0Cd3CffJgww+uYfBJw8CfQIvXoOG9g1SWN3LfEEBcVB9LF7oGuTNzrFAf9wH5GDYeTt0/NE8tgLnkg7DXsVwhAhwHjD2G473B+cBH6g+D3h/yHnAB/rx3XAkB1/G4JR9hN984CLjvkpuOCLPf94PTJIPABMOkINmXyU3HJG+eJC5gHCiNUMFzn0MMfxQP9m5i/zykALcXBy/F8jxh8Ec72zoSySP/Hfz4r+NI1Zoo/jhfpP8ItnWexXZep8iW+9XZOsDimx9kMnWMHHb2QTfcEyFmMsiHh8N5vyxavH4aIh4fKxMPHY2yTccHwUu7o8BndsTUjrRmmkHLPZx33B8PCDlE9WkfDyElE90g5ROtFYxiVFJ+TiQlE+AnYsmHwXg4wzq4nHhqkor7qjnzShOHmU4XNkOjJkngXNIODWeEXuyn3wbn5J+uFID2Z8GSn2tZH9aAdmf0UJ29EliJNmR5f6zOIeoveH4rILAea4eONFvOCID53mcQ9TecHxeQeC8UA+c6DcckYHzIs4ham84vqggcF6q65LoZH8ZN4lqbzi+rIDsr9RXieg3HJGrxKs4h6i94fiqgsB5TWrglIvlpxhO2j8K3HF6Chg4NAb68NBDff9JPsi5e4bBJw8Bbz+gd6rQPnmYwSfPMfjkYaBPnhPuk0cYfPICg08eAfrkBeE+eZTBJy9xrCdAn7wk3CePMfjkFQafPAb0ySvCffI4g09eY/DJ40CfwIvXoMFzGLA+fJ35ggLioPp9eKFrkDc77wP64w0gB8PO26Hjj+axDTiXdBj2EYYjRIDzgLHfcHwzOA/4VvV5wDdDzgO+1Y/vhiM5+F4Gpxwt/OYDFxmPUXLDEXn+801gknwLmHCAHDTHKLnhiPTF28wFhBOtGSpw3mCI4Xf6yc5d5Jd3FODm4vjrQI6/C+Z4Z0NfInnvv5sX/20csUIbxe/2m+QXybY+rMjWRxTZ+qgiWx9TZOvjTLaGidvOJviGYzrEXBbx+H4w5x9Ui8f3Q8TjB2XisbNJvuH4PnBx/wDo3J6Q0onWzNSAxT7uG44fBqT8qJqUH4aQ8qNukNKJ1iomMSopPwSS8iOwc9HkowD8kEFdfChcVWnFHfW8GcXJ+wyHK6cGxszHwDkknBrPiH3cT76Nn0g/XKmB7J8Cpb5Wsn+qgOyfaSE7+iQxkuzIcv9znEPU3nD8XEHgfFEPnOg3HJGB8yXOIWpvOH6pIHC+qgdO9BuOyMD5GucQtTccv1YQON/UdUl0sn+Lm0S1Nxy/VUD2CfVVIvoNR+Qq8R3OIWpvOH6nIHC+lxo45WL5E4aT9u8Dd5w+AQYOjYE+PPRE33+SD3LuPmPwyRPA2w/onSq0T55k8MkXDD55EuiTL4T75CkGn3zF4JOngD75SrhPnmbwyTcMPnka6JNvhPvkGQafTGDwyTNAn0wQ7pNnGXzyPYNPngX6BF68Bg3tG6Sw+oH5ggLioPobeKFrkDc73wD640cgB8PO26Hjj+axHTiXdBj2PYYjRIDzgLHfcPwpOA/4c/V5wJ9CzgP+3I/vhiM5+HUGp5wl/OYDFxnPVnLDEXn+8ydgkvwZmHCAHDRnK7nhiPTFL8wFhBOtGSpwfmSI4V/7yc5d5JdfFeDm4vgPQI7/BuZ4Z0NfIvn9v5sX/20csUIbxb/1m+QXybY+qcjWpxTZ+rQiW59RZOuzTLaGidvOJviGYybEXBbx+Ecw539Wi8c/QsTjn2XisbNJvuH4B3Bx/xPo3J6Q0onWzEDAYh/3DceJASn/qiblxBBS/tUNUjrRWsUkRiXlRCAp/wI7F00+CsCJDOpionBVpRV31PNmFCd/MByuHAiMGdr+Qs0h4dR4Rgw5B1w2ToW28X+R7H1wk6j2hmMfBWTvq4Xs6JPESLIjy/1+OIeoveHYT0Hg9K8HTvQbjsjAacQ5RO0Nx0YFgdNUD5zoNxyRgTMA5xC1NxwHKAic5rouiU72Ftwkqr3h2KKA7K31VSL6DUfkKtGGc4jaG45tCgKnXWrglItl2mIDrxIV79ycaK1iC1DiDcfn+v6TfJBz15fBJ88Bbz+gd6rQPnmewSf9GXzyPNAn/YX75AUGnzQx+OQFoE+ahPvkRQafNDP45EWgT5qF++QlBp+0MvjkJaBPWoX75GUGn7Qz+ORloE/aGQpsDt8ghdXUwDelNAa6Xu+8oIA+2oS82fkj0B8DgRyM44YjzePUwLmkw7C/MxwhApwHjP2GY0dwY21Q/4bKs3/0F9XnAemHhgf/Icevi/iBwSlXCL/5wEXGcUpuOCLPf3YANzUGARctIAfNOCU3HJG+GMxcQDjRmqECZ2B/fAxP01927iK/TKMANxfHpwZyfFowxzsb+hLJkP9uXvy3ccQKbRRP23+SXyTb+rwiW19QZOuLimx9SZGtLzPZqvSGoxdiLot4HBrM+bBq8Tg0RDwOKxOPnU3yDcehwMV9WH+cc+O84dih8IbjdAEpp68m5XQhpJy+G6R0orWKSYxKyumApJy+P9a5aPJRAE7HoC6mE66qtOKOet6M4mQo/vVNpgO4dT5D/YajmaG/fBtnlH64UgPZZ6rfcDQzKSD7zFrIjj5JjCQ7styfpX7D0cyiIHBmrQdO9BuOyMAZXr/haIYrCJwR9cCJfsMRGTiz1W84mtkUBM7sdV0Snexz1G84mjkUkH3O+ioR/YYjcpWYq37D0cylIHDmln7DkUg5I8NJ+6HAHacZhd9wfKXvP8kHOXczM/jkFeDtB/ROFdonrzL4ZFYGn7wK9Mmswn3yGoNPRjD45DWgT0YI98nrDD6ZncEnrwN9Mrtwn7zB4JM5GXzyBtAncwr3yZsMPpmbwSdvAn0CL16DhvYNUljNI/yGY+cFBfTRJuTNzoFAf4xUdsPxb/8AbzjSYdghDEeIOhTecBwVnAccXX0ecFTIecDRjDccycFTMzjlVuE3H7jIeJuSG47I85+jgElyNDB5AzloblNywxHpi3mZCwgnWjNU4IxkiOH5hJ/FJb/MpwA3F8fnAXJ8fjDHOxv6EskC/928+G/jiBXaKJ6//yS/SLb1VUW2vqbI1tcV2fqGIlvfZLJV6Q3HbIi5LOLRCebcVItHJ0Q8mm5cJpN0w9EBLu4Gd8MxG+cNx0EKbzi6ASkT1aR0Q0iZiOGG4yAgKV0gKRP9sc5Fk48C0GVQF65wVaUVd9TzZhQnDsPhykHAw5XJ+g1Hk+wv38aU9MOVGsiert9wNGkFZM9oITv6JDGS7Mhy36vfcDSegsDJ1gMn+g1HZOAsWL/haBZUEDgL1QMn+g1HZOAsXL/haBZWEDiL1HVJdLKPqd9wNGMUkH3R+ioR/YYjcpVYrH7D0SymIHAWl37DkUiZYjhp7wB3nFLAwKEx0IeH3ur7T/JBzl2GwSdvAW8/oHeq0D55m8EnWQafvA30SVa4T95h8MlCDD55B+iThYT75F0GnyzC4JN3gT5ZRLhP3mPwyaIMPnkP6JNFhfvkfQafLM7gk/eBPoEXr0FD+wYprJYQfsOx84IC+mgT8mbnSKA/llR2w5HmEfHbBDrHo8OwCzAcIRqk8IbjUsF5wKWrzwMuFXIecGnGG47k4HkYnPKI8JsPXGR8VMkNR+T5z6WASXJpYPIGctA8quSGI9IXyzAXEE60ZqjAWZIhhpcVfhaX/LKsAtxcHF8CyPHlwBzvbOhLJMv/d/Piv40jVmijeLn+k/wi2da3Fdn6jiJb31Vk63uKbH2fyValNxxzIeayiMcVgjlfsVo8rhAiHlfsxmUySTccVwAu7ivibjjm4rzhOFjhDceVAlKuXE3KlUJIuXIMNxwHA0m5EpCUK/fHOhdNPgrAlRjUxUrCVZVW3FHPm1GcrMBwuHIw8HDlKvUbjmaV/vJtXFX64UoNZF+tfsPRrKaA7KtrITv6JDGS7Mhyf436DUezhoLAWbMeONFvOCIDZ636DUezloLAWbseONFvOCIDZ536DUezjoLAWbeuS6KTfb36DUezngKyr19fJaLfcESuEhvUbziaDRQEzobSbzgSKVdlOGm/AnDHaVVg4NAY6MNDH/T9J/kg5251Bp98ALz9gN6pQvvkQwafrMngkw+BPllTuE8+YvDJ2gw++Qjok7WF++RjBp+sy+CTj4E+WVe4Tz5h8Mn6DD75BOiT9YX75FMGn2zI4JNPgT6BF69BQ/sGKaw2En7DsfOCAvpoE/Jm55JAf2ys7IYjzSPitwl0jkeHYZdnOEI0WOENx02C84CbVp8H3CTkPOCmjDccycFLMDjlZeE3H7jI+IqSG47I85+bAJPkpsDkDeSgeUXJDUekLzZjLiCcaM1QgbMxQwznhJ/FJb/kFODm4vhGQI7nwRzvbOhLJIX/bl78t3HECm0U5/tP8otkWz9UZOtHimz9WJGtnyiy9VMmW5XecMyHmMsiHv1gzovV4tEPEY/Fblwmk3TD0Qcu7kXcDcd8nDccp1F4w7EUkHLzalKWQki5eQw3HKcBkrIEJOXm/bHORZOPArDEoC5KwlWVVtxRz5tRnPgMhyunAR6u3KJ+w9Fs0V++jVtKP1ypgexb1W84mq0UkH1rLWRHnyRGkh1Z7m9Tv+FotlEQONvWAyf6DUdk4GxXv+FotlMQONvXAyf6DUdk4OxQv+FodlAQODvWdUl0su9Uv+FodlJA9p3rq0T0G47IVWKX+g1Hs4uCwNlV+g1HIuWWDCftfeCO05bAwKEx0IeHPuv7T/JBzt3WDD75DHj7Ab1ThfbJ5ww+2ZbBJ58DfbKtcJ98weCT7Rl88gXQJ9sL98mXDD7ZkcEnXwJ9sqNwn3zF4JOdGXzyFdAnOwv3ydcMPtmVwSdfA30CL16DhvYNUljtJvyGY+cFBfTRJuTNzo2B/thd2Q1HmkfEbxPoHI8OwxYYjhBNo/CG4x7BecA9q88D7hFyHnBPxhuO5OCNGJzykfCbD1xk/FjJDUfk+c89gElyT2DyBnLQfKzkhiPSF3sxFxBOtGaowNmdIYb3Fn4Wl/yytwLcXBzfDcjxfcAc72zoSyT7/nfz4r+NI1Zoo3if/pP8ItnWzxXZ+oUiW79UZOtXimz9mslWpTccCyHmsojH/YI5379aPO4XIh7378ZlMkk3HPcDLu774244FuK84TitwhuOBwSkPLCalAeEkPLAGG44Tgsk5QFAUh7YH+tcNPkoAA9gUBcHCFdVWnFHPW9GcbIfw+HKaYGHKw+q33A0B/WXb+PB0g9XaiD7IfUbjuYQBWQ/VAvZ0SeJkWRHlvuH1W84msMUBM7h9cCJfsMRGThH1G84miMUBM6R9cCJfsMRGThH1W84mqMUBM7RdV0SnezH1G84mmMUkP3Y+ioR/YYjcpU4rn7D0RynIHCOl37DkUh5MMNJ+/2AO04HAwOHxkAfHvqm7z/JBzl3hzL45Bvg7Qf0ThXaJ98y+ORwBp98C/TJ4cJ9MoHBJ0cy+GQC0CdHCvfJdww+OZrBJ98BfXK0cJ98z+CTYxl88j3QJ8cK98kPDD45nsEnPwB9Ai9eg4b2DVJYnSD8hmPnBQX00Sbkzc7dgf44UdkNR5pHxG8T6ByPDsPuy3CEaFqFNxxPCs4Dnlx9HvCkkPOAJzPecCQH78bglB+E33zgIuOPSm44Is9/ngRMkicDkzeQg+ZHJTcckb44hbmAcKI1QwXOiQwxfKrws7jkl1MV4Obi+AlAjp8G5nhnQ18iOf2/mxf/bRyxQhvFp/Wf5BfJtn6ryNYJimz9TpGt3yuy9QcmW5XecPRDzGURj2cEc35mtXg8I0Q8ntmNy2SSbjieAVzcz8TdcPTjvOE4ROENx7MCUp5dTcqzQkh5dgw3HIcASXkWkJRn98c6F00+CsCzGNTFWcJVlVbcUc+bUZycwXC4cgjwcOU59RuO5pz+8m08V/rhSg1kP69+w9Gcp4Ds52shO/okMZLsyHL/gvoNR3OBgsC5sB440W84IgPnovoNR3ORgsC5uB440W84IgPnkvoNR3OJgsC5tK5LopP9svoNR3OZArKPra8S0W84IleJy+s3HM3lCgLnCuk3HImU5zKctD8DuON0LjBwaAz04aEf+/6TfJBzdz6DT34E3n5A71ShffITg08uZPDJT0CfXCjcJz8z+ORiBp/8DPTJxcJ98guDTy5l8MkvQJ9cKtwnvzL4ZCyDT34F+mSscJ/8xuCTKxh88hvQJ/DiNWho3yCF1TjhNxw7LyigjzYhb3aeCPTHlcpuONI8In6bQOd4dBj2dIYjREMU3nAcH5wHvKr6POD4kPOAVzHecCQHn8DglL5DsQkXjZuLjP2G8iw0/cF2Is9/jgcmyauAyRvIQQPwayw3HJG+uJq5gHCiNUMFzpUMMXyN8LO45JdrFODm4vg4IMevBXO8s6EvkVz3382L/zaOWKGN4mv7T/KLZFt/UmTrz4ps/UWRrb8qsvU3JluV3nAshpjLIh6vD+b8hmrxeH2IeLyhTDx2Nsk3HK8HLu434G44FuO84ThU4Q3HGwNS3lRNyhtDSHlTDDcchwJJeSOQlDf1xzoXTT4KwBsZ1MWNwlWVVtxRz5tRnFzPcLhyKPBw5c31G47m5v7ybbxF+uFKDWS/tX7D0dyqgOy3aSE7+iQxkuzIcv/2+g1Hc7uCwLmjHjjRbzgiA+fO+g1Hc6eCwLmrHjjRbzgiA+fu+g1Hc7eCwLmnrkuik/3e+g1Hc68Cst9XXyWi33BErhL31284mvsVBM4D0m84EilvYThpfz1wx+kWYODQGOjDQ7/3/Sf5IOfuNgaf/A68/YDeqUL75A8Gn9zB4JM/gD65Q7hP/mTwyV0MPvkT6JO7hPtkIoNP7mHwyUSgT+4R7pO/GHxyH4NP/gL65D7hPmnoh/fJAww+aQCqc3jxGjS0b5DC6kHhNxw7LyigjzYhb3ZeCfTHQ8puONI8In6bQOd4dBj2OoYjREMV3nB8ODgP+Ej1ecCHQ84DPsJ4w5EcPI7BKYOF33zgIuM0Sm44Is9/PgxMko8AkzeQg2YaJTcckb54lLmAcKI1QwXOQwwx/Jjws7jkl8cU4Obi+INAjj8O5nhnQ18ieeK/mxf/bRyxQhvFj/ef5BfJtv6hyNY/Fdk6UZGtfymylTZoOGxVesOxFGIui3h8Mpjzp6rF45Mh4vGpblwmk3TD8Ung4v4U7oZjKc4bjsMU3nB8OiDlM9WkfDqElM/EcMNxGJCUTwNJ+Ux/rHPR5KMAfJpBXTwtXFVpxR31vBnFyZMMhyuHAV/fPFu/4Wie7S/fxuekH67UQPbn6zcczfMKyP6CFrKjTxIjyY4s91+s33A0LyoInJfqgRP9hiMycF6u33A0LysInFfqgRP9hiMycF6t33A0ryoInNfquiQ62V+v33A0rysg+xv1VSL6DUfkKvFm/YajeVNB4Lwl/YYjkfI5hpP2TwJ3nJ4DBg6NgT48NFWQfJBz9wKDT6YCrtzonSq0T/ow+OQlBp/0AfrkJeE+6cvgk1cYfNIX6JNXhPukH4NPXmPwST+gT14T7pP+DD55g8En/YE+eUO4TxoZfPIWg08agT6BF69BQ/sGKazeFn7DsfOCAvpoE/Jm50NAf7yj7IYjzSPitwl0jkeHYZ9gOEI0DHdINbbzgO8G5wHfqz4P+G7IecD3ys4Dop1MDkYGTKeT0YdokecV3wUG9Xv9eciHXliQmN9nXlicaM3QwvcOQ6L5QPgZTfLLBwpxIzat3u6Pn8+p+snG3YcJdx/huPsy4e4rHHc/Jtz9hOPuz4S7v3DcjUy4G8G4Oxsaf6Gf7DqDxlu9H77WnQpo47i+uLHGDMEK2GENk+aOgz/kmyv64v1+RV+e+GmA2unyjW3+4Winz4YH339oc9VHtn9s+ye2f2r7Z7Z/bvsXtn9p+1e2f237N7Z/a/sE27+z/Xvbf7D9R9t/sv1n23+x/Vfbf7P9d9v/sP1P2yfa/hcJ50b779vex/a+jQ2VopmMGVD17KOQZx+HPPsk5NmnIc8+C3n2ecizL0KefRny7KuQZ1+HPPsm5Nm3Ic8mhDz7LuTZ9yHPfgh59mPIs59Cnv0c8uyXkGe/hjz7LeTZ7yHP/gh59mfIs4khz/4KeUZkqn42VcizPiHP+gbPylu/4OtiwdcoR24o5D7ujxjrn/D9JPpY/26mfArcWJiL6eOhIL5I/mun+SwaZqcMs/k8ylhuxfyZL4C+mFumL5wqO82XvcScLk2G2XzVu7G8kPkzXwN9MY80X3ihdppveo45UwOz+banY2Vqzp+ZAPTFSDm+cKdgp/muJ5gzU8Rsvu/+WIUu5s/8APTFKAm+yHRpp/mxe5idbmA2P3VnLKdb82d+Bvpi9P+vL1LdtNP80hXmZLcxm1+nOFay1IP5M78BfTHv/5cvMj2y0/xeG7PXQ8zmjxpjZUs9nj/zJ9AX88XvC6cXdpqJYZidXmE2f00+lunl/BnSZShfzB+nL/xe22mmqsSciIDZ9Ckbyy1Fmj/TF+iLBZh8MXWVL5xorWKzLyrmDyEa/u/PNjIfAV/CL4zb2DVADW+AGtQANZQBagADrGENsAYzwBrCANdAA8zhBpmDaA2wYfTvy4byBn9R3YjKI74pt7dfI6PBNDjqVFOn8f0agW+DgYsb1xySjdj7pn4Fbidii/NjIPvC7PZZ35SVz0VjEGBN1W+rGhsnP/bZFPJWAX1WGpdJHNMIDKAmJueij1UiMQ8AJrOGBnzA0et0Shbo4w6rA+95IJN4s3B/EF+agQsCA+5Yq6I+sFyW9cvtbWlkNLgFXhVl/RYgcVuFV0U0h63wqijrtwKDgAM3Jc1m4cm4GcidNnAy7mzoggAZL+1AzHFW5n1gdmcLIeayVOZTB0l+YHVlPnVIZT4whsoct5o5ZmogKQcyORcdiEjMHcIrQUqO7QyV4CDhiyD5ZZAC3FwcRy7Wg4VzvDnwNbrgQRYpg4BjTQNe/ONSYVPB1q18otzeaRsZDZ4WrsLyiWmBDhwiXIXRHA6Bq7B8YojwBYiS5jQMC9BQJQsQkpfDlKqdqWB2590Qc1nUznRBMp2+Wu1MF6J2po9B7eBWDcdMByTl9EzORQciEvMMwitBSo7DGJLujMIXG/LLjApwc3F8RiDHZ2LmOEKVhKkdJ1ozyHdaSLUzM3PsIfgyc6NsTs+iVDE2wNZ+r1Ru76yNjAbPCleMXmlWoAOHC1eMNIfD4YrRKw1XoBhnYVjERyhZxJG8nE2pYmyA2e0VQ8xlUYyzB8l0jmrFOHuIYpwjBsWIWzUcMzuQlHMwORcdiEjMcwpXjJQcZ2NIunMJX2zIL3MpwM3F8bmAHJ9bOMdrKRQnWjNIhTKPcJVHPp6nUTYPRypVeX/B7r65Trm9oxoZDR4FV3muMwrowNHCVR7N4Wi4ynOd0QpU3kiGhXdeJQsvkpfzKVV5f8Eu6JpSiLksKm/+IJkuUK3y5g9ReQvEoPL+At6Ynh9IygUaeZyLDkQkZkd4BUzJcT6GpGuELzbkF6MANxfHDZDjrnCO11IoTrRmkAolIVzlkY8TjbJ5mFSq8ibC1mu/QuWlGhkNTsFVnu+kgA5MC1d5NIdpuMrznbQClZdkWHgzShZeJC89pSpvIkzlFWJTedkgmS5YrfKyISpvwRhU3kSgyssCSblgI49z0YGIxLyQ8AqYkqPHkHQXFr7YkF8WVoCbi+MLAzm+iHCO11IoTrRmkApljHCVRz4e0yibh4sqVXl/wtbrdMXnzy3WyGkwXOWlzWJABy4uXOXRHC4OV3npCtxOxMaBm1TeogwL7xJKFl4kL5dUqvL+hKm8dGyfNbhUkEyXrlZ5S4WovKVjUHl/AlXeUkBSLt3I41x0ICIxLyO8AqbkuCRD0l1W+GJDfllWAW4uji8L5PhywjleS6E40ZpBKpTlhas88vHyjbJ5uIJSlfcH7l2eV27vio2MBq+If5fnrQh04ErCVR7N4Ur4d3neSgpU3goMC+/KShZeJC9XUary/oCpPD8TYi6Lyls1SKarVau8VUNU3moxqLw/gCpvVSApV2vkcS46EJGYVxdeAVNyXIUh6a4hfLEhv6yhADcXx9cAcnxN4RyvpVCcaM0gFcpawlUe+XitRtk8XFupyvsdtl4ns+X2rtPIaPA6cJWXzK4DdOC6wlUezeG6cJWXzK6rQOWtzbDwrqdk4UXycn2lKu93mMpLeiHmsqi8DYJkumG1ytsgROVtGIPK+x2o8jYAknLDRh7nogMRiXkj4RUwJcf1GZLuxsIXG/LLxgpwc3F8YyDHNxHO8VoKxYnWDFKhbCpc5ZGPN22UzcPNlKq832Drdb7ixGaukdHgHFzl5U0O6MC8cJVHc5iHq7x8BW4nYuPATSpvM4aFt6Bk4UXy0leq8n6Dqbx8bCc2i0EyLVWrvGKIyivFoPJ+A6q8IpCUpUYe56IDEYl5c+EVMCVHnyHpbiF8sSG/bKEANxfHtwByfEvhHK+lUJxozSAVylbCVR75eKtG2TzcWqnK+xWn8grl9m7TyGjwNniVV9gG6MBthas8msNt8SqvsK0Clbc1w8K7nZKFF8nL7ZWqvF9xKi8fYi6LytshSKY7Vqu8HUJU3o4xqLxfgSpvByApd2zkcS46EJGYdxJeAVNy3J4h6e4sfLEhv+ysADcXx3cGcnwX4RyvpVCcaM0gFcquwlUe+XjXRtk83E2pyvsFd2IzX27v7o2MBu+OP7GZ3x3owD2Eqzyawz3wJzbzeyhQebsxLLx7Kll4kbzcS6nK+wV3YjMXYi6Lyts7SKb7VKu8vUNU3j4xqLxfgCpvbyAp92nkcS46EJGY9xVeAVNy3Ish6e4nfLEhv+ynADcXx/cDcnx/4RyvpVCcaM0gFcoBwlUe+fiARtk8PFCpyvsZtl57Fb9J4aBGRoMPgqs8zzkI6MCDhas8msOD4SrPcw5WoPIOZFh4D1Gy8CJ5eahSlfczTOVlSiHmsqi8w4Jkeni1yjssROUdHoPK+xmo8g4DkvLwRh7nogMRifkI4RUwJcdDGZLukcIXG/LLkQpwc3H8SCDHjxLO8VoKxYnWDFKhHC1c5ZGPj26UzcNjlKq8n5hU3rGNjAYfy6DyjgU68DjhKo/m8DgGlXecApV3DMPCe7yShRfJyxOUqryfFKq8E4NkelK1yjsxROWdFIPK+wmo8k4EkvIkJSoPiflk4RUwJccTGJLuKcIXG/LLKQpwc3H8FCDHTxXO8VoKxYnWDFKhnCZc5ZGPT2uUzcPTlaq8H2Hrda7iMzbPaGQ0+Ay4ystlzwA68EzhKo/m8Ey4ystlz1Sg8k5nWHjPUrLwInl5tlKV9yNM5eVi+4zNc4Jkem61yjsnROWdG4PK+xGo8s4BkvLcRh7nogMRifk84RUwJcezGZLu+cIXG/LL+Qpwc3H8fCDHLxDO8VoKxYnWDFKhXChc5ZGPL2yUzcOLlKq8H3AqL1lu78WNjAZfjFd5yYuBDrxEuMqjObwEr/KSlyhQeRcxLLyXKll4kby8TKnK+wGn8hIh5rKovLFBMr28WuWNDVF5l8eg8n4AqryxQFJe3sjjXHQgIjFfIbwCpuR4GUPSHSd8sSG/jFOAm4vj44Acv1I4x2spFCdaM0iFMl64yiMfj2+UzcOrlKq873G/Fb3iXd7VjYwGXw1XeX72aqADrxGu8mgOr4GrPD97jQKVdxXDwnutkoUXycvrlKq873G/FT22d3nXB8n0hmqVd32IyrshBpX3PVDlXQ8k5Q2NPM5FByIS843CK2BKjtcxJN2bhC825JebFODm4vhNQI7fLJzjtRSKE60ZpEK5RbjKIx/f0iibh7cqVXnfwdbrQrHc3tsaGQ2+Da7yCsXbgA68XbjKozm8Ha7yCsXbFai8WxkW3juULLxIXt6pVOV9B1N5BT/EXBaVd1eQTO+uVnl3hai8u2NQed8BVd5dQFLe3cjjXHQgIjHfI7wCpuR4J0PSvVf4YkN+uVcBbi6O3wvk+H3COV5LoTjRmkEqlPuFqzzy8f2Nsnn4gFKVNwG2XpuKd3kPNjIa/CBc5Znsg0AHPiRc5dEcPgRXeSb7kAKV9wDDwvuwkoUXyctHlKq8CTCVZ2J7l/dokEwfq1Z5j4aovMdiUHkTgCrvUSApH2vkcS46EJGYHxdeAVNyfIQh6T4hfLEhvzyhADcXx58AcvxJ4RyvpVCcaM0gFcpTwlUe+fipRtk8fFqpyvsW91vRK1TeM42MBj8DV3n57DNABz4rXOXRHD4LV3n57LMKVN7TDAvvc0oWXiQvn1eq8r7F/Vb02FTeC0EyfbFa5b0QovJejEHlfQtUeS8ASfliI49z0YGIxPyS8AqYkuPzDEn3ZeGLDfnlZQW4uTj+MpDjrwjneC2F4kRrBqlQXhWu8sjHrzbK5uFrSlXeN7jfpOCV2/t6I6PBr8NVnue9DnTgG8JVHs3hG3CV53lvKFB5rzEsvG8qWXiRvHxLqcr7BqbyvEyIuSwq7+0gmb5TrfLeDlF578Sg8r4Bqry3gaR8p5HHuehARGJ+V3gFTMnxLYak+57wxYb88p4C3Fwcfw/I8feFc7yWQnGiNYNUKB8IV3nk4w8aZfPwQ6Uq72vYep2sUHkfNTIa/BFc5SW9j4AO/Fi4yqM5/Biu8pLexwpU3ocMC+8nShZeJC8/VaryvoapvGRsKu+zIJl+Xq3yPgtReZ/HoPK+Bqq8z4Ck/LyRx7noQERi/kJ4BUzJ8VOGpPul8MWG/PKlAtxcHP8SyPGvhHO8lkJxojWDVChfC1d55OOvG2Xz8BulKu8r2HqdNeX2ftvIaPC3cJWXNd8CHThBuMqjOZwAV3nZCtxOxMaBm1TeNwwL73dKFl4kL79XqvK+gqm8rBNiLovK+yFIpj9Wq7wfQlTejzGovK+AKu8HICl/bORxLjoQkZh/El4BU3L8niHp/ix8sSG//KwANxfHfwZy/BfhHK+lUJxozSAVyq/CVR75+NdG2Tz8TanK+xK2Xmeccnt/b2Q0+He4yss4vwMd+IdwlUdz+Adc5WWcPxSovN8YFt4/lSy8SF5OVKryvoSpvHQpxFwWlfdXZzJtaqhUdH+FqDz6IW6V9yVQ5f2FTJZNPM5FByIS81RNOL82NOADjpLjRIak26dJ9mJDfiEbpePm4ni5nVHH6iuc47UUihOtGaRC6cccLwgfk42Sedi/CVv0xKXyvsB9+krFb1JobGI0uLEJrfLyxUagA5uAxOKaw6YmtMrLF5uEL7yk8vozLLwDlCy8SF42gxNeXCrvC9ynr8T2mxRagmTaWq3yWpomV3mtMai8L4AqrwVIytYmHueiAxGJuU14BUzJsZkh6bYLX2zIL+0KcHNxvB3I8amFc7yWQnGiNYNUKAOFqzzy8cAm2TzsUKryPoet127Fu7xBTYwGD4KrPNcZBHTgYOEqj+ZwMFzluc5gBSqvg2HhnUbJwovk5bRKVd7nuN+kENu7vCFBMh1arfKGhKi8oTGovM+BKm8IkJRDm3iciw5EJOZhwitgSo7TMiTd6YQvNuSX6RTg5uL4dECOTy+c47UUihOtGaRCmUG4yiMfz9Akm4czKlV5n+HW60K5vTM1MRo8E1zlOYWZgA6cWbjKozmcGa7ynMLMClTejAwL7yxKFl4kL2dVqvI+g6k8Jx9iLovKGx4k0xHVKm94iMobEYPKA64aZjiQlCOaeJyLDkQk5tmEV8CUHGdlSLqzC19syC+zK8DNxfHZgRyfQzjHaykUJ1ozSIUyp3CVRz6es0k2D+dSqvI+ha3X6YoTm3M3MRo8N1zlpYtzAx04j3CVR3M4D1zlpYvzKFB5czEsvCOVLLxIXo5SqvI+xd3Li+3E5uggmc5brfJGh6i8eWNQeZ8CVd5oICnnbeJxLjoQkZjnE14BU3IcxZB05xe+2JBf5leAm4vj8wM5voBwjtdSKE60ZpAKxRGu8sjHTpNsHhqlKu8T2HptKj5j021iNNiFqzxjXKADE8JVHs1hAq7yTAVuJ2LjwE0qzzAsvEklCy+SlymlKu8T3InN2D5jMx0k00y1ykuHqLxMDCrvE6DKSwNJmcGd2GQNRCRmT3gFTMkxxZB0s8IXG/JLVgFuLo5ngRxfUDjHaykUJ1ozSIWykHCVRz5eqEk2DxdWqvI+xh1gqriXt0gTo8GLNOHHHSNcmRHuMU2TJhg0LpuaWphhgVtUyQKH5NJizAscxCcx8fJ/YSFZXOlC8hHTQrJEE6PBSzAsJEsKX0gI95KKFpLFGRaSpZQsJEguLS18ISGfLF1fSGBjLaN0IfmwP24Oyu1dtonR4GUZyLAs0IHLCV+UaA6XY0j0yyl477QMA+7llSxwSF6uIHwrkHyyAoOvVxTOcYrtFZkWdi5ergjk5UrCeVmrmHGiNYMsZlYWznHy8coMc4jk4SoK1sJVGPLjYKbfgDM1GP8oIOYPga/hPwIW5KsCc+FcQ3FjzQ0cax7gWCOBY40CjjUaONa8wLHmA441P3CsBXBjOXGKcWC8Vojx1ZoYDV6NYVd3deECmnCvzlBkE9lo2D4N/GQb1cCzUA8H2/kh6lWHcRzQaxND/wd5l2/++QI4DGk6v4l8fc5M+jbiB66Y8j9E+ohOU/nHCL/UwVQ/6PWvATSTP+rlL443YQ+/7s1YJvzxNz0fy9T6i297Opap/VcTejaWmdJffteTscyU//r77o/VxUiO80N3x+pyJMf5sXtjdWMkx/mpO2N1ayTH+bnrsbo5kuP80tVY3R7JcX6d8lg9GMlxfpvSWD0ayXF+rz1WD0dynD9qjdXjkRznz/CxejGS40wMG6tXIznOX5OP1cuRbK1SvUHR65FskV05VoSRHKdP+ViRRnKcvsBNmHIhsQbV+ugdIyqkBzfy7HAhJ6HzYscaZYKHY/dsdYadzcHAXx+5JlClkuAZ0BCuroeD56AuJHoyUl1I9GykupDo2Uh1IdGzkepComcj1YWE08NWFxI9a3Uh0UO7Gia1tYLN87XDBIUTrRkqUNdQcuaa7FyT4TX8OsKPHxAB1mHAvS74FVqn6KNxDwjGRc/F2kxzsR7TXKw3hbmIajMXL9YfyhsPXdhX6MI+Ng5sAMY9HMx9EuWwXBUIc9B4/4pzyHhlAh0wXoVIjzxelVCPON5kYj3SeCGCPcJ4oaK91+PVEO69HK+meO/VeFMQ8L0Yb4oivsfjdSHkezhel2K+R+N1Q9D3YLxuifpuj9dNYd/N8bot7rs1Xg8EfjfG65HI73K8Hgr9Lsbrsdif4ni9EPxTGK9Xor/meL0U/jXG67X4Dx0vwgZAyHiRNgEmGy/iRkDVeJE3AyrGA2wIrMPwggpYn5sNwMc/mxvCT+Q19HAOutIA5WNy6G3UnJS/rFu/TLPAjV4HbHSngF1/Cm9wuximy/Ahm9dnEHJbgYVcZ+vXQ5/1ZOMpsnhtkplgkL4o5+UGZRsrvfVPV3OO9M+GZWOZRMLGhp8xJb+USGWybt6kE+l0KVnKpL2kX0olc36maJK5hJstZpyS8YrFTCpRyKRLWb+QLpUnbeMnEkk/my+YlJvO5R3PT+ScUjKTcJ2cn8j4fsJLp3OJhJ/2Sl7Wc91cKeE5qUwm66TdRNbl8s+GgX+mdGpB8jHt8kVso2CDfGMtCZzLvo0YkvUmTAvXJoy70DQXGzPMxaZMc7Ep4y40Fy+2Eb4LzcWBbYfKzgOUZDlUDdDfZtu6qqluZiMmVbOZRlWzGbOq2YwhMWz3P6hqck0yE8x2TFVzTpmqyQNVzbZAVcPln3yZqqm1KEjejuK0k2uBKWhcYArMC0yBYYHZnmmB6Q+2E5nAfOBYyG0z5GK1PVMy9LuxWEWd02ITblGo2DYTtFhx+af4H9qCKwVbcJtz3KqrdbDUidbMmuCVmwt3H0bcUW3cQvi2KBFzC4bFeEumwmRLxm3RzZnmYiumudiKcVuUixc7Cd8W5eLAzgq2RbdgyKVAf5ud69ui1e3v/I2ak/ICa2tO1boFU0LcmlG1ks1bMySGXZRsi24BLIq2aZKZYHZhUjLbxLAtivTPtsBt0Z2BSpPLP9t2Q2kO76G/umj1j6jo0Uj1j6jo2Uj1j6jo2Uj1j6jo2Uj1j6jo2Uj1j6hwetjqH1HRs1b/iIoe2tUwqW0X7M5vr0X0ctm3HYPA3YFJ7O/AuBNMc7E9w1zsyDQXOzLuBHPx4lThO8FcHDhNwcc0wHJVIE5B4/0rUCHjlYlUwHgVQjXyeFViNeJ4kwnWSOOFiNYI44UK116PV0O89nK8mgK2V+NNQcT2YrwpCtkej9eFmO3heF0K2h6N1w1R24PxuiVsuz1eN8VtN8frtsDt1ng9ELndGK9HQrfL8XoodrsYr8eCd4rj9UL0TmG8XgnfmuP1UvzWGK/XAjh0vAgiOGS8SEJ4svEiiuGq8SIL4orxAKKY4809sD43p9Xf3Fc3sx3Tm/udNL6534n5zf1ODELusv/BN/c7N8lMMJcxvRneWdmb+12Ab+5PA7655/LPLv8PF5qQR6447eRaYHbVuMDsyrzA7MqwwIxVcqEJmcB2A46FPBqGXKzGMiXD3WK40LQ78ELTzkNlLlZc/tm9zD8jwH6h89vA34L191sA2HjBWwDQeP++BYCMV/YWADBexVuAyONVvQWION5kbwEijRfyFiDCeKFvAXo9Xo23AL0cr+ZbgF6NN4W3AL0Yb4pvAXo8XhdvAXo4XpdvAXo0XjfeAvRgvG69Bej2eN18C9DN8br9FqBb4/XgLUA3xuvRW4Aux+vhW4AuxuvxW4ApjteLtwBTGK9XbwFqjtfLtwA1xuv1W4DQ8SK8BQgZL9JbgMHgI3GDwcfiBoOPxtF4na0GD3vcGsoaWt/uAdxMJNsGN0zSO/RnGn9i8P3YvpO+v7zs+8HB953/3Z72v9nL9r1t36dp0vPO1hc7v8btixtrT6B23he8D1Ptm33LfLNX2fd7l32/T1Olb/azf96fNJTtBwa+6crv+5V9f0WZ30dX+f0g+3MH236I7YcGY1Mf0hDPB09c2Te674qlv1ux3N7DmhgNPizktWNU4w8DJoXDgQHBNYeHAzcOO+fw8CYdC8ARODuTYYngiLLgH1cW/Ac11U4ER9q/O8r2o20/pqlyPKTvabFG+r5zTo8VfsycOH8sA+ePVcL543B2JsI4f1wZt8eXcf7IKXD+ePt3J9h+ou0nTYHziF95f3iT7F95fzJz/ES1r8P6bra+kxeiEeOn1AEsRGfri8P7mvAPTmm3WGnuUHVQJ+5TgHUQcA4THHNI8XsKxxUTppfJNO7wYFwtfDpNJp9cGgO9HlB9B8zjhmqL4xn4eTqQn0rFaqnc3jM4xeoZeLFaOgNIsjMViNUz8YV76UzhgoUWp9MZgv8s5h22WuL3rCkIgbPt351j+7m2n8csfs9kmNPzFYjf8xli6HxmLtUSlWdPgUsX2L+70PaLbL+YWVSeKVxUXgJe6Fsa4lnox+JEodNeZuelwUJ/WfB1bPD18uDrFcHXccHXK4Ov44OvVwVfrw6+XhN8vTb4eh3nEVXgMasKVTE2MLr82biQZ1eFPLu2aXJCoAPtehiJE0lOO2/ovZ1+9YOwZHh9WdK7tOz7y8q+v6Hq1dWN9s832X6z7bfE8FpxLLAwvRFYmN7KtEuLnr/LgfN3E3D+blMyf1cA5+9m4Pzdzlwo3VqWA24r+/72su9vqcoNd9g/32n7XbbfHUNuGAf0zR1A39yjhNtXAufvTuD83atk/sYD5+8u4Pzdx5wb7inLAfeWfX9f2fd3V+WG++2fH7D9QdsfiiE3XAX0zf1A3zyshNtXA+fvAeD8PaJk/q4Bzt+DwPl7lDk3PFyWAx4p+/7Rsu8fqsoNj9k/P277E7Y/GUNuuBbom8eAvnmK2TdPlfng8bLvnyj7/skq3zxt//yM7c/a/lyIb9Ca93ncHJTC5uD5MqxPl31/3RQ2AF+wf/ei7S/Z/nLTpCOVcf0urxeAvOhTZucrwSbTq1o2mbjse4VhB/81cDB3bpDRuAcw+upVhrl4nWkuXm/i+7RQLl68JfzTQrk48Lbw40+E+wWGty9Af5u3658+Vd3MK+Dc0tne0PjmpdzoHtrc5bUtsvkNhsTwjpJPn0K+Rn2zSWaCeYfpAyPebOL/9Cmkf94q80/UD/R4G/iBHlz+eSvwD30/oGGS4u6Jf7poZuKUx3MLJZNI2Zlz0rlkyk8nXN/NOH4yVTLWaW42aV1WKiQ933MTJTfjFjrV2ur9/vnauZDR96+UqblXg+/ftl/fsf3dpoaKhjp/3skd5Bu3t4G7C+81YYuHuM5ovse0wL/fxGjw+034cT8AkoEL9wdlwQUad4rbtFHnAfl69x2gfz5UGqwfMgXrR02MBn/EEKwfCw9Wwv1xzMHqRGsVq6ETrUGT6Sfgd1IcavMDhq0NqrxQc/ipgjkcJ3wOPwMn3+ZgHj8pq6bfKfv+06ZJ5zcvL3t+Rdn3nwU/87n9+oXtXwY5h8M/7wr3z1dM/nm7hn++KvNPVz/ztf36je3fMvnng2C9Qe8eTVCQNyYw4P6OGTfi9cmEJtmXGb4HzyEaK+VMoI2GYvw7Bi7+oCAG32XA/aOCGOTA/ROQkxxxQ2v2501Y/vzAMI8/K6l50bh/URA3HLh/FR43VMMDc5qhPPEzwzz+JnzdplobyHFDvPmNYR5/VxCHvzPUkMDLoMYbgtV01ecVa93LGzuF84p/2L/7k/7e9r+aev4RkFH99kcZr9xcyi8mM0U/4Tg5+94un7Hv93I5k8ykXfs6z77nTBVKBZMu+J4x6WI+nXeyeafkppOJQs7NZyvsHcBoMA1eTbSoxtOYKKJNNYB3Qxkxh2TjVOA5nAo3h3+/CWltiOeXK/0BTq7VDTknna1PEGB9g6/9gq/9ya9owpBjKcNrOVvVb8Ck3bTqLE0T15mN+5Z9329A7SzdaP+uyfYBtjcP4P1YiakGyN6JaRnAW9EhkhvQRkO+b+lczRp4sTvR2t9q+jSwmub4jLxW4Ryiz8JDvk2g8Wgu0W9Zy210ojVojmgbwLOgonnYDrMzkeKIZ/rYLODH+Bj6yKYLGOJ5arC/0XVG/yCHo3EPHICtX6prlfaymmTqsu8HTqFW6bB/N4jqNdunGcD7cWqtwmuVacH+6awvadzhwZy3NVSewW1gmu8O4TFGn306NVOdxDWnrQzrlIqLKETcoQ3xqGtEMRB85CCHuv73Mk35XAwJiDy0895wZ+QPKVOWnc+GBtmgvKErvbboW0pu5xWvIcDtqaFg53Io6iFMWQltK6mEefviV9R5gZ+MP2yA/DlE/qaC8nFR/kD+poLpgDsdNGcjaJxgPPI1jT9TX529s4EXtATllDYGNTE9MLb6NEz6dc/lDTU+09ya6QfIt3EGtI0cEqpjAHYRnYFB6s0AtHFGPcFj/peDZ0a0jVzZXfK+xkz1lcLMpIDsMwsn+7+bePBjxv+/n5zTrRWNnIOW6TMDV7RZgKU90h9aV0cNCWOW/9HV0UWujrPWV0czqwKyD5e+Ona+0kCvPiOEH3+gYAQ65+8qYwRDST0cuNrOVtePKpIG0k8NarVPX/k2zl53lGP2aJJv4xxMh7Xgy+acOENdrYSaU0GKnqse+Y45TkHkz113lGOOUOCoebSk6JE4Q1NaCTVSQYoepYVQo3GGprUSarQCQs1bX0ocYxTIsvm0RP78OEM9rYSaX0HkL6CFUA7O0KxWQjkKCGW0EMrFGZrTSihXAaESWgiVxBma10qopAJCpbQQKo0ztKCVUGkFhMpoIZSHM9TXSihPAaGyWgi1IM7QolZCLaiAUAvV93cc87yCVwULa4n8RWCGGrWn9BZREPljtBBqURyhjFZCLaqAUItpIdTiOEKpPW+yuAJCLaGFUEviCJXQSqglFRBqKS2EWhpHqKRWQi2tgFDLaCHUsjhCqT2/s6wCQi2nhVDL4wil9vzO8goItYIWQq2II1RGK6FWVEColbQQamUcodSeM1pZAaFW0UKoVXGEUnvOaFUFhFpNC6FWxxFK7Tmj1RUQag0thFoTRyi154zWVECotbQQam0codSeM1pbAaHW0UKodXGEUnvOaF0FhFpPC6HWxxFK7Tmj9RUQagMthNoQR6iSVkJtqIBQG2kh1MYwQ12156E2VkCoTbQQalMcodSeh9pUAaE200KoHI5Qas9D5RQQKq+FUAUcodSehyooIJSvhVBFHKHUnocqKiBUSQuhNscRSu15qM0VEGoLLYTaEkcoteehtlRAqK20EGprHKHUnofaWgGhttFCqG1xhFJ7HmpbBYTaTguhtscRSu15qO0VEGoHLYTaEUcoteehdlRAqJ20EGpnHKHUnofaWQGhdql/CIVjGhR8yOiudUc5ZpACR+2mJUXvjkvRas/v7K4gRe9Rj3zHjFIQ+XvGFflOtGaa+uGyiB2qoT3EVmp7DQgeDLa9X9kP0Kd6Twy+H9kw6fuZyp7PHHzf+d/tbQfbx/Z9bd9vwD/PqQ+p+ke5Jm1voHfL7d1/AKPB/w7egPN4mEPplzKFOZQY0Pn94CqHHmD/7kDbD7L94AGTnnc29C+SBTrQHDAAN5+HgIlV7ZtDynxwYNn3B5V9f/CASt8cav98mO2H235E4Juu/H5o2XijyjgwusrvR9qfO8r2o20/piyQp7a9f8PkTXIgh5gL9WVf5rkY2SB/Wd1LQY02qoGHU2g7jwTPZR+wfav3++eXp6PGo7HoV6Wi57H8dys7EVsDp8M7JxQtHn8ZyjMB/RgdFRXzsUBiAn97vAH6wnQuOvSV8A4PfDKsYfLFiIOvOhZnl29sM0kd0NfhwffH2Xk53vYTbD/R9pNsP9n2U2w/1fbTbD/d9jNsP9P2s2w/2/ZzbD/X9vNsP9/2C2y/0PaLbL/Y9ktsv9T2y2wfa/vltl9h+zjbr7R9vO1Xdcq4TmKQMdXPjg95dkLIsxNDnp0U8uzkkGenhDw7NeTZaSHPTg95dkbIszNDnp0V8uzskGfnhDw7N+TZeSHPzg95dkHIswtDnl0U8uzikGeXhDy7NOTZZSHPxoY8uzzk2RUhz8aFPLsy5Nn4kGdXBc/K24jg62LBVydaq0g6UReJ4wBjFUvUHHM8aCzCeAJkrH/m68ToY7nBfJmToo6V/HfuzcnRxnLK/GhOiTKWW8EJc2rvx3Kq+GVO6+VY6dJkXDWn924sL4T35ozejOWFxpA5s+djZWrEozmrp2Nlasa2ObtnY7lTyBPmnJ6MlZlizjHndn+sQhf5y5zX3bEyXeZCc373xnK6kVfNBd0Zy+lWjjYXdj1Wqpv53lzU1VjJbq8d5uIpjpUs9WAdMpdMaaxMj9Y0c2ntsbwero/mshpjZUs9XmvN2PCxnF6s2+bysLGcXtUA5orJxzK9rCfMuOqx/F7XJubKyrESEeocM75sLLcUqWYyVw3Aib44XwldBav1fFNu79UDGA2mwau37aIafzXOgeYaYDHONYdkI2pHrXMOrwEHgd0U+tfPcQWBE6n5rLsq5XNxbRBg11WrzWsDx5Y/uy5EgaLfTeIyiWOuBQbQdWDnoslHQXMtMBg7cV+rdEUaD+NR1i+39/oBjAZfD1+Rsv71wBXpBuErEs3hDfAVKevfoHRFGg+zO1sIMZdlRboxCLCbqlekG0NWpJtiWJHGA1ekG4EBdBOTc1EJqNNOJOabgcmsoQG/Wl4TJCD0aQCkFLgFmMzC5tCJ1gz5+BaGSuYWpZXMlbD8k0+U23vrAEaDb4VXMvnErcDgv014JUNzeBu8ksknbmMOfkQCvUV4Ar0dPIedDb3wIjl+BzD24qyAr4TZnXdDzGWpgO8MEvNd1RXwnSEV8F0xVMC4FcgxdwJJeReTc9GBiMR8N3MF7ERrhpLjHQzV2z3Cq1byyz0KcHNx/B4gx+8VzvFaRQqi+EGNdR94wY5L7YyDrTVeqdze+wcwGnw/XO14pfuBDnxAuNqhOXwArna80gPC1Q4luvsGyE7GD4KTcWdDY0Zy/CGlamcczG6vGGIui9p5OEjMj1SrnYdD1M4jMagd3ArkmIeBpHyEybnoQERiflR4JUjJ8SGGqv8x4WqH/PKYAtxcHH8MyPHHhXO8VpHiRGsGWaQ8ofTdzhWwtcat+CiNJwcwGvwkXO24zpPAIHhKuNqhOXwKrnZc5ynhaocS3RMDZCfjp5WoHSTHn1Gqdq6A2W1KIeayqJ1ng8T8XLXaeTZE7TwXg9rBrUCOeRZIyueYnIsORCTm54VXgpQcn2Go+l8QrnbILy8owM3F8ReAHH9ROMdrFSlOtGaQRcpLStXO5bC1xq9QOy8PYDT4Zbja8Z2XgUHwinC1Q3P4Clzt+M4rwtUOJbqXBshOxq8qUTtIjr+mVO1cDrO7EJvaeT1IzG9Uq53XQ9TOGzGoHdwK5JjXgaR8g8m56EBEYn5TeCVIyfE1hqr/LeFqh/zylgLcXBx/C8jxt4VzvFaR4kRrBlmkvKNU7YyFrTXpis/EeHcAo8HvwtVO2rwLDIL3hKsdmsP34GonXYHbidjCcCMS3TsDZCfj95WoHSTHP1CqdsbC7E7H9lkqHwaJ+aNqtfNhiNr5KAa1g1uBHPMhkJQfMTkXHYhIzB8LrwQpOX7AUPV/IlztkF8+UYCbi+OfADn+qXCO1ypSnGjNIIuUz5Sqnctw73a8cns/H8Bo8Of4dzve58Ag+EK42qE5/AL/bsf7QrjaoUT32QDZyfhLJWoHyfGvlKqdy2B2+5kQc1nUztdBYv6mWu18HaJ2volB7eBWIMd8DSTlN0zORQciEvO3witBSo5fMVT9E4SrHfLLBAW4uTg+Acjx74RzvFaR4kRrBlmkfK9U7VwKW2uS2XJ7fxjAaPAPcLWTzP4ADIIfhasdmsMf4Wonmf1RuNqhRPf9ANnJ+CclagfJ8Z+Vqp1LYXYnvRBzWdTOL0Fi/rVa7fwSonZ+jUHt4FYgx/wCJOWvTM5FByIS82/CK0FKjj8zVP2/C1c75JffFeDm4vjvQI7/IZzjtYoUJ1ozyCLlT6Vq5xLYWpOvOMk2cQCjwRPhaidvJgKD4C/haofm8C+42slX4HYitjDciET35wDZybihWYfaQXJ8KiDmONXOJTC+52M7ydan+Z+vfZsbKpUN/UW12qEf4lY7uBXIMX2acaTs28zjXHQgIjH3AycfdMBRcpyqGb8w9G/mXbicaM2QX/orwM3F8f5AjjcK53itIsWJ1gyySGkC8iZOtXMxTu0Uyu0d0MxoMA0OVjuFAcAgaAYGJ9ccNjfD1U6hmXnRQCS6pmbZybhFidpBcrxVqdq5GKd28iHmsqidtiAxt1ernbYQtdMeg9q5GKh22oCkbG/mcS46EJGYpxZeCVJybGWo+gcKVzvkl4EKcHNxfCCQ4x3COV6rSHGiNYMsUgYpVTsX4U6y5cvtHdzMaPBguNpJ5gcDg2Aa4WqH5nAauNpJ5qcRrnYo0Q1qlp2Mp1WidpAcH6JU7VyEO+yUCzGXRe0MDRLzsGq1MzRE7QyLQe1cBFQ7Q4GkHNbM41x0ICIxTye8EqTkOISh6p9euNohv0yvADcXx6cHcnwG4RyvVaQ40ZpBFikzKlU7F8LWGq/iE6hnamY0eCa42vGcmYBBMLNwtUNzODNc7XjOzMLVDiW6GZtlJ+NZlKgdJMdnVap2LoSpnUxsn0A9PEjMI6rVzvAQtTMiBrVzIVDtDAeSckQzj3PRgYjEPJvwSpCS46wMVf/swtUO+WV2Bbi5OD47kONzCOd4rSLFidYMskiZU6nauYBJ7czVzGjwXAxqZy5gEMwtXO3QHM7NoHbmFq52KNHN2Sw7Gc+jRO0gOT5Sqdq5QKHaGRUk5tHVamdUiNoZHYPauQCodkYBSTlaidpBYp5XeCVIyXEkQ9U/n3C1Q36ZTwFuLo7PB+T4/MI5XqtIcaI1gyxSFlCqds6HrTW5is9kc5oZDXbgaieXdYBBYISrHZpDA1c7uawRrnYo0S3QLDsZu0rUDpLjCaVq53yY2snF9plsySAxp6rVTjJE7aRiUDvnA9VOEkjKVDOPc9GBiMScFl4JUnJMMFT9GeFqh/ySUYCbi+MZIMc94RyvVaQ40ZpBFilZpWrnPJzaSZbbu2Azo8EL4tVOckFgECwkXO3QHC6EVzvJhYSrHUp02WbZyXhhJWoHyfFFlKqd83BqJxFiLovaGRMk5kWr1c6YELWzaAxq5zyg2hkDJOWizTzORQciEvNiwitBSo6LMFT9iwtXO+SXxRXg5uL44kCOLyGc47WKFCdaM8giZUmlaudc2FrjV7zbWaqZ0eCl4GrHzy4FDIKlhasdmsOl4WrHzy4tXO1QoluyWXYyXkaJ2kFyfFmlaudc3C+gjO3dznJBYl6+Wu0sF6J2lo9B7ZwLVDvLAUm5fDOPc9GBiMS8gvBKkJLjsgxV/4rC1Q75ZUUFuLk4viKQ4ysJ53itIsWJ1gyySFlZqdo5B7bWFIrl9q7SzGjwKnC1UyiuAgyCVYWrHZrDVeFqp1BcVbjaoUS3crPsZLyaErWD5PjqStXOOTC1U/BDzGVRO2sEiXnNarWzRojaWTMGtXMOUO2sASTlms08zkUHIhLzWsIrQUqOqzNU/WsLVzvkl7UV4Obi+NpAjq8jnOO1ihQnWjPIImVdpWrnbNhaYyre7azXzGjwenC1Y7LrAYNgfeFqh+ZwfbjaMdn1hasdSnTrNstOxhsoUTtIjm+oVO2cDVM7JrZ3OxsFiXnjarWzUYja2TgGtXM2UO1sBCTlxs08zkUHIhLzJsIrQUqOGzJU/ZsKVzvkl00V4Obi+KZAjm8mnOO1ihQnWjPIIiWnVO2chfvtohVqJ9/MaHAernby2TwwCArC1Q7NYQGudvLZgnC1Q4ku1yw7GftK1A6S40Wlaucs3G8XjU3tlILEvHm12imFqJ3NY1A7ZwHVTglIys2beZyLDkQk5i2EV4KUHIsMVf+WwtUO+WVLBbi5OL4lkONbCed4rSLFidYMskjZWqnaORP3CdReub3bNDMavA1c7XjeNsAg2Fa42qE53BaudjxvW+FqhxLd1s2yk/F2StQOkuPbK1U7Z8LUjpcJMZdF7ewQJOYdq9XODiFqZ8cY1M6ZQLWzA5CUOzbzOBcdiEjMOwmvBCk5bs9Q9e8sXO2QX3ZWgJuL4zsDOb6LcI7XKlKcaM0gi5RdlaqdM2BrTbJC7ezWzGjwbnC1k/R2AwbB7sLVDs3h7nC1k/R2F652KNHt2iw7Ge+hRO0gOb6nUrVzBkztJGNTO3sFiXnvarWzV4ja2TsGtXMGUO3sBSTl3s08zkUHIhLzPsIrQUqOezJU/fsKVzvkl30V4Obi+L5Aju8nnOO1ihQnWjPIImV/pWrndNhakzXl9h7QzGjwAXC1kzUHAIPgQOFqh+bwQLjayVbgdiK2MNyIRLd/s+xkfJAStYPk+MFK1c7pMLWTdULMZVE7hwSJ+dBqtXNIiNo5NAa1czpQ7RwCJOWhzTzORQciEvNhwitBSo4HM1T9hwtXO+SXwxXg5uL44UCOHyGc47WKFCdaM8gi5Uilauc02FqTccrtPaqZ0eCj4Gon4xwFDIKjhasdmsOj4Won4xwtXO1QojuyWXYyPkaJ2kFy/Filauc0mNpJl0LMZVE7xwWJ+fhqtXNciNo5Pga1cxpQ7RwHJOXxzTzORQciEvMJwitBSo7HMlT9JwpXO+SXExXg5uL4iUCOnySc47WKFCdaM8gi5WSlaudU3KcUVHwC9SnNjAafAlc7+eIpwCA4VbjaoTk8Fa528sVThasdSnQnN8tOxqcpUTtIjp+uVO2civuUgtg+gfqMIDGfWa12zghRO2fGoHZOBaqdM4CkPLOZx7noQERiPkt4JUjJ8XSGqv9s4WqH/HK2AtxcHD8byPFzhHO8VpHiRGsGWaScq1TtnAJba9yKdzvnNTMafB5c7bjOecAgOF+42qE5PB+udlznfOFqhxLduc2yk/EFStQOkuMXKlU7p+A+gTq2dzsXBYn54mq1c1GI2rk4BrVzClDtXAQk5cXNPM5FByIS8yXCK0FKjhcyVP2XClc75JdLFeDm4vilQI5fJpzjtYoUJ1ozyCJlrFK1czJurSmU23t5M6PBl8PVjlO4HBgEVwhXOzSHV8DVjlO4QrjaoUQ3tll2Mh6nRO0gOX6lUrVzMkztOPkQc1nUzvggMV9VrXbGh6idq2JQO8AVyIwHkvKqZh7nogMRiflq4ZUgJccrGar+a4SrHfLLNQpwc3H8GiDHrxXO8VpFihOtGWSRcp1StXMSbK1JV5xku76Z0eDr4WonXbweGAQ3CFc7NIc3wNVOuniDcLVDie66ZtnJ+EYlagfJ8ZuUqp2TcPd2YjvJdnOQmG+pVjs3h6idW2JQOycB1c7NQFLe0szjXHQgIjHfKrwSpOR4E0PVf5twtUN+uU0Bbi6O3wbk+O3COV6rSHGiNYMsUu5QqnZOhK01puIz2e5sZjT4TrjaMeZOYBDcJVzt0BzeBVc7pgK3E7GF4UYkujuaZSfju5WoHSTH71Gqdk7EnWSL7TPZ7g0S833VaufeELVzXwxq50Sg2rkXSMr7mnmciw5EJOb7hVeClBzvYaj6HxCudsgvDyjAzcXxB4Acf1A4x2sVKU60ZpBFykNK1c4JuMMYFfd2Hm5mNPjhZvy4jwhXKIT7keZJEwwal0VVUEJ5qFl20ntUiapA8vIx5kSP8MljDByPM6Eez5RQH29mNPhxhoT6hPCESrifqCdU2FhPKkmoSF4+JTyhkk+eUp5QjxuAm49ye59uZjT4aYZgfRpItmeEJ2eaw2cY5P0zwvfjNST6Z5UkeiTHnxO+RUI+eY4hXp4Xvg1IeeJ5piKOi5fPA3n5gnBe1spnTrRmkPnsReEcJx+/yCDQkDykgnBYw6RXYeUNbffIBp44b4Da6bK+v5yqbG6HB9+/ZP35su2v2P6q7a/Z/rrtb9j+pu1v2f627e/Y/q7t79n+vu0f2P6h7R/Z/rHtn9j+qe2f2f657V/Y/qXtX9n+te3f2P6t7RNs/872723/ofrd6UvBe9LyZy+HPHsl5NmrIc9eC3n2esizN0KevRny7K2QZ2+HPHsn5Nm7Ic/eC3n2fsizD0KefRjy7KOQZx+HPPsk5NmnIc8+C3n2ecizL0KefRny7KuQZ1+HPPsm5Nm3Ic8mhDz7LuTZ9yHPfmie/J38iODrYsFXJ1qrSDpRk+VLgMTb+X7/ZdBYhPEVyFj/zNer0cdyg/kyr0UdK/nv3JvXo43llPnRvBFlLLeCE+bN3o/lVPHLvNXLsdKlybhq3u7dWF4I7807vRnLC40h827Px8rUiEfzXk/HytSMbfN+z8Zyp5AnzAc9GSszxZxjPuz+WIUu8pf5qLtjZbrMhebj7o3ldCOvmk+6M5bTrRxtPu16rFQ38735rKuxkt1eO8znUxwrWerBOmS+mNJYmR6taebL2mN5PVwfzVc1xsqWerzWmq/Dx3J6sW6bb8LGcnpVA5hvJx/L9LKeMBOqx/J7XZuY7yrHSkSoc8z3ZWO5pUg1k/kBKNLjfHvxA6zW8ytuE/zYzGjwj83o2wS++RHnQPMTYFI5317QHP4E3I3tnMOfwEEQ16lwXPD6sZ0K/zkIsF+qdzZ+bp78VPgvzfynwnGZxDE/AwPoF7Bz0eSjoPkZGIyduH9WuiJ9D+NR1i+399dmRoN/ha9IWf9X4Ir0m/AViebwN/iKlPV/U7oifQ+zO1sIMZdlRfo9CLA/qlek30NWpD9iWJG+B65IvwMD6A8m56JfBCMx/wlMZg0N+NXypyABoV8EI6XARGAyC5tDJ1oz5OOJDJXMRKWVzHew/JNPlNv7VzOjwX/BK5l84i9k8LfIrmRoDslGbCWTT5TjdiK2MNyIBDpReAKdCjyHnQ298CI53geHOdab+t/BckbeDTGXpQLu2/LP134tDZXVbt+WyStg+iHuCvg7YAXcF0jKfi08zkUHIhJzf2AgNjTgA46SY58W/MLQyLxwOdGaIb80KsDNxfFGIMebhHO8VpGCKH5QYw0AL9hxqZ0JsLXGK5Xb29zCaDANjlU7XqkZ6MAW4WqH5rAFrna8UotwtUOJbkCL7GTcCk7GnQ2NGcnxNqVqZwJM7XjFEHNZ1E57kJinrlY77SFqZ+oY1M4EoNppB5Jy6hYe56IDEYl5oPBKkJJjG0PV3yFc7ZBfOhTg5uJ4B5Djg4RzvFaR4kRrBlmkDAbyJk618y1srXErPvVhmhZGg6eBqx3XmQYYBNMKVzs0h9PC1Y7rTCtc7VCiG9wiOxkPUaJ2kBwfqlTtfAtTO5W/cr4BaWeV2hkWJObpqtXOsBC1M10MaudboNoZBiTldC08zkUHIhLz9MIrQUqOQxmq/hmEqx3yywwKcHNxfAYgx2cUzvFaRYoTrRlkkTKTUrXzDe6WWIXambmF0eCZ4WrHd2YGBsEswtUOzeEscLXjO7MIVzuU6GZqkZ2MZ1WidpAcH65U7XwDUzuF2NTOiCAxz1atdkaEqJ3ZYlA73wDVzgggKWdr4XEuOhCRmGcXXglSchzOUPXPIVztkF/mUICbi+NzADk+p3CO1ypSnGjNIIuUuZSqna9ha0264jMx5m5hNHhuuNpJm7mBQTCPcLVDczgPXO2kK3A7EVsYbkSim6tFdjIeqUTtIDk+Sqna+RqmdtKxfZbK6CAxz1utdkaHqJ15Y1A7XwPVzmggKedt4XEuOhCRmOcTXglSchzFUPXPL1ztkF/mV4Cbi+PzAzm+gHCO1ypSnGjNIIsUR6na+Qr3bscrt9e0MBps8O92PAMMAle42qE5dPHvdjxXuNqhROe0yE7GCSVqB8nxpFK18xXuwwUzIeayqJ1UkJjT1WonFaJ20jGona+AaicFJGW6hce56EBEYs4IrwQpOSYZqn5PuNohv3gKcHNx3ANyPCuc47WKFCdaM8giZUGlaudL2FqTzJbbu1ALo8ELwdVOMrsQMAgWFq52aA4XhqudZHZh4WqHEt2CLbKT8SJK1A6S42OUqp0vYWon6YWYy6J2Fg0S82LVamfRELWzWAxq50ug2lkUSMrFWniciw5EJObFhVeClBzHMFT9SwhXO+SXJRTg5uL4EkCOLymc47WKFCdaM8giZSmlaucL3CdQV5xkW7qF0eCl4Wonb5YGBsEywtUOzeEycLWTr8DtRGxhuBGJbqkW2cl4WSVqB8nx5ZSqnS9wn0Ad20m25YPEvEK12lk+RO2sEIPa+QKodpYHknKFFh7nogMRiXlF4ZUgJcflGKr+lYSrHfLLSgpwc3F8JSDHVxbO8VpFihOtGWSRsopStfM5Tu0Uyu1dtYXR4FXxaqewKjAIVhOudmgOV8OrncJqwtUOJbpVWmQn49WVqB0kx9dQqnY+x6mdfIi5LGpnzSAxr1WtdtYMUTtrxaB2PgeqnTWBpFyrhce56EBEYl5beCVIyXENhqp/HeFqh/yyjgLcXBxfB8jxdYVzvFaR4kRrBlmkrKdU7XyGO8mWL7d3/RZGg9fHn2TLrw8Mgg2Eqx2aww3wJ9nyGwhXO5To1muRnYw3VKJ2kBzfSKna+Qx3ki0XYi6L2tk4SMybVKudjUPUziYxqJ3PgGpnYyApN2nhcS46EJGYNxVeCVJy3Iih6t9MuNohv2ymADcXxzcDcjwnnOO1ihQnWjPIIiWvVO18ivvtohWfQF1oYTS4AFc7nlMABoEvXO3QHPpwteM5vnC1Q4ku3yI7GReVqB0kx0tK1c6nMLWTie0TqDcPEvMW1Wpn8xC1s0UMaudToNrZHEjKLVp4nIsORCTmLYVXgpQcSwxV/1bC1Q75ZSsFuLk4vhWQ41sL53itIsWJ1gyySNlGqdr5hEntbNvCaPC2DGpnW2AQbCdc7dAcbsegdrYTrnYo0W3TIjsZb69E7SA5voNStfOJQrWzY5CYd6pWOzuGqJ2dYlA7nwDVzo5AUu6kRO0gMe8svBKk5LgDQ9W/i3C1Q37ZRQFuLo7vAuT4rsI5XqtIcaI1gyxSdlOqdj6GrTW5is9k272F0eDd4Wonl90dGAR7CFc7NId7wNVOLruHcLVDiW63FtnJeE8lagfJ8b2Uqp2PYWonF9tnsu0dJOZ9qtXO3iFqZ58Y1M7HQLWzN5CU+7TwOBcdiEjM+wqvBCk57sVQ9e8nXO2QX/ZTgJuL4/sBOb6/cI7XKlKcaM0gi5QDlKqdj3BqJ1lu74EtjAYfiFc7yQOBQXCQcLVDc3gQXu0kDxKudijRHdAiOxkfrETtIDl+iFK18xFO7SRCzGVRO4cGifmwarVzaIjaOSwGtfMRUO0cCiTlYS08zkUHIhLz4cIrQUqOhzBU/UcIVzvklyMU4O5saI4fAeT4kcI5XqtIcaI1gyxSjlKqdj7E/XbRinc7R7cwGnw0XO342aOBQXCMcLVDc3gMXO342WOEqx1KdEe1yE7GxypRO0iOH6dU7XyI++2isb3bOT5IzCdUq53jQ9TOCTGonQ+Baud4IClPaOFxLjoQkZhPFF4JUnI8jqHqP0m42iG/nKQANxfHTwJy/GThHK9VpDjRmkEWKacoVTsfwNaaQrHc3lNbGA0+Fa52CsVTgUFwmnC1Q3N4GlztFIqnCVc7lOhOaZGdjE9XonaQHD9Dqdr5AKZ2Cn6IuSxq58wgMZ9VrXbODFE7Z8Wgdj4Aqp0zgaQ8q4XHuehARGI+W3glSMnxDIaq/xzhaof8co4C3FwcPwfI8XOFc7xWkeJEawZZpJynVO28D1trTMW7nfNbGA0+H652TPZ8YBBcIFzt0BxeAFc7JnuBcLVDie68FtnJ+EIlagfJ8YuUqp33YWrHxPZu5+IgMV9SrXYuDlE7l8Sgdt4Hqp2LgaS8pIXHuehARGK+VHglSMnxIoaq/zLhaof8cpkC3FwcvwzI8bHCOV6rSHGiNYMsUi5Xqnbew/120Qq1c0ULo8FXwNVOPnsFMAjGCVc7NIfj4Gonnx0nXO1Qoru8RXYyvlKJ2kFyfLxStfMe7reLxqZ2rgoS89XVaueqELVzdQxq5z2g2rkKSMqrW3iciw5EJOZrhFeClBzHM1T91wpXO+SXaxXg5uL4tUCOXyec47WKFCdaM8gi5Xqlaudd3CdQe+X23tDCaPANcLXjeTcAg+BG4WqH5vBGuNrxvBuFqx1KdNe3yE7GNylRO0iO36xU7bwLUzteJsRcFrVzS5CYb61WO7eEqJ1bY1A77wLVzi1AUt7awuNcdCAiMd8mvBKk5HgzQ9V/u3C1Q365XQFuLo7fDuT4HcI5XqtIcaI1gyxS7lSqdt6BrTXJCrVzVwujwXfB1U7SuwsYBHcLVzs0h3fD1U7Su1u42qFEd2eL7GR8jxK1g+T4vUrVzjswtZOMTe3cFyTm+6vVzn0hauf+GNTOO0C1cx+QlPe38DgXHYhIzA8IrwQpOd7LUPU/KFztkF8eVICbi+MPAjn+kHCO1ypSnGjNIIuUh5Wqnbdha03WlNv7SAujwY/A1U7WPAIMgkeFqx2aw0fhaidbgduJ2MJwIxLdwy2yk/FjStQOkuOPK1U7b8PUTtYJMZdF7TwRJOYnq9XOEyFq58kY1M7bQLXzBJCUT7bwOBcdiEjMTwmvBCk5Ps5Q9T8tXO2QX55WgJuL408DOf6McI7XKlKcaM0gi5Rnlaqdt2BrTcYpt/e5FkaDn4OrnYzzHDAInheudmgOn4ernYzzvHC1Q4nu2RbZyfgFJWoHyfEXlaqdt2BqJ10KMZdF7bwUJOaXq9XOSyFq5+UY1M5bQLXzEpCUL7fwOBcdiEjMrwivBCk5vshQ9b8qXO2QX15VgJuL468COf6acI7XKlKcaM0gi5TXlaqdN3GfUlDxCdRvtDAa/AZc7eSLbwCD4E3haofm8E242skX3xSudijRvd4iOxm/pUTtIDn+tlK18ybuUwpi+wTqd4LE/G612nknRO28G4PaeROodt4BkvLdFh7nogMRifk94ZUgJce3Gar+94WrHfLL+wpwc3H8fSDHPxDO8VpFihOtGWSR8qFStfMGbK1xK97tfNTCaPBHcLXjOh8Bg+Bj4WqH5vBjuNpxnY+Fqx1KdB+2yE7GnyhRO0iOf6pU7byB+wTq2N7tfBYk5s+r1c5nIWrn8xjUzhtAtfMZkJSft/A4Fx2ISMxfCK8EKTl+ylD1fylc7ZBfvlSAm4vjXwI5/pVwjtcqUpxozSCLlK+Vqp3XcWtNodzeb1oYDf4GrnacwjfAIPhWuNqhOfwWrnacwrfC1Q4luq9bZCfjCUrUDpLj3ylVO6/D1I6TDzGXRe18HyTmH6rVzvchaueHGNQOcAUy3wNJ+UMLj3PRgYjE/KPwSpCS43cMVf9PwtUO+eUnBbi5OP4TkOM/C+d4rSLFidYMskj5RanaeQ221qQrTrL92sJo8K9wtZMu/goMgt+Eqx2aw9/gaidd/E242qFE90uL7GT8uxK1g+T4H0rVzmu4ezuxnWT7M0jME6vVzp8hamdiDGrnNaDa+RNIyoktPM5FByIS81/CK0FKjn8wVP0NrbLVDvmFbJSOm4vj5XZGHWuqVtkcr1WkONGaQRYpfYC8iVPtvApba0zFZ7L1bWU0mAbHqh1j+gKDoB8wOLnmsF8rWu2YCtxOxBaGG5Ho+rTKTsb9wcm4s6ExIzneiIy9hvjUzqu4k2yxfSZbU5CYB7Q2VCqbptbJ1Q79ELfaeRWodpqApBzQyuNcdCAiMTcLrwQpOTYyVP0twtUO+aVFAW4ujrcAOd4qnOO1ihQnWjPIIqVNqdp5BXcYo+LeTnsro8HtrfhxpxauUAj31K2TJhg0LouqoITS1io76Q1UoiqQvOxgTvQIn3QwcDzOhPoyU0Id1Mpo8CCGhDpYeEIl3IPrCRU21jRKEiqSl9MKT6jkk2mVJ9SXmnHzUW7vkFZGg4cwBOsQINmGCk/ONIdDGeT9UOH78RoS/TAliR7J8emEb5GQT6ZjiJfphW8DUp6YnqmI4+Ll9EBeziCcl7XymROtGWQ+m1E4x8nHMzIINCQPqSAc1jDpVVh5Q9u91wCeOG+A2umyvr+cqmxuhwffz2T9ObPts9g+q+3DbR9h+2y2z277HLbPaftcts9t+zy2j7R9lO2jbZ/X9vlsn9/2BWx3bDe2u7YnbE/anrI9bXvGds/2rO0L2r5Q9bvTmYL3pOXPZg55NkvIs1lDng0PeTYi5NlsIc9mD3k2R8izOUOezRXybO6QZ/OEPBsZ8mxUyLPRIc/mDXk2X8iz+UOeLRDyzAl5ZkKeuSHPEiHPkiHPUiHP0iHPMiHPvJBn2ZBnC4Y8W6h18nfyI4KviwVfnWitIulETZYzARJv5/v9mUFjEcZZIGP9M1+zRh/LDebLDI86VvLfuTcjoo3llPnRzBZlLLeCE2b23o/lVPHLzNHLsdKlybhq5uzdWF4I781cvRnLC40hM3fPx8rUiEczT0/HytSMbTOyZ2O5U8gTZlRPxspMMeeY0d0fq9BF/jLzdnesTJe50MzXvbGcbuRVM393xnK6laPNAl2PlepmvjdOV2Mlu712GDPFsZKlHqxDxp3SWJkerWkmUXssr4fro0nWGCtb6vFaa1LhYzm9WLdNOmwsp1c1gMlMPpbpZT1hvOqx/F7XJiZbOVYiQp1jFiwbyy1FqpnMQkCRHufbi4VgtZ5fcZtg4VZGgxduRd8m8M3COAeaRQCTyvn2guZwEeBubOccLgIOgrhOheOC14/tVPiYIMAWrd7ZGNM6+anwRVv5T4XjMoljxgADaFGwc9Hko6AZAwzGTtxjlK5IC8J4lPXL7V2sldNg+IqU9RcDrkiLC1+RaA4Xh69IWX9xpSvSgjC7s4UQc1lWpCWCAFuyekVaImRFWjKGFWlB4Iq0BDCAlmRyLvpFMBLzUsBk1tCAXy0XCRIQ+kUwUgosDUxmYXPoRGuGfLw0QyWztNJKJgvLP/lEub3LtDIavAy8ksknlgEG/7LCKxmaw2XhlUw+sSxz8CMS6NLCE+hy4DnsbOiFF8nx5YGxF2cFnIXZnXdDzGWpgFcIEvOK1RXwCiEV8IoxVMC4FcgxKwBJuSKTc9GBiMS8EnMF7ERrhpLj8gzV28rCq1byy8oKcHNxfGUgx1cRzvFaRQqi+EGNtSp4wY5L7XiwtcYrldu7WiujwavB1Y5XWg3owNWFqx2aw9XhascrrS5c7VCiW7VVdjJeA5yMOxsaM5LjaypVOx7Mbq8YYi6L2lkrSMxrV6udtULUztoxqB3cCuSYtYCkXJvJuehARGJeR3glSMlxTYaqf13haof8sq4C3FwcXxfI8fWEc7xWkeJEawZZpKyv9N1OBrbWuBWf+rBBK6PBG8DVjutsAAyCDYWrHZrDDeFqx3U2FK52KNGt3yo7GW+kRO0gOb6xUrWTgdld+SvnG5B2VqmdTYLEvGm12tkkRO1sGoPawa1AjtkESMpNmZyLDkQk5s2EV4KUHDdmqPpzwtUO+SWnAHdn68NoZ9Sx8sI5XqtIcaI1gyxSCkrVThq21vgVasdvZTTYh6sd3/GBQVAUrnZoDotwteM7ReFqhxJdoVV2Mi4pUTtIjm+uVO2kYXYXYlM7WwSJectqtbNFiNrZMga1g1uBHLMFkJRbMjkXHYhIzFsJrwQpOW7OUPVvLVztkF+2VoCbi+NbAzm+jXCO1ypSnGjNIIuUbZWqnRRsrUlXfCbGdq2MBm8HVztpsx0wCLYXrnZoDreHq510BW4nYgvDjUh027bKTsY7KFE7SI7vqFTtpGB2p2P7LJWdgsS8c7Xa2SlE7ewcg9rBrUCO2QlIyp2ZnIsORCTmXYRXgpQcd2So+ncVrnbIL7sqwM3F8V2BHN9NOMdrFSlOtGaQRcruStVOEvduxyu3d49WRoP3wL/b8fYABsGewtUOzeGe+Hc73p7C1Q4lut1bZSfjvZSoHSTH91aqdpIwu/1MiLksamefIDHvW6129glRO/vGoHZwK5Bj9gGScl8m56IDEYl5P+GVICXHvRmq/v2Fqx3yy/4KcHNxfH8gxw8QzvFaRYoTrRlkkXKgUrWTgK01yWy5vQe1Mhp8EFztJLMHAYPgYOFqh+bwYLjaSWYPFq52KNEd2Co7GR+iRO0gOX6oUrWTgNmd9ELMZVE7hwWJ+fBqtXNYiNo5PAa1g1uBHHMYkJSHMzkXHYhIzEcIrwQpOR7KUPUfKVztkF+OVICbi+NHAjl+lHCO1ypSnGjNIIuUo5WqHRe21uQrTrId08po8DFwtZM3xwCD4Fjhaofm8Fi42slX4HYitjDciER3dKvsZHycErWD5PjxStWOC7M7H9tJthOCxHxitdo5IUTtnBiD2sGtQI45AUjKE5mciw5EJOaThFeClByPZ6j6TxaudsgvJyvAzcXxk4EcP0U4x2sVKU60ZpBFyqlK1Y7BqZ1Cub2ntTIafBpe7RROAwbB6cLVDs3h6Xi1UzhduNqhRHdqq+xkfIYStYPk+JlK1Y7BFcT5EHNZ1M5ZQWI+u1rtnBWids6OQe3gViDHnAUk5dlMzkUHIhLzOcIrQUqOZzJU/ecKVzvkl3MV4Obi+LlAjp8nnOO1ihQnWjPIIuV8pWrHwZ1ky5fbe0Ero8EX4E+y5S8ABsGFwtUOzeGF+JNs+QuFqx1KdOe3yk7GFylRO0iOX6xU7Ti4w065EHNZ1M4lQWK+tFrtXBKidi6NQe3gViDHXAIk5aVMzkUHIhLzZcIrQUqOFzNU/WOFqx3yy1gFuLk4PhbI8cuFc7xWkeJEawZZpFyhVO0sAFtrvIpPoB7XymjwOLja8ZxxwCC4UrjaoTm8Eq52POdK4WqHEt0VrbKT8XglagfJ8auUqp0FYHZnYvsE6quDxHxNtdq5OkTtXBOD2sGtQI65GkjKa5iciw5EJOZrhVeClByvYqj6rxOudsgv1ynAzcXx64Acv144x2sVKU60ZpBFyg1K1c78TGrnxlZGg29kUDs3AoPgJuFqh+bwJga1c5NwtUOJ7oZW2cn4ZiVqB8nxW5SqnfkVqp1bg8R8W7XauTVE7dwWg9rBrUCOuRVIytuUqB0k5tuFV4KUHG9hqPrvEK52yC93KMDNxfE7gBy/UzjHaxUpTrRmkEXKXUrVznywtSZX8Zlsd7cyGnw3XO3ksncDg+Ae4WqH5vAeuNrJZe8RrnYo0d3VKjsZ36tE7SA5fp9StTMfzO5cbJ/Jdn+QmB+oVjv3h6idB2JQO7gVyDH3A0n5AJNz0YGIxPyg8EqQkuN9DFX/Q8LVDvnlIQW4uTj+EJDjDwvneK0ixYnWDLJIeUSp2pkXp3aS5fY+2spo8KN4tZN8FBgEjwlXOzSHj+HVTvIx4WqHEt0jrbKT8eNK1A6S408oVTvz4griRIi5LGrnySAxP1Wtdp4MUTtPxaB2cCuQY54EkvIpJueiAxGJ+WnhlSAlxycYqv5nhKsd8sszCnBzcfwZIMefFc7xWkWKE60ZZJHynFK1Mxq21vgV73aeb2U0+Hm42vGzzwOD4AXhaofm8AW42vGzLwhXO5TonmuVnYxfVKJ2kBx/SanaGQ2z24/t3c7LQWJ+pVrtvByidl6JQe3gViDHvAwk5StMzkUHIhLzq8IrQUqOLzFU/a8JVzvkl9cU4Obi+GtAjr8unOO1ihQnWjPIIuUNpWpnFGytKRTL7X2zldHgN+Fqp1B8ExgEbwlXOzSHb8HVTqH4lnC1Q4nujVbZyfhtJWoHyfF3lKqdUTC7C36IuSxq590gMb9XrXbeDVE778WgdnArkGPeBZLyPSbnogMRifl94ZUgJcd3GKr+D4SrHfLLBwpwc3H8AyDHPxTO8VpFihOtGWSR8pFStTMSttaYinc7H7cyGvwxXO2Y7MfAIPhEuNqhOfwErnZM9hPhaocS3UetspPxp0rUDpLjnylVOyNhdpvY3u18HiTmL6rVzuchaueLGNQObgVyzOdAUn7B5Fx0ICIxfym8EqTk+BlD1f+VcLVDfvlKAW4ujn8F5PjXwjleq0hxojWDLFK+Uap25oGtNfkKtfNtK6PB38LVTj77LTAIJghXOzSHE+BqJ5+dIFztUKL7plV2Mv5OidpBcvx7pWpnHpjd+djUzg9BYv6xWu38EKJ2foxB7eBWIMf8ACTlj0zORQciEvNPwitBSo7fM1T9PwtXO+SXnxXg5uL4z0CO/yKc47WKFCdaM8gi5Velamdu2FrjeeX2/tbKaPBvcLXjeb8Bg+B34WqH5vB3uNrxvN+Fqx1KdL+2yk7GfyhRO0iO/6lU7cwNs9vLhJjLonYmBon5r2q1MzFE7fwVg9rBrUCOmQgk5V9MzkUHIhJzQ5vsSpCS458MVf9UbbwLlxOtGfIL2SgdNxfHy+2MOlYf4RyvVaQ40ZpBFil9gbyJU+3MBVtrkhVqp18bo8E0OFbtJL1+wCDoDwxOrjns34ZWO0mvP/OigUh0fdtkJ+NGcDLubGjMSI43ATHHqXbmghXEydjUzoAgMTe3NVQqmwFtk6sd+iFutTMXUO0MAJKyuY3HuehARGJuEV4JUnJsYqj6W4WrHfJLqwLcXBxvBXK8TTjHaxUpTrRmkEVKu1K1MydsrcmacnunbmM0eGq42smaqYFBMFC42qE5HAhXO9kK3E7EFoYbkeja22Qn4w4lagfJ8UFK1c6cMLWTdULMZVE7g4PEPE212hkconamiUHtzAlUO4OBpJymjce56EBEYp5WeCVIyXEQQ9U/RLjaIb8MUYCbi+NDgBwfKpzjtYoUJ1ozyCJlmFK1Mwdsrck45fZO18Zo8HRwtZNxpgMGwfTC1Q7N4fRwtZNxpheudijRDWuTnYxnUKJ2kByfUanamQOmdtKlEHNZ1M5MQWKeuVrtzBSidmaOQe3MAVQ7MwFJOXMbj3PRgYjEPIvwSpCS44wMVf+swtUO+WVWBbi5OD4rkOPDhXO8VpHiRGsGWaSMUKp2Zsd9SkHFJ1DP1sZo8GxwtZMvzgYMgtmFqx2aw9nhaidfnF242qFEN6JNdjKeQ4naQXJ8TqVqZ3bcRfbYPoF6riAxz12tduYKUTtzx6B2ZgeqnbmApJy7jce56EBEYp5HeCVIyXFOhqp/pHC1Q34ZqQA3F8dHAjk+SjjHaxUpTrRmkEXKaKVqZzbYWuNWvNuZt43R4Hnhasd15gUGwXzC1Q7N4XxwteM68wlXO5ToRrfJTsbzK1E7SI4voFTtzIb7kOLY3u04QWI21WrHCVE7Jga1MxtQ7ThAUpo2HueiAxGJ2RVeCVJyXICh6k8IVzvkl4QC3FwcTwA5nhTO8VpFihOtGWSRklKqdkbg1ppCub3pNkaD03C14xTSwCDICFc7NIcZuNpxChnhaocSXapNdjL2lKgdJMezStXOCNxnyeVDzGVROwsGiXmharWzYIjaWSgGtQNcgcyCQFIu1MbjXHQgIjEvLLwSpOSYZaj6FxGudsgviyjAzcXxRYAcHyOc47WKFCdaM8giZVGlamc4bK1JV5xkW6yN02C42kkXFwMGweLC1Q7N4eJwtZMuLi5c7VCiW7RNdjJeQonaQXJ8SaVqZzju3k5sJ9mWChLz0tVqZ6kQtbN0DGpnOFDtLAUk5dJtPM5FByIS8zLCK0FKjksyVP3LClc75JdlFeDm4viyQI4vJ5zjtYoUJ1ozyCJleaVqZ1bYWmMqPpNthTZGg1eAqx1jVgAGwYrC1Q7N4YpwtWMqcDsRWxhuRKJbvk12Ml5JidpBcnxlpWpnVtxJttg+k22VIDGvWq12VglRO6vGoHZmBaqdVYCkXLWNx7noQERiXk14JUjJcWWGqn914WqH/LK6AtxcHF8dyPE1hHO8VpHiRGsGWaSsqVTtzAL8hZDl9q7VxmjwWm34cdcWrlAI99ptkyYYNC6LqqCEsmab7KS3jhJVgeTlusyJHuGTdRk4HmdCnZkpoa7XxmjwegwJdX3hCZVwr19PqLCxNlCSUJG83FB4QiWfbKg8oc4E/K2Y5fZu1MZo8EYMwboRkGwbC0/ONIcbM8j7jYXvx2tI9JsoSfRIjm8qfIuEfLIpQ7xsJnwbkPLEZkxFHBcvNwPyMiecl7XymROtGWQ+ywvnOPk4zyDQkDykgnBYw6RXYeUNfrG5gSfOG6B2uqzvL6cqm9vhwfcF60/f9qLtJds3t30L27e0fSvbt7Z9G9u3tX0727e3fQfbd7R9J9t3tn0X23e1fTfbd7d9D9v3tH0v2/e2fR/b97V9P9v3t/0A2w+0/aDqd6eF4D1p+TM/5Fkx5Fkp5NnmIc+2CHm2ZcizrUKebR3ybJuQZ9uGPNsu5Nn2Ic92CHm2Y8iznUKe7RzybJeQZ7uGPNst5NnuIc/2CHm2Z8izvUKe7R3ybJ+QZ/uGPNsv5Nn+Ic8OCHl2YMizg9omfyc/Ivi6WPDVidYqkk7UZFkAJN7O9/s+aCzCWISM9c98laKP5QbzZTaPOlby37k3W0Qbyynzo9kyylhuBSfMVr0fy6nil9m6l2OlS5Nx1WzTu7G8EN6bbXszlhcaQ2a7no+VqRGPZvuejpWpGdtmh56N5U4hT5gdezJWZoo5x+zU/bEKXeQvs3N3x8p0mQvNLt0by+lGXjW7dmcsp1s52uzW9VipbuZ7s3tXYyW7vXaYPaY4VrLUg3XI7DmlsTI9WtPMXrXH8nq4Ppq9a4yVLfV4rTX7hI/l9GLdNvuGjeX0qgYw+00+lullPWH2rx7L73VtYg6oHCsRoc4xB5aN5ZYi1UzmIKBIj/PtxUGwWs+vuE1wcBujwQe3oW8T+OZgnAPNIYBJ5Xx7QXN4CHA3tnMODwEHQVynwnHB68d2KvzQIMAOq97ZOLRt8lPhh7XxnwrHZRLHHAoMoMPAzkWTj4LmUGAwduI+VOmKdCCMR1m/3N7D2xgNPhy+ImX9w4Er0hHCVySawyPgK1LWP0LpinQgzO5sIcRclhXpyCDAjqpekY4MWZGOimFFOhC4Ih0JDKCjmJyLfhGMxHw0MJk1NOBXy0OCBIR+EYyUAscAk1nYHDrRmiEfH8NQyRyjtJI5AJZ/8olye49tYzT4WHglk08cCwz+44RXMjSHx8ErmXziOObgRyTQY4Qn0OPBc9jZ0AsvkuMnAGMvzgr4AJjdeTfEXJYK+MQgMZ9UXQGfGFIBnxRDBYxbgRxzIpCUJzE5Fx2ISMwnM1fATrRmKDmewFC9nSK8aiW/nKIANxfHTwFy/FThHK9VpCCKH9RYp4EX7LjUzv6wtcYrldt7ehujwafD1Y5XOh3owDOEqx2awzPgascrnSFc7VCiO61NdjI+E5yMOxsaM5LjZylVO/vD7PaKIeayqJ2zg8R8TrXaOTtE7ZwTg9rBrUCOORtIynOYnIsORCTmc4VXgpQcz2Ko+s8TrnbIL+cpwM3F8fOAHD9fOMdrFSlOtGaQRcoFSt/t7Adba9yKT324sI3R4Avhasd1LgQGwUXC1Q7N4UVwteM6FwlXO5ToLmiTnYwvVqJ2kBy/RKna2Q9md+WvnG9A2lmldi4NEvNl1Wrn0hC1c1kMage3AjnmUiApL2NyLjoQkZjHCq8EKTlewlD1Xy5c7ZBfLleAm4vjlwM5foVwjtcqUpxozSCLlHFK1c6+sLXGr1A7V7YxGnwlXO34zpXAIBgvXO3QHI6Hqx3fGS9c7VCiG9cmOxlfpUTtIDl+tVK1sy/M7kJsaueaIDFfW612rglRO9fGoHZwK5BjrgGS8lom56IDEYn5OuGVICXHqxmq/uuFqx3yy/UKcHNx/Hogx28QzvFaRYoTrRlkkXKjUrWzD2ytSVd8JsZNbYwG3wRXO2lzEzAIbhaudmgOb4arnXQFbidiC8ONSHQ3tslOxrcoUTtIjt+qVO3sA7M7HdtnqdwWJObbq9XObSFq5/YY1A5uBXLMbUBS3s7kXHQgIjHfIbwSpOR4K0PVf6dwtUN+uVMBbi6O3wnk+F3COV6rSHGiNYMsUu5Wqnb2xr3b8crtvaeN0eB78O92vHuAQXCvcLVDc3gv/t2Od69wtUOJ7u422cn4PiVqB8nx+5Wqnb1hdvuZEHNZ1M4DQWJ+sFrtPBCidh6MQe3gViDHPAAk5YNMzkUHIhLzQ8IrQUqO9zNU/Q8LVzvkl4cV4Obi+MNAjj8inOO1ihQnWjPIIuVRpWpnL9hak8yW2/tYG6PBj8HVTjL7GDAIHheudmgOH4ernWT2ceFqhxLdo22yk/ETStQOkuNPKlU7e8HsTnoh5rKonaeCxPx0tdp5KkTtPB2D2sGtQI55CkjKp5mciw5EJOZnhFeClByfZKj6nxWudsgvzyrAzcXxZ4Ecf044x2sVKU60ZpBFyvNK1c6esLUmX3GS7YU2RoNfgKudvHkBGAQvClc7NIcvwtVOvgK3E7GF4UYkuufbZCfjl5SoHSTHX1aqdvaE2Z2P7STbK0FifrVa7bwSonZejUHt4FYgx7wCJOWrTM5FByIS82vCK0FKji8zVP2vC1c75JfXFeDm4vjrQI6/IZzjtYoUJ1ozyCLlTaVqZw+c2imU2/tWG6PBb+HVTuEtYBC8LVzt0By+jVc7hbeFqx1KdG+2yU7G7yhRO0iOv6tU7eyBK4jzIeayqJ33gsT8frXaeS9E7bwfg9rBrUCOeQ9IyveZnIsORCTmD4RXgpQc32Wo+j8UrnbILx8qwM3F8Q+BHP9IOMdrFSlOtGaQRcrHStXO7riTbPlyez9pYzT4E/xJtvwnwCD4VLjaoTn8FH+SLf+pcLVDie7jNtnJ+DMlagfJ8c+Vqp3dcYedciHmsqidL4LE/GW12vkiRO18GYPawa1AjvkCSMovmZyLDkQk5q+EV4KUHD9nqPq/Fq52yC9fK8DNxfGvgRz/RjjHaxUpTrRmkEXKt0rVzm6wtcar+ATqCW2MBk+Aqx3PmQAMgu+Eqx2aw+/gasdzvhOudijRfdsmOxl/r0TtIDn+g1K1sxvM7kxsn0D9Y5CYf6pWOz+GqJ2fYlA7uBXIMT8CSfkTk3PRgYjE/LPwSpCS4w8MVf8vwtUO+eUXBbi5OP4LkOO/Cud4rSLFidYMskj5Tana2ZVJ7fzexmjw7wxq53dgEPwhXO3QHP7BoHb+EK52KNH91iY7Gf+pRO0gOT5RqdrZVaHa+aszMbc3VCqbv0LUDv0Qt9rBrUCO+QuZeNt1qB0k5qnasckHHXCUHCcyVP192nkXLidaM+QXslE6bi6Ol9sZday+wjleq0hxojWDLFL6AXkTp9rZBbbW5Co+k61/O6PBNDhW7eSy/YFB0AgMTq45bGxHq51ctpF50UAkun7tspNxEzgZdzY0ZiTHBwAxx6l2doGpnVxsn8nWHCTmlmq109w+udppiUHt7AJUO81AUra08zgXHYhIzK3CK0FKjgMYqv424WqH/NKmADcXx9uAHG8XzvFaRYoTrRlkkTK1UrWzM07tJMvtHdjOaPBAvNpJDgQGQYdwtUNz2IFXO8kO4WqHEt3U7bKT8SAlagfJ8cFK1c7OOLWTCDGXRe1MEyTmaavVzjQhamfaGNTOzkC1Mw2QlNO28zgXHYhIzEOEV4KUHAczVP1Dhasd8stQBbi5OD4UyPFhwjleq0hxojWDLFKmU6p2doKtNX7Fu53p2xkNnh6udvzs9MAgmEG42qE5nAGudvzsDMLVDiW66dplJ+MZlagdJMdnUqp2doKpHT+2dzszB4l5lmq1M3OI2pklBrWzE1DtzAwk5SztPM5FByIS86zCK0FKjjMxVP3Dhasd8stwBbi5OD4cyPERwjleq0hxojWDLFJmU6p2doStNYViub2ztzMaPDtc7RSKswODYA7haofmcA642ikU5xCudijRzdYuOxnPqUTtIDk+l1K1syNM7RT8EHNZ1M7cQWKep1rtzB2iduaJQe3sCFQ7cwNJOU87j3PRgYjEPFJ4JUjJcS6Gqn+UcLVDfhmlADcXx0cBOT5aOMdrFSlOtGaQRcq8StXODrC1xlS825mvndHg+eBqx2TnAwbB/MLVDs3h/HC1Y7LzC1c7lOjmbZedjBdQonaQHHeUqp0dYGrHxPZuxwSJ2a1WOyZE7bgxqJ0dgGrHAEnptvM4Fx2ISMwJ4ZUgJUeHoepPClc75JekAtxcHE8COZ4SzvFaRYoTrRlkkZJWqna2h601+Qq1k2lnNDgDVzv2GTAIPOFqh+bQg6udfNYTrnYo0aXbZSfjrBK1g+T4gkrVzvYwtZOPTe0sFCTmhavVzkIhamfhGNTO9kC1sxCQlAu38zgXHYhIzIsIrwQpOS7IUPWPEa52yC9jFODm4vgYIMcXFc7xWkWKE60ZZJGymFK1sx3uE6i9cnsXb2c0eHG42vG8xYFBsIRwtUNzuARc7XjeEsLVzt+Jrl12Ml5SidpBcnwppWpnO5ja8TIh5rKonaWDxLxMtdpZOkTtLBOD2tkOqHaWBpJymXYe56IDEYl5WeGVICXHpRiq/uWEqx3yy3IKcHNxfDkgx5cXzvFaRYoTrRlkkbKCUrWzLWytSVaonRXbGQ1eEa52kt6KwCBYSbjaoTlcCa52kt5KwtUOJboV2mUn45WVqB0kx1dRqna2hamdZGxqZ9UgMa9WrXZWDVE7q8WgdrYFqp1VgaRcrZ3HuehARGJeXXglSMlxFYaqfw3haof8soYC3FwcXwPI8TWFc7xWkeJEawZZpKylVO1sA1trsqbc3rXbGQ1eG652smZtYBCsI1zt0ByuA1c72QrcTsQWhhuR6NZql52M11WidpAcX0+p2tkGpnayToi5LGpn/SAxb1CtdtYPUTsbxKB2tgGqnfWBpNygnce56EBEYt5QeCVIyXE9hqp/I+Fqh/yykQLcXBzfCMjxjYVzvFaR4kRrBlmkbKJU7WwNW2syTrm9m7YzGrwpXO1knE2BQbCZcLVDc7gZXO1knM2Eqx1KdJu0y07GOSVqB8nxvFK1szVM7aRLIeayqJ1CkJj9arVTCFE7fgxqZ2ug2ikASem38zgXHYhIzEXhlSAlxzxD1V8SrnbILyUFuLk4XgJyfHPhHK9VpDjRmkEWKVsoVTtb4T6loOITqLdsZzR4S7jayRe3BAbBVsLVDs3hVnC1ky9uJVztUKLbol12Mt5aidpBcnwbpWpnK9ynFMT2CdTbBol5u2q1s22I2tkuBrWzFVDtbAsk5XbtPM5FByIS8/bCK0FKjtswVP07CFc75JcdFODm4vgOQI7vKJzjtYoUJ1ozyCJlJ6VqZ0vYWuNWvNvZuZ3R4J3hasd1dgYGwS7C1Q7N4S5wteM6uwhXO5TodmqXnYx3VaJ2kBzfTana2RL3CdSxvdvZPUjMe1Srnd1D1M4eMaidLYFqZ3cgKfdo53EuOhCRmPcUXglSctyNoerfS7jaIb/spQA3F8f3AnJ8b+Ecr1WkONGaQRYp+yhVO1vg1ppCub37tjMavC9c7TiFfYFBsJ9wtUNzuB9c7TiF/YSrHUp0+7TLTsb7K1E7SI4foFTtbAFTO04+xFwWtXNgkJgPqlY7B4aonYNiUDvAFcgcCCTlQe08zkUHIhLzwcIrQUqOBzBU/YcIVzvkl0MU4Obi+CFAjh8qnOO1ihQnWjPIIuUwpWpnc9hak644yXZ4O6PBh8PVTrp4ODAIjhCudmgOj4CrnXTxCOFqhxLdYe2yk/GRStQOkuNHKVU7m+Pu7cR2ku3oIDEfU612jg5RO8fEoHY2B6qdo4GkPKadx7noQERiPlZ4JUjJ8SiGqv844WqH/HKcAtxcHD8OyPHjhXO8VpHiRGsGWaScoFTtlGBrjan4TLYT2xkNPhGudow5ERgEJwlXOzSHJ8HVjqnA7URsYbgRie6EdtnJ+GQlagfJ8VOUqp0S7iRbbJ/JdmqQmE+rVjunhqid02JQOyWg2jkVSMrT2nmciw5EJObThVeClBxPYaj6zxCudsgvZyjAzcXxM4AcP1M4x2sVKU60ZpBFyllK1U4Rdxij4t7O2e2MBp/djh/3HOEKhXCf0z5pgkHjsqgKSihntctOeucqURVIXp7HnOgRPjmPgeNxJlSfKaGe385o8PkMCfUC4QmVcF9QT6iwsS5UklCRvLxIeEIln1ykPKEW2nDzUW7vxe2MBl/MEKwXA8l2ifDkTHN4CYO8v0T4fryGRH+pkkSP5PhlwrdIyCeXMcTLWOHbgJQnxjIVcVy8HAvk5eXCeVkrnznRmkHmsyuEc5x8fAWDQEPykArCsjCsKAzH0V/QDwxoiKdiHAd0aJ8yO68MEI6vflFIf3FA1bPxwbPyhn5ROA7owSu7P1ahi7HMePBmeHND+Nvrhh7OZ1d2NzCS8krgnJQH0VXVZLyqffIoqyYekixd2Gq6AnMVkMRXt8PI4JTP6dXdCOaoto8HzgNyTq/pwZx29W+Vz+k1ZUlzQNl8ls+pE62ZiVMezy2UTCJVzKScdC6Z8tMJ13czjp9MlYw12M0m7dSUCknP99xEyc24hYlY+/7mWGdi61xIJjZMWkDo+2vt1+tsv779n1U0rn2X68r8bryE62YSxA/Pd0zSt0uA6/r5pFNwcgW3mE2abCnpJhMFv5C3XMqZklPKFbIl75+xyu29oZ3R4BtCas2oxt8ArLFvFL7vQnN4Y0itGXUObwRXBE0N8Zxnu47pOEgDdn4rKoKbygsA9IYA0JGmfDUoN7qHNhe6Q76beiFCu5r0m4DBfDO4POyc15vLKpeecsHQBotxSk7WdXJOppDO5LO+m/dypUQplfATvZ3XrsiOnNdbmOb1lmBe49S1yGRUnjxvDVbk2ygGORLGTQy7FzcJ38nvbXA4PcAd1cbbhe98ETFvZ9jVvoMpKdwxhWTrRGvmNqa5uJNpLu6MsPB0ZTMXL9LD/l9zSpf7alwcyAyTnQeuC3CjcynQ3wY5h/+VPc9bmfY875qSwnGiNXM7U0K8awoKp4thutxDJZvvYkgMHjgxdLZ+PfRZTwqZqJjvbpeZYJC+KOfl3SF72z31T1dzjvTPPeX7komEjQ0/Y0p+KZHKZN28SSfS6VKylEl7Sb+USub8TNEkcwk3W8w4JeMV7W5vopBJl7J+IV0qT9rGTySSfjZfMCk3ncs7np/IOaVkJmHFr5/I+H7CS6dziYSf9kpe1gpWK4M9J5XJZJ20m8i6XP65p0xpohaFrnY2ysfUsijcq3FRuJd5UbiXYVHIClkUapI48/fd1xIy6dwndFHIMiWd+wCLQlfbfEj/3C90UeDyz/3/oe3HB4LtxwfDth+daK3m3j/yPUjUsYBbmSyH+DrnEH3igWsOo471kHB/UMA8xLCwP8xU5DzMuC36INNcPMI0F48wboty8WIh4duiXBxYWMG26EMM26JAf5uF69ui1e3v/I2ak/LC71FOBfwQU0J8lFEBk82PMiSGRZRsiz4ELIoea5eZYBZhUliPxbAtivTP40AFvDBQAXP55/EQ/6APeCH98wRT/nwCMA9d7dQg5+FJpnl4shvb5JIX8hBzYTwuLxKe0lgkPMVcJDzFUCSMialIiHg6FprkngaOhSwSxjAtQk93o0iIesoW6Z9n2nELO7JI4PLPM4w7TyPtGCMb8HnjWeGHMgnzswz58jkAz//51NsSC26y7zkG3M8L9zdhfp4B9wvCcZN9LzDgflE4brLvRQbcLwnHTfa9xID7ZeG4yb6XGXC/Ihw32fcKA+5XheMm+15lwP2agnXsNQbcrwvHTfa9zoD7DQX+foMB95vCcZN9bzLgfks4brLvLQbcbwvHTfa9zYD7HQXx/Q4D7neF4yb73mXA/Z5w3GTfewy43xeOm+x7nwH3B8Jxk30fMOD+UEFe+5AB90fCcZN9HzHg/lg4brLvYwbcnwjHTfZ9woD7UwXx/SkD7s+E4yb7PmPA/bkCf3/OgPsL4bjJvi8YcH+pwN9fMuD+Sjhusu8rBtxfC8dN9n3NgPsb4bjJvm8YcH+rIL6/ZcA9QThusm8CA+7vFPj7Owbc3wvHTfZ9z4D7BwX+/oEB94/CcZN9PzLg/kk4brLvJwbcPwvHTfb9zID7FwXx/QsD7l+F4yb7fmXA/Ztw3GTfbwy4f1fA898ZcP8hHDfZ9wcD7j8V+PtPBtwTheMm+yYy4P5Lgb//YsDdMLVs3GQfdTTuqYTjJvumYsDdRzhusq8PA+6+wnGTfX0ZcPcTjpvs68eAu79w3JTP+zPgbhSOm+xrZMDdJBw32dfEgHuAcNxk3wAG3M0K4ruZAXeLcNxkXwsD7lYF/m5lwN0mHDfZ18aAu104brKvnQH31MJxk31TM+AeKBw32TeQAXeHgrzWwYB7kHDcZN8gBtyDFfh7MAPuaYTjJvumYcA9rXDcZN+0DLiHKOD5EAbcQ4XjJvuGMuAeJhw32TeMAfd0wnGTfdMx4J5eOG6yb3oG3DMIx032zcCAe0bhuMm+GRlwzyQcN9k3EwPumYXjJvtmZsA9i4K6ZRYG3LMKx032zcqAe7hw3GTfcAbcIxTwfAQD7tmE4yb7ZmPAPbtw3GTf7Ay45xCOm+ybgwH3nArie04G3HMJx032zcWAe24F/p6bAfc8wnGTffMw4B4pHDfZN5IB9ygFPB/FgHu0cNxk32gG3PMq8Pe8DLjnE46b7JuPAff8Cvw9PwPuBYTjJvsWYMDtCMdN9jkMuI1w3GSfYcDtCsdN9rkMuBPCcZN9CQbcSQX5PMmAOyUcN9mXYsCdFo6b7Esz4M4o4HmGAbcnHDfZ5zHgzgrHTfZlGXAvKBw32bcgA+6FhOMm+xZiwL2wcNxk38IMuBcRjpvsW4QB9xgF69gYBtyLCsdN9i3KgHsx4bj/to8B9+LCcZN9izPgXkI4brJvCQbcSyrIa0sy4F5KOG6ybykG3EsLx032Lc2AexkFPF+GAfeywnGTfcsy4F5Ogb+XY8C9vHDcZN/yDLhXEI6b7FuBAfeKCni+IgPulYTjJvtWYsC9sgJ/r8yAexXhuMm+VRhwryocN9m3KgPu1RTwfDUG3KsLx032rc6Aew0F/l6DAfeawnGTfWsy4F5LOG6yby0G3Gsr4PnaDLjXEY6b7FuHAfe6wnGTfesy4F5POG6ybz0G3OsLx032rc+AewPhuMm+DRhwbygcN9m3IQPujYTjJvs2YsC9sYL1e2MG3JsIx032bcKAe1MF/t6UAfdmwnGTfZsx4M4Jx0325Rhw54XjJvvyDLgLwnGTfQUG3L5w3GSfz4C7KBw32VdkwF0SjpvsKzHg3lzB+r05A+4thOMm+7ZgwL2lcNxk35YMuLdSwPOtGHBvLRw32bc1A+5thOMm+7ZhwL2tAp5vy4B7O+G4yb7tGHBvr8Df2zPg3kE4brJvBwbcOwrHTfbtyIB7J+G4yb6dGHDvLBw32bczA+5dhOMm+3ZhwL2rgny+KwPu3YTjJvt2Y8C9u3DcZN/uDLj3UMDzPRhw7ykcN9m3JwPuvRT4ey8G3HsLx0327c2Aex8F/t6HAfe+wnGTffsy4N5POG6ybz8G3Psr4Pn+DLgPEI6b7DuAAfeBwnGTfQcy4D5IOG6y7yAG3AcriO+DGXAfIhw32XcIA+5DheMm+w5lwH2YAp4fxoD7cOG4yb7DGXAfIRw32XcEA+4jheMm+45kwH2UcNxk31EMuI8WjpvsO5oB9zHCcZN9xzDgPlbBOnYsA+7jhOMm+45jwH28An8fz4D7BOG4yb4TGHCfKBw32XciA+6ThOMm+05iwH2ygvg+mQH3KcJxk32nMOA+VYG/T2XAfZpw3GTfaQy4T1fg79MZcJ8hHDfZdwYD7jMV+PtMBtxnCcdN9p3FgPtsBf4+mwH3OcJxk33nMOA+Vzhusu9cBtznKeD5eQy4zxeOm+w7nwH3BcJxk30XMOC+UDhusu9CBtwXCcdN9l3EgPti4bjJvosZcF+iIJ9fwoD7UuG4yb5LGXBfJhw32XcZA+6xwnGTfWMZcF+uIL4vZ8B9hXDcZN8VDLjHCcdN9o1jwH2lcNxk35UMuMcLx032jWfAfZVw3GTfVQy4r1aQz69mwH2NcNxk3zUMuK9V4O9rGXBfJxw32XcdA+7rFfj7egbcNwjHTfbdwID7RgX+vpEB903CcZN9NzHgvlk4brLvZgbctwjHTfbdwoD7VgXxfSsD7tuE4yb7bmPAfbsCf9/OgPsO4bjJvjsYcN8pHDfZdycD7rsU8PwuBtx3C8dN9t3NgPseBf6+hwH3vcJxk333MuC+T4G/72PAfb9w3GTf/Qy4HxCOm+x7gAH3g8Jxk30PMuB+SEF8P8SA+2HhuMm+hxlwPyIcN9n3CAPuRxXw/FEG3I8Jx032PcaA+3EF/n6cAfcTwnGTfU8w4H5Sgb+fZMD9lHDcZN9TDLifFo6b7HuaAfczwnGTfc8w4H5WOG6y71kG3M9Jz2vWvucYcD+vIJ8/z4D7BeG4yb4XGHC/KBw32fciA+6XhOMm+15iwP2ygvh+mQH3K8Jxk32vMOB+VThusu9VBtyvCcdN9r3GgPt14bjJvtcZcL+hIK+9wYD7TeG4yb43GXC/JRw32fcWA+63FfD8bQbc7wjHTfa9w4D7XeG4yb53GXC/Jxw32fceA+73heMm+95nwP2BcNxk3wcMuD9UkM8/ZMD9kXDcZN9HDLg/VuDvjxlwfyIcN9n3CQPuTxX4+1MG3J8Jx032fcaA+3MF/v6cAfcXwnGTfV8w4P5Sgb+/ZMD9lXDcZN9XDLi/Fo6b7PuaAfc3wnGTfd8w4P5WOG6y71sG3BOE4yb7JjDg/k5BPv+OAff3wnGTfd8z4P5Bgb9/YMD9o3DcZN+PDLh/UuDvnxhw/ywcN9n3MwPuXxT4+xcG3L8Kx032/cqA+zcF/v6NAffvwnGTfb8z4P5DOG6y7w8G3H8q4PmfDLgnCsdN9k1kwP2XcNxk318MuBsGyuc52YjGPZVw3GTfVAy4+yjwdx8G3H2F4yb7+jLg7iccN9nXjwF3f+G4yb7+DLgbFcR3IwPuJuG4yb4mBtwDhOMm+wYw4G4Wjpvsa2bA3aIgvlsYcLcKx032tTLgblPg7zYG3O3CcZN97Qy4p1bg76kZcA8UjpvsG8iAu0OBvzsYcA8SjpvsG8SAe7ACfw9mwD2NcNxk3zQMuKdV4O9pGXAPEY6b7BvCgHuocNxk31AG3MOE4yb7hjHgnk44brJvOgbc0wvHTfZNz4B7BuG4yb4ZGHDPKBw32TcjA+6ZhOMm+2ZiwD2zcNxk38wMuGcRjpvsm4UB96zCcZN9szLgHi4cN9k3nAH3COG4yb4RDLhnE46b7JuNAffswnGTfbMz4J5DOG6ybw4G3HMKx032zcmAey7huMm+uRhwzy0cN9k3NwPueYTjJvvmYcA9Ujhusm8kA+5RwnGTfaMYcI8WjpvsG82Ae17huMm+eRlwzyccN9k3HwPu+YXjJvvmZ8C9wEDcWP3sGEPKsJc39HwsAPRXub3OQEaDnYH4cQ3QgVy4zcBJEwwal+2lJMfLWBecXDpbn2r8addLJj03kc9lXJNL5jPpUtYv5Equl3f9nFP0nLSfcXMJL+clTb6Q85y8n3NTGT+XLKaNi+RSomws+y8WnGzJyaW8XKZoB3KKjv0m7xVLaTeXLyQd1zfGFJP2/9yin8zm/bTJp+2/nsob+9+F+drNF7LpTMb+lwU/n0yaVNbN+XmTMQQ+WfIyibzJJ6ypiUyq5BZLSSdrJ8PCLNkpSOSLQwJeTjaHyWyuaIfNJ9KJYt4aW3JT6VzW/leFdDGRTuZpflMJt5ROJuy8uU4imSsVkinPybpeIZkcApzDpPBFiexLMsRLSjhusi/FgDstHDfZl2bAnRGOm+zLMOD2hOMm+zwG3FnhuMm+LAPuBYXjJvsWZMC9kHDcZN9CDLgXFo6b7FuYAfciwnGTfYsw4B4jHDfZN4YB96LCcZN9izLgXkw47r/tY8C9uHDcZN/iDLiXEI6b7FuCAfeSwnGTfUsy4F5KOG6ybykG3EsLx032Lc2AexnhuMm+ZRhwLyscN9m3LAPu5YTjJvuWY8C9vHDcZN/yDLhXEI6b7FuBAfeKwnGTfSsy4F5JOG6ybyUG3Csrfam7MtNL3VUGMhq8CsNL3VWFv9Ql3KsOnDTBoHFZbKWXrwmGIFstppe6UV90Irm0+kDci9IwX5tSqVDK+JliKeG6hUwmn0kUUql8oWBfWOfzxj7yvaydAPvUydh/xc2kvYSXKBScvEn7pb9fmK4a8lLXOOlMKp3Nlew/YOfEdYxJFEsli9+O5ydzaSeVT7n5dMJPeyULyxTsDPipjFtKFrOucZPAOVxD+KJE9q3BEC9rCsdN9q3JgHst4bjJvrUYcK8tHDfZtzYD7nWE4yb71mHAva5w3GTfugy41xOOm+xbjwH3+sJxk33rM+DeQDhusm8DBtwbCsdN9m3IgHsj4bjJvo0YcG8sHDfZtzED7k2E4yb7NmHAvalw3GTfpgy4NxOOm+zbjAF3Tjhusi/HgDsvHDfZl2fAXRCOm+wrMOD2heMm+3wG3EXhuMm+IgPuknDcZF+JAffmwnGTfZsz4N5COG6ybwsG3FsKx032bcmAeyulLze3Ynq5ufVARoO3Zni5uY3wl5uEe5uBkyYYNC6LrfQScnWGINs2ppebUV/4Ibm03UDcC8NQX6dKTqmUz+SKhWKqmMiZdD6VdFPJnJcuJvOel/MdP2F/opgvudmi66Yyxv5DqVQi42UKhaK3RsDLyV4Q5zKJZDGfT7jpRNIUSzmTzTuJtPGzJuEU/GQm76bzmaTn2RezvpsuFgv2Ycm+s/UydkZMbg3gHG4vfFEi+7ZniJcdhOMm+3ZgwL2jcNxk344MuHcSjpvs24kB987CcZN9OzPg3kU4brJvFwbcuwrHTfbtyoB7N+G4yb7dGHDvLhw32bc7A+49hOMm+/ZgwL2ncNxk354MuPcSjpvs24sB997CcZN9ezPg3kc4brJvHwbc+wrHTfbty4B7P+G4yb79GHDvLxw32bc/A+4DhOMm+w5gwH2gcNxk34EMuA8SjpvsO4gB98HCcZN9BzPgPkQ4brLvEAbchwrHTfYdyoD7MKUv+Q5jesl3+EBGgw9neMl3hPCXfIT7iIGTJhg0Lout9DJuO4YgOzKml3xRX3whuXTUQNyLszBf2zeVyZyby6fsjyZLqUzCvtc09p9wSvZ1JhmT8FN+Lusk84l0MlvKu5l8wUnkHfr3SvlcZvuAl5PNYSFbyuULGS+Z8lOOhZlyi27OSWRMwU6IKZlkquj4ec8tehZONm0Kbqpkign7yjRPE7Q9cA6PFr4okX1HM8TLMcJxk33HMOA+Vjhusu9YBtzHCcdN9h3HgPt44bjJvuMZcJ8gHDfZdwID7hOF4yb7TmTAfZJw3GTfSQy4TxaOm+w7mQH3KcJxk32nMOA+VThusu9UBtynCcdN9p3GgPt04bjJvtMZcJ8hHDfZdwYD7jOF4yb7zmTAfZZw3GTfWQy4zxaOm+w7mwH3OcJxk33nMOA+Vzhusu9cBtznCcdN9p3HgPt84bjJvvMZcF8gHDfZdwED7guVvuy6kOll10UDGQ2+iOFl18XCX3YR7osHTppg0LgsttJLqaMYguySmF52RX0BhOTSpQNxL5DCfO0WU4mU45S8dKbg27dkSXpplk6mCqmUn8+4Cd/Yd2uu46XSft7PZIxXzCbzjmcnJlNK2Dd8Rwe8nOxll2ucUjGdSOXyyUIm6du3cPlCKePkC659e5jIptKeY612XNf3s1lTsq8T/WTKSefy9nkq6x8NnMPLhC9KZN9lDPEyVjhusm8sA+7LheMm+y5nwH2FcNxk3xUMuMcJx032jWPAfaVw3GTflQy4xwvHTfaNZ8B9lXDcZN9VDLivFo6b7LuaAfc1wnGTfdcw4L5WOG6y71oG3NcJx032XceA+3rhuMm+6xlw3yAcN9l3AwPuG4XjJvtuZMB9k3DcZN9NDLhvFo6b7LuZAfctwnGTfbcw4L5VOG6y71YG3LcJx0323caA+3bhuMm+2xlw36H0pc8dTC997hzIaPCdDC997hL+0odw3zVw0gSDxmWxlV7OXMoQZHfH9dIn4osQJJfuGYh7kRLma2tE3pTcgltKeAVrVTGXK2XSpVIplXP8dDKTKJhsIZtM2JdKOS/pp7L2HzaZhJ/0i+l83kteFvCyeg5Nzs+6pWTaDu752ZydyJxTKFrc+aLjuSZVLJicKTl2orPFYj5vX5Wlfb+YSudck7XzWLwMOIf3Cl+UyL57GeLlvoGycZN91NG47xeOm+y7nwH3A8Jxk30PMOB+UDhusu9BBtwPCcdN9j3EgPth4bjJvocZcD8iHDfZ9wgD7keF4yb7HmXA/Zhw3GTfYwy4HxeOm+x7nAH3E8Jxk31PMOB+Ujhusu9JBtxPCcdN9j3FgPtp4bjJvqcZcD8jHDfZ9wwD7meF4yb7nmXA/Zxw3GTfcwy4nxeOm+x7ngH3C8Jxk30vMOB+caDOlx8vAv1Vbu9LAxkNfmkgftyXgQ7kwv3ywEkTDBqXxVZ6SXEPQ5C9Ak4unW2yjfuILwSQXHp1IO6FQpivjZtJF5IlN5FwUoWEY3G6xYSTy5TyRS+V951CKVEsur6TK6VKJmENMCab8R2/lLCW5PzSvQEvJ5tDv+h7Wc/JFd2875tc0nWthY4dNOuVCl4h5ZVSTiqTKeRSuVShmMi7BS/jealSwXfyKTdxL3AOXxO+KJF9rzHEy+vCcZN9rzPgfkM4brLvDQbcbwrHTfa9yYD7LeG4yb63GHC/LRw32fc2A+53hOMm+95hwP2ucNxk37sMuN8Tjpvse48B9/vCcZN97zPg/kA4brLvAwbcHwrHTfZ9yID7I+G4yb6PGHB/LBw32fcxA+5PhOMm+z5hwP2pcNxk36cMuD8Tjpvs+4wB9+fCcZN9nzPg/kI4brLvCwbcXyp9CfAl00uArwYyGvwVw0uAr4W/BCDcXw+cNMGgcVlspc36VxmC7Ju4XgJE3BhHcunbgbiN9VBf51L2vYFv/IzrFkqFdJZ+u02uVMjQi49UKpvJWxPtv5L1C4VEvmR/Nmv/spjLFgp28Fz+tYCX1XPopo2b8nPGyTlF30kn3EzK8XL5nJP2jZ3MRK6QNmn72M8X/UQyW0olLBo/l00lEomMl8q8BpzDCcIXJbJvAkO8fCccN9n3HQPu74XjJvu+Z8D9g3DcZN8PDLh/FI6b7PuRAfdPwnGTfT8x4P5ZOG6y72cG3L8Ix032/cKA+1fhuMm+Xxlw/yYcN9n3GwPu34XjJvt+Z8D9h3DcZN8fDLj/FI6b7PuTAfdE4bjJvokMuP8Sjpvs+4sBd0OHbNxkH3U07qmE4yb7pmLA3Uc4brKvDwPuvh06N8P7Av1Vbm+/DkaD+3Xgx+0PdCAX7v4dkyYYNC6LrbRp/S3DYtIITi6drXojN+oGMZJLTR24DeZQXxedRDqTLNrN85Sf8jPpdMHPu3b3P1eyrwGSmVKmaLKOky6l066bTaWLmUIyWzBJr1hwsolkijZxCe9km+Fu2rGwk14ymbeb827KeG42kUpk014xmTUp+57BTXlJ4yVSmWQmYTfvjW9ntpQ2iVK6kPcnADfDBwhflMi+AQyLUrNw3GRfMwPuFuG4yb4WBtytwnGTfa0MuNuE4yb72hhwtwvHTfa1M+CeWjhusm9qBtwDheMm+wYy4O4Qjpvs62DAPUg4brJvEAPuwcJxk32DGXBPIxw32TcNA+5pheMm+6ZlwD1EOG6ybwgD7qHCcZN9QxlwDxOOm+wbxoB7OuG4yb7pGHBPr3RTeHqmTeEZOhgNnoFhU3hG4ZvChHvGjkkTDBqXxVbavG1iCLKZ4toUjrhRiuTSzB24jdYwX5u0l86aQiKXziVTdqBUIVksFPO5Qr6QKeWcUtotJFKlZDZt/yJr95rtHng+kSpaMxJuouS6AwJeVs+hyfq+NbKUyHl+Ml0wqYJjMulSPp/KZ1PFpF9IZRzPK5WsaUnf5H0vWUjnS7lUxi/4BeuAAcA5nEX4okT2zcIQL7MKx032zcqAe7hw3GTfcAbcI4TjJvtGMOCeTThusm82BtyzC8dN9s3OgHsO4bjJvjkYcM8pHDfZNycD7rmE4yb75mLAPbdw3GTf3Ay45xGOm+ybhwH3SOG4yb6RDLhHCcdN9o1iwD1aOG6ybzQD7nmF4yb75mXAPZ9w3GTffAy451e6OTo/0+boAh2MBi/AsDnqCN8cJdxOx6QJBo3LYittYs7MEGQmps3RqBuGSC65HbgNxzBfGzuQ63iZRDZlf9BN2/+ylPeKpWwu49rN35yF5JTy2ZKbsDhKXsIU7I9ayK7JOLmM8WcJeDnZHOZLnuvbScv4mWTWsTNmbSsU7EayU0wbu8mcMm6xkLNby6mUa5yim0kX7Xx4haJXSnnF1CzAOUwIX5TIvgRDvCSF4yb7kgy4U8Jxk30pBtxp4bjJvjQD7oxw3GRfhgG3Jxw32ecx4M4Kx032ZRlwLygcN9m3IAPuhYTjJvsWYsC9sHDcZN/CDLgXEY6b7FuEAfcY4bjJvjEMuBcVjpvsW5QB92LCcf9tHwPuxYXjJvsWZ8C9hNJNwiWYNgmX7GA0eEmGTcKlhG8SEu6lOiZNMGhcFltpM89lCLKl49okjLhxhuTSMh24jbcwX7ulTCprR/QyuVLeLSZTiXzKS5c8uxdayuRTRWPSec9z7aBesuSaRMbNlNLZkjEp+5OFZD4R8LLPZBwqFvNuIZ/KeqboJ1PpZDaXL+b9ouMZv2A3MtMFL+0Yv5hMJDPFjO+btOvlc66fyxWSiXwmAZzDZYUvSmTfsgzxspxw3GTfcgy4lxeOm+xbngH3CsJxk30rMOBeUThusm9FBtwrCcdN9q3EgHtl4bjJvpUZcK8iHDfZtwoD7lWF4yb7VmXAvZpw3GTfagy4VxeOm+xbnQH3GsJxk31rMOBeUzhusm9NBtxrCcdN9q3FgHttpZtlazNtlq3TwWjwOgybZesK3ywj3Ot2TJpg0LgsttKm1jIMQbZeTJtlUTeQkFxavwO3ARXq60TSy3lOwssUS4VE1sunfTojWDCZbMoteL6bdrL5osknvFzCtxuI2VzOzxay6ZzxsybhZJYNeDnZHPomn0unLZSktS1rHJOx/yvl0tliwc37juO6Ofs/P2lnLec42Rzd0/ZKfrLopouFUn5Z4BxuIHxRIvs2YIiXDYXjJvs2ZMC9kXDcZN9GDLg3Fo6b7NuYAfcmwnGTfZsw4N5UOG6yb1MG3JsJx032bcaAOyccN9mXY8CdF46b7Msz4C4Ix032FRhw+8Jxk30+A+6icNxkX5EBd0k4brKvxIB7c6WbRpszbRpt0cFo8BYMm0ZbCt80ItxbdkyaYNC4LLbS5s76DEG2VUybRlE3UpBc2roDtxET6mu34Jc815hEKpPP57xs1ibJRKmYSeSSdsssmbEgc9l0xrE7VYUUfZvIlBK+8YpeImsy/gYBLyffNMqmU+mUKfh+tpj0jCkliymT9xzfL+Ts7OaT1rpi0WSSrpPLFdM5u7NlyxA3bTKFdNFLbQCcw22EL0pk3zYM8bKtcNxk37YMuLcTjpvs244B9/bCcZN92zPg3kE4brJvBwbcOwrHTfbtyIB7J+G4yb6dGHDvLBw32bczA+5dhOMm+3ZhwL2rcNxk364MuHcTjpvs240B9+7CcZN9uzPg3kPp5skeTJsne3YwGrwnw+bJXsI3Twj3Xh2TJhg0LouttMmxNUOQ7R3X5knEDQUkl/bpwG1IhPnaLZWSuYSbdb1CpmQKmbyXcFO5YtHxCsWSKZpUymRKyXSqmLdfLIRSNuHbnZl0KpmkX4nrbhPwcrI5dNKlXD5p8aaz1hSXXlQUcwUv4+XddDqT9xMmX0oUXa+YsNs9mXQyl6Mf9rP5vG//rmLDI+oc7it8USL79mWIl/2E4yb79mPAvb9w3GTf/gy4DxCOm+w7gAH3gcJxk30HMuA+SDhusu8gBtwHC8dN9h3MgPsQ4bjJvkMYcB8qHDfZdygD7sOE4yb7DmPAfbhw3GTf4Qy4j1C6iXAE0ybCkR2MBh/JsIlwlPBNBMJ9VMekCQaNy2Irif19GILs6Jg2EaIKaySXjunACfMwX7uZhJvx/IKTsNsNJZPLpzNuJpV0vaSbtsgTeZN0M0XPOLl8yk/6npvJ5jzHNcVS3nfzBW/fgJeTbSJkE/QrCtN+0S35xilZU33fySRKdqayTi6bSZdMOluwX5yEtS9rCslMJpWxmJKun0zk9gXO4bHCFyWy71iGeDlOOG6y7zgG3McLx032Hc+A+wThuMm+ExhwnygcN9l3IgPuk4TjJvtOYsB9snDcZN/JDLhPEY6b7DuFAfepwnGTfacy4D5NOG6y7zQG3KcrFdOnM4npMzoYDT6DQUyfKVxME+4zOyZNMGhcFltJ9B7DEGRnxSWmIwpMJJfO7sAJ1DBfu1aOG69YTGbShWy+VHSS9Nup/KJfSOZLuWI+XcpYSFaJp9xkplRIZxJ+JlvI5jLZdMo37t9C9cwwMe1mcomUl8xmCxawm88n7ZOSn8mlEqmUnzF5r2DcgslkktlkySnkfMfJpbySxZDNucWieyxwDs8RviiRfecwxMu5wnGTfecy4D5POG6y7zwG3OcLx032nc+A+wLhuMm+CxhwXygcN9l3IQPui4TjJvsuYsB9sXDcZN/FDLgvEY6b7LuEAfelSkXlpUyi8rIORoMvYxCVY4WLSsI9VomoJPF3NkOQXR6XqIwotJBcuqIDJ9TCfO1mrfnJvMkYky0V6JeaZI2X9ex/W8oW05lssWhRFb2M7xTTWa+YTpiilyrl3UTCNzmrXs8JeDmZqExb3Zu1xjgmk0u6TjGfL+YL1mbHy2RMMZGgT67MFpyc59uXybm8MaVsNlU09meKqaxxzwHO4TjhixLZN44hXq4Ujpvsu5IB93jhuMm+8Qy4rxKOm+y7igH31cJxk31XM+C+Rjhusu8aBtzXCsdN9l3LgPs64bjJvusYcF+vVFxdzySubuhgNPgGBnF1o3BxRbhvVCKuSARdwRBkN8UlriIKDiSXbu7ACZYwX7smmU6bVKKYS+YyTsHPe1nHWJ2YSxTTKVPMJB0nkS866YyftLaZfD6Xs28BS27OKxVzXiI5LuDlZOKqZKwatS8x0xZ8KZUv2Yl0C07R97N5O1qq6CUcN5c0pULGs8amvGwilynlTNKCS2UKxXHAObxF+KJE9t3CEC+3CsdN9t3KgPs24bjJvtsYcN8uHDfZdzsD7juE4yb77mDAfadw3GTfnQy47xKOm+y7iwH33UpFxt1MIuOeDkaD72EQGfcKFxmE+14lIoPEwM0MQXZfXCIjYuGN5NL9HbjCPczXrpdPeFljEnnjm4KbLGQKOTeVzhfdpH37kysU0hZdqpQ0btrLFNNOJp8sZunNUT6Vo19Rf0vAy8lERibvFFJpK7pM0ks69o2Sl3adZC5bSqRLJWuuyWSTbippzXZKbsIpWGPTJmsy9p/N5DLpW4Bz+IDwRYnse4AhXh4Ujpvse5AB90PCcZN9DzHgflg4brLvYQbcjwjHTfY9woD7UeG4yb5HGXA/prTYfoyp2H68g9HgxxmK7SeEF9uE+wklxTYVxfczBNmTcRXbEQtQJJee6sAVsGG+NtmMb5xMKmEVRDZt/+DZwZImm826nq3SfSeX9rJuMVFwCxk3ad8kpP1Ezr7NSKTSbjFT+rtQfCKk2DZWECT8kp+jT9LIZo1fShWK9nWEffeRtRgd4xfyqVQ6mU+XaIKzWft6xIqCQj6X9e3UmAeAc/i08EWJ7HuaIV6eEY6b7HuGAfezwnGTfc8y4H5OOG6y7zkG3M8Lx032Pc+A+wWlRecLTEXnix2MBr/IUHS+JLzoJNwvKSk6qTh8iiHIXo6p6IxaiCG59EoHrpAL87UpJAsJW1Lb8jWbdVJ299hJpHNJJ5Gxj3PpXNF4vvHdZMr17cC+LbOThVLOK/rFjFPyC97TAS8nm8Ok/ReTST+VdzynVMhR7e7nM+lkNm/tt/alc+lC3k266WLCTeaLfj6btHVzyhiv5LiJ3NPAOXxV+KJE9r3KEC+vCcdN9r3GgPt14bjJvtcZcL8hHDfZ9wYD7jeVFl9vMhVfb3UwGvwWQ/H1tvDii3C/raT4oiLpFYYgeyeu4itiQYLk0rsduIImzNduOlsy+VzB7iWm7XZixjW+56Zy2QSdBU7Znc+CyZuEWyilXbubmaF9RrvFmHTyyWSu6CfcVwNeTvZ6PVtI2f8sbfHnswmfjkV7ruP4yUzBybu5bLZgJ5F+iU/CKxbtzmqiWPST9j9J5PMp4/oVBVPUOXxP+KJE9r3HEC/vC8dN9r3PgPsD4bjJvg8YcH+otAj5kKkI+aiD0eCPGIqQj4UXIYT7YyVFCBUL7zIE2SdxvXaMuDAjufRpB25hD/W13UWy+JxCLp0qOrZsydt/P51xigVbddnNLq9YSBUL6UzaTecyyZLd+SoUivmC/Q9K1uJS5r2Al5PNoXE8176tNbYsypeSRVNIF+002a0q3085XiGbTfsl+2/Zd6LFUj7r5Y1JWXy2fLITlnby7wHn8DPhixLZ9xlDvHwuHDfZ9zkD7i+ULsZfMC3GX3YwGvwlw2L8lfDFmHB/pWQxpkXzU4Yg+zqmxTjqAoXk0jcduAUu1NephOPbf9d4Gbt14NDIyVzGSxdzvkln3bSf8mk4a23OTae9dK6USia9pH0blXRzxnM/C3g52WKcTyQyvjXRVi7JkusWCxZg0S1l7QhF+3Yr5abdTCKdLnkm4+QcW8t4dlcjmbN1jp8qehULaNQ5/Fb4okT2fcsQLxOULkoTmBal7zoYDf6OYVH6XviiRLi/V7Io0eLxDUOQ/RDXohQxUSO59GMHLtF3x9f5RCHpZ7J+0uSyJpPyCvlktpBImUzBLmvJXMq1K2/JuIm045UK2ULh24CXfbrwtZP08umiscB8L2nsFBSKOTdZSpd8a3G+WHATxnWSGTtqxr4TSKS/Bc7hT0qT809MyfnnDkaDf2ZIzr8IT86E+xclyZmS6I8MyfnXuJJzVetpwkJy6bcOXMIL8zXCJ78x+Pr38nenXsK1qw79nOc7JukXXM91/XzSsdupBbeYTZpsKekmEwW/kLdj5kzJKeUK2ZL3z1hxJtTfmRLqHx2MBv/BkFD/FJ5QCfefDAmVyNbUMCmphLXOfysqsTnmpTOg0fNSTuaJZXyDZ44/cRFoyLa+gY2dRpODBzRUZhMtTign5V+d4w+y9nM4YSJDVpnIvPmDwt1VSdHDVoE7qo1TDZJdPhIxyUa0b/oMwmazzsRA4x4QjIuei7+Dk2Eu+jLNRV/GueAqNfsNkp1TuOJh0WH/r7gLXdjHxv3FhsnOf4SZOIleQ4D+Nsg5pIKquaF7FXNXY3XJqbLGsW6h5qS8uOw/aArVshOtmamYFoJyo3tos+ny3xlUOX7nuFETwxLgxNDZ+vXQZz0p4KJibhwkM8EgfVHOy8ayAqW3/ulqzpH+aSobyyQSNjb8jCn5pUQqk3XzJk3vYpKlTNpL+vYVUc7PFE0yl3CzdJ2BflFUJpWgX+Wb9QvpUnnSNn4ikfSz+YKxr3RyecfzEzmnlMwkXCfn21dAfsJLp3OJhJ/2Sl7W7krkSgnPSWUyWSftJrIul3+aQvzT04Wwq20TpH8GMOXPAYB56Gp7CTkPzUzz0BzMw5SKBMkLeYi5OB6XjdmisUhoYS4SWhiKhCVjKhK6Uk9xJrlW4FjIImFJpkWotRtFQlfzYAlqCsYpOVm7ojqZQjqTz/pu3rPraCmV8BNI/7QNwi3syCKByz9tEXaZuoqbzh3cvth47Mn7sC7HQu4Gtw/CLkidPmqP4KOuCpde+qjLmOzJO8uuxkL6aOpBwKKvzEdTlxVX1a+0Gnrpu67MQ+62lheDAwf987Uj7HWWE62ZWq91kO8qo44FfDUW+lE/TrRmehu0/19zGHWsQYNk+4MCZhBDgTyYSSwMZny11ME0F9MwzcU0U5iLqDZz8WJp4a+buDiwjPDXTf0C3OjXTUB/m2Xqr5uq29/5GzUn5YXftJw7SYOYEuK0jDtJZPO0DIlhWSWvmwYBdyqGDJKZYJZl2qkYEsPrJqR/hgJfNy0D3Eni8s/QbrxeaOihv7pzarezaVkUhmlcFIYxLwrDGBaF5YQsCjVJnCn93ZBJZzqhi8JyTElnOsCi0NU2H9I/0wtdFLj8M33ZohDXvaHybdGI10JMub0zDGI0eIYQ2RjV+BmAyWBGYBBwzeGMIYtI1DmcUfgJ/0EBbvRWMDLpIbkzE3gruLOhX0f0A2KeWfip+locdKI1ZDELzV+zgP2B3i4k7gFtNBRzMzMU6LOCxQq9d+3kIP15pO0Tg+/p35qInee//80+Zf/ele2T/r3xwffD7b87wvbZOouHsp9H+nw24FxSsTasbC457R4OjqXqhhnb5RvbTNodoK/Dg+9nt/Myh+1z2j6X7XPbPo/tI20fZfto2+e1fT7b57d9Adsd243tru0J25O2p2xP256x3bM9a/uCti9k+8K2L2L7GNsXJT/YvrjtSwwKjOms4smYAVXP5gh5NmfIs7lCns0d8myekGcjQ56NCnk2OuTZvCHP5gt5Nn/IswVCnjkhz0zIMzfkWSLkWTLkWSrkWTrkWSbkmRfyLBvybMGQZwuFPFs45NkiIc/GhDxbNOTZYiHPFg95tkTwrLyNCL4uFnx1orWKpBN1EZsdMFbx730gx8wBGoswzgkZ65/5miv6WG7ne7y5o46VnPROcJ5oYznl7xdHRhnLrXxXOar3YznV7z1H93Isu0k02TvUeXs3lhf2Pna+3ozlhb/bnb/nY2VqvSdeoKdjZWq/c3Z6NpY7pffXpidjZab8Ltzt/lhdntVIdHesTJe50CS7N5bTjbxqUt0Zy+lWjjbprsdKdTPfm0xXYyW7vXYYb4pj0SfYdn+s7JTGyvRoTTML1h7L6+H6aBaqMVa21OO11iwcPpbTi3XbLBI2ltOrGsCMmXws08t6wixaPZbf69rELFY5ViJCnWMWLxvLLUWqmcwSQNFHdeO8DZOE0xKBiFksEDVjApGzcCB6FgxEkBeIonQgkpKBaHIDEeUEomr+QGTNG4iuUYEImycQZXMFIo1qN6oFqcX5tmMJWP3pV7ztWHIQo8E0OGrHtdP4JXGkMksBBQLXHJKNqB25zjlcChiYFARDG+K5ZopLKD7rTk/5XCwdBNgy1bstSweOLX+2TIgqRm+34zKJY5YGBtAyYOeiyUdBszQwGP895Q0OxrhWpMVhPMr65fYuO4jR4GXhK1LWXxa4Ii0nfEWiOVwOviJl/eWUrkiLw+zOFkLMZVmRlg8CbIXqFWn5kBVphRhWpMWBK9LywABagcm56EMISMwrApNZQwN+tVwqSEDol+lIKbASMJmFzaETrRny8UoMlcxKSiuZxWD5J58ot3flQYwGrwyvZPKJlYHBv4rwSobmcBV4JZNPrMIc/IgEupLwBLoqeA47G3rhRXJ8NWDsxVkBLwazO++GmMtSAa8eJOY1qivg1UMq4DViqIBxK5BjVgeScg0m56IDEYl5TeYK2InWDCXH1Riqt7WEV63kl7UU4Obi+FpAjq8tnOO1ihRE8YMaax3wgh2X2lkUttZ4pXJ71x3EaPC6cLXjldYFOnA94WqH5nA9uNrxSusJVzuU6NYZJDsZrw9Oxp0NjRnJ8Q2Uqp1FYXZ7xRBzWdTOhkFi3qha7WwYonY2ikHt4FYgx2wIJOVGTM5FByIS88bCK0FKjhswVP2bCFc75JdNFODm4vgmQI5vKpzjtYoUJ1ozyCJlM6XvdsbA1hq34uN9coMYDc7B1Y7r5IBBkBeudmgO83C14zp54WqHEt1mg2Qn44IStYPkuK9U7YyB2W1KIeayqJ1ikJhL1WqnGKJ2SjGoHdwK5JgikJQlJueiAxGJeXPhlSAlR5+h6t9CuNohv2yhADcXx7cAcnxL4RyvVaQ40ZpBFilbKVU7i8DWGr9C7Ww9iNHgreFqx3e2BgbBNsLVDs3hNnC14zvbCFc7lOi2GiQ7GW+rRO0gOb6dUrWzCMzuQmxqZ/sgMe9QrXa2D1E7O8SgdnArkGO2B5JyBybnogMRiXlH4ZUgJcftGKr+nYSrHfLLTgpwc3F8JyDHdxbO8VpFihOtGWSRsotStbMwbK1JV3wmxq6DGA3eFa520mZXYBDsJlzt0BzuBlc76QrcTsQWhhuR6HYZJDsZ765E7SA5vodStbMwzO50bJ+lsmeQmPeqVjt7hqidvWJQO7gVyDF7Akm5F5Nz0YGIxLy38EqQkuMeDFX/PsLVDvllHwW4uTi+D5Dj+wrneK0ixYnWDLJI2U+p2lkI927HK7d3/0GMBu+Pf7fj7Q8MggOEqx2awwPw73a8A4SrHUp0+w2SnYwPVKJ2kBw/SKnaWQhmt58JMZdF7RwcJOZDqtXOwSFq55AY1A5uBXLMwUBSHsLkXHQgIjEfKrwSpOR4EEPVf5hwtUN+OUwBbi6OHwbk+OHCOV6rSHGiNYMsUo5QqnYWhK01yWy5vUcOYjT4SLjaSWaPBAbBUcLVDs3hUXC1k8weJVztUKI7YpDsZHy0ErWD5PgxStXOgjC7k16IuSxq59ggMR9XrXaODVE7x8WgdnArkGOOBZLyOCbnogMRifl44ZUgJcdjGKr+E4SrHfLLCQpwc3H8BCDHTxTO8VpFihOtGWSRcpJStZOFrTX5ipNsJw9iNPhkuNrJm5OBQXCKcLVDc3gKXO3kK3A7EVsYbkSiO2mQ7GR8qhK1g+T4aUrVThZmdz62k2ynB4n5jGq1c3qI2jkjBrWDW4EcczqQlGcwORcdiEjMZwqvBCk5nsZQ9Z8lXO2QX85SgJuL42cBOX62cI7XKlKcaM0gi5RzlKodD6d2CuX2njuI0eBz8WqncC4wCM4TrnZoDs/Dq53CecLVDiW6cwbJTsbnK1E7SI5foFTteLiCOB9iLovauTBIzBdVq50LQ9TORTGoHdwK5JgLgaS8iMm56EBEYr5YeCVIyfEChqr/EuFqh/xyiQLcXBy/BMjxS4VzvFaR4kRrBlmkXKZU7WRwJ9ny5faOHcRo8Fj8Sbb8WGAQXC5c7dAcXo4/yZa/XLjaoUR32SDZyfgKJWoHyfFxStVOBnfYKRdiLovauTJIzOOr1c6VIWpnfAxqB7cCOeZKICnHMzkXHYhIzFcJrwQpOY5jqPqvFq52yC9XK8DNxfGrgRy/RjjHaxUpTrRmkEXKtUrVThq21ngVn0B93SBGg6+Dqx3PuQ4YBNcLVzs0h9fD1Y7nXC9c7VCiu3aQ7GR8gxK1g+T4jUrVThpmdya2T6C+KUjM/8fedcC5UWP98bbsbrLZzaZ3QgIkoc3Y3gZ3EHrvvePdtUMgJJBKAgTTA4QQSAIJvZejc7QP7uCOA67Tez9673fAUe6TwLKf376Rx+snx4LV7/d2x5Lmr6enp6cnjUZzJ57t3EHMdu4swmyHbwRyvTsYlfJOQ43L3RE563xXiXuC0jjebsDrv7vEZzuyXe62oN6mdPxuRh3/vxLXcT8nxS0seJxOyj2WznaaDM127u1nkOF7Dcx27mXsBL8r8dmOlOHvDMx2flfisx1p6O7pV9rG+PeWzHY4dfw+S2c7TRbOdu5PGeY/4NnO/cRs5w9FmO3wjUCudz+jUv7BktkOZ53/WOKeoDSO9xnw+h8o8dmObJcHLKi3KR1/gFHH/1TiOu7npLiFBY/TSXnQ0tlOlG2siWWdyfZQP4MMP8Q+24m1PcTYCR4u8dmOlOHD7LOdWNvDJT7bkYbuwX6lbYz/bMlsh1PH/2LpbCfKxnesaGey/TVlmP+GZzt/JWY7fyvCbIdvBHK9vzIq5d8MNS53R+Ss899L3BOUxvEvBrz+f5T4bEe2yz8sqLcpHf8Ho47/s8R13M9JcQsLHqeT8oils50I32wnCvl9tJ9Bhh/ln+1EH2XsBI+V+GxHyvAx/tlO9LESn+1IQ/dIv9I2xo9bMtvh1PEnLJ3tRPgc4gjBrpHZzpMpw/wUnu08Scx2nirCbIdvBHK9JxmV8ilDjcvdETnr/HSJe4LSOD5hwOt/psRnO7JdnrGg3qZ0/BlGHX+2xHXcz0lxCwsep5PynKWznTDbWNOZ9Wzn+X4GGX6efbbT2fY8Yyd4ocRnO1KGL7DPdjrbXijx2Y40dM/1K21j/KIlsx1OHX/J0tlOmI3vzqI923k5ZZhfwbOdl4nZzitFmO3wjUCu9zKjUr5iqHG5OyJnnV8tcU9QGseXDHj9r5X4bEe2y2sW1NuUjr/GqOP/KnEd93NS3MKCx+mkvG7pbMdjG2s64pDfN/oZZPgN9tlOR/wNxk7wZonPdqQM32Sf7XTE3yzx2Y40dK/3K21j/JYlsx1OHX/b0tmOx8Z3RyfBrpHZzjspw/wunu28Q8x23i3CbIdvBHK9dxiV8l1DjcvdETnr/F6Je4LSOL5twOt/v8RnO7Jd3reg3qZ0/H1GHf+gxHXcz0lxCwsep5PyoaWzHZdtrPGynu181M8gwx+xz3a8to8YO8HHJT7bkTL8mH2247V9XOKzHWnoPuxX2sb4E0tmO5w6/qmlsx2XjW+vaM92PksZ5s/xbOczYrbzeRFmO3wjkOt9xqiUnxtqXO6OyFnnL0rcE5TG8VMDXv+XJT7bke3ypQX1NqXjXzLq+L9LXMf9nBS3sOBxOin/sXS2sz7bWNOeNdv5qp9Bhr9in+20t33F2Am+LvHZjpTh1+yznfa2r0t8tiMN3X/6lbYx/saS2Q6njv/X0tnO+mx8txdttvNtyjB/h2c73xKzne+KMNvhG4Fc71tGpfzOUONyd0TOOn9f4p6gNI7/NeD1/1Disx3ZLj9YUG9TOv4Do47/r8R13M9JcQsLHqeT4jTaOdtZj22saW2F/IYaDTIswXlnO4J5vgb0yhpLe7YjZSh5ZD6BurWs0eygwWHonMbSNsbljbzGWAXuOnPqeAVjnYs521mPbeBsbSHYNTLbqUwZ5qpGJ3tmU9nYdbYjM5me7azHONupZFTKqkYzjcvdETnr3IvZ+HB3OGkcKxr5B4ZqwwOXW1jwZLtUW1BvUzpezajjNSWu435OiltY8DidlFpLZzvrso010azZTu9Ggwz3Zp/tRFt7M3aCPiU+25Ey7MM+24m29inx2Y40dLWNpW2M6yyZ7XDqeF9LZzvrss12okWb7dSnDHMDnu3UE7OdhiLMdtZlnO3UMyplQ6OZxuXuiJx17lfinqA0jn0NeP2NJT7bke3SaEG9Tel4I6OO9y9xHfdzUtzCgsfppAywdLazDttY0+ZBfgc2GmR4IPtsp80byNgJBpX4bEfKcBD7bKctq95ugYGqN4ehG9BY2sZ4sCWzHU4dH2LpbGcdttlOm0uwa2S2MzRlmIfh2c5QYrYzrAiznXUYZztDGZVyWKOZxuXuiJx1Hl7inqA0jkMMeP0jSny2I9tlhAX1NqXjIxh1fGSJ67ifk+IWFjxOJ2WUpbOdtdnGmhYX8ju60SDDo9lnOy3uaMZOsFqJz3akDFdjn+20uKuV+GxHGrpRjaVtjMdYMtvh1PHVLZ3trM0222lOEOwame2MTRnmcXi2M5aY7YwrwmxnbcbZzlhGpRzXaKZxuTsiZ53XKHFPUBrH1Q14/WuW+GxHtsuaFtTblI6vyajja5W4jvs5KW5hweN0UsZbOtuZyHdKQdYJ1BMaDTI8gX220x6fwNgJJpb4bEfKcCL7bKc9PrHEZzvS0I1vLG1jvLYlsx1OHV/H0tnORL4X2Yt2AvW6KcO8Hp7trEvMdtYrwmxnIuNsZ11GpVyv0UzjcndEzjqvX+KeoDSO6xjw+t0Sn+3IdnEtqLcpHXcZddwrcR33c1LcwoLH6aSELZ3tTGAba8JZz3YijQYZjrDPdsJuhLETREt8tiNlGGWf7YTdaInPdqShCzeWtjFusmS2w6njzZbOdibwHVJctGc7LSnD3IpnOy3EbKe1CLOdCYyznRZGpWxtNNO43B2Rs85tJe4JSuPYbMDr36DEZzuyXTawoN6mdHwDRh3fsMR13M9JcQsLHqeT8itLZzvj+caaDsjvrxsNMvxr9tmO2/Frxk6wUYnPdqQMN2Kf7bgdG5X4bEcaul81lrYx3tiS2Q6njk+ydLYznu8w03aCXSOznU1ShnlTPNvZhJjtbFqE2Q7jCORtwqiUmzaaaVzujshZ581K3BP80Tga8Po3L/HZjmyXzS2otykd35xRx7cocR33c1LcwoLH6aRsaelsZy22saY5ayfbVo0GGd6KfbbTHN+KsRNsXeKzHSnDrdlnO83xrUt8tiMN3ZaNpW2Mt7FktsOp49taOttZi++9naLtZNsuZZi3x7Od7YjZzvZFmO2sxTjb2Y5RKbdvNNO43B2Rs847lLgnKI3jtga8/h1LfLYj22VHC+ptSsd3ZNTxnUpcx/2cFLew4HE6KTtbOttZk22s8bLOZNul0SDDu7DPdjxvF8ZOsGuJz3akDHdln+14WfV2CwxUvTkM3c6NpW2Md7NktsOp47tbOttZk28nW9HOZNsjZZj3xLOdPYjZzp5FmO2syTjb2YNRKfdsNNO43B2Rs857lbgnKI3j7ga8/r1LfLYj22VvC+ptSsf3ZtTxfUpcx/2cFLew4HE6KftaOttZg28zRtZ7O/s1GmR4v0Z+3P1LfIYi671/Y0bATLhGZhXSoOzbWNpG7wBLZhWcenmgYUPP0SYHGtDxYhrUcYYM6kGNBhk+yIBBPbjEDaqs98E9BpUNK2aJQeXUy/YSN6iyTdotN6hjGb+KCfntaDTIcIeBztrBqGydJW6cpQw7DUzvO0t8Pd4GQx+3xNBz6niixJdIZJskDPSXySW+DCjtxGRDTpwpvZzMqJeHlLhe+tkzt7DgcdqzKSWu47KNpxiYoHHqYTEdwjHAIfRaI+FwS0Ty1NrpetHOjnBrONzZHnU73FhHON4W9doS0XA00tHZ0S74j3kJNxHraEu0/oQF+T200SDDhxKdoFDmD2Xs/IeVuEMoZXgY0QkKleFhzOv2vZziPGgf08/MYOfwyjdrxjUVtB+7p8LYkB584A+ZzpPnjiDKN7Ubo2MuoU9l7MyHM3YQKFeJm+ymLnhCdh2em3Dbwm7Mbelobmlv6wy3t8YSkURTpDPSXbnmUnZOuU4zJNdpKblKY1TtFH9EdgsM0HhOT43IR8g+aMJgTDXgVk0t8SWG7nYON496F8rjkSXukkvFPNLAdHuGIaMwQ2Ns3cKCd4QhWcw0JIuZBQw8uXg2pRf7DV6lNqUjB3/GdGD/waVtB+TAd6QBW8rY3h6nDKVTUePQMxwnTxnk0imIacJ+c8kEOlizdDMct7DgHWnIIM7SzHBywHi5ypE8zzJgGA5gNgwqVOTZZvk4MoXWeXZjaRoYzraAejkbDNTdbZ9cMudsnzkAy4tERN/obPESnYlIU0tbuN1rjjQ3J6KJlubWaGeiKRrrbIl70Vgk3BZvcRNeazze0hTpaGlOtHV2NCeg0fY6I5FoZ1t7h9cUbo61u62dkZibiLZExOS3M9LS2RlpbW6ORSKdza2J1jYxYRXT4Fa3qaWlzW0OR9rCptpnDphpcg0KuVY2IKYtg8JcGweFuYYHhbkGBoUDS2RQ8FXilh9fyklwGp2jSnRQONCQ0TmKYVDItczH2T7zSnRQMNU+835Gy4/zU8uPR1PLj25hwXftn/M5SKFYjEuZRnYXKBmWWyLDQrGOKfH2kB3mGAMD+7GGnJxjDS6LHm1IFgsMyWKBwWVRU3pxcIkvi5rSgZgFy6LHGFgWZWxvL9azLIrDj/abSybQ8TvO5Az4GEMG8TiDM2DJ83EGDEO7JcuixzA6RcnG0jQw7YZmWMkiLItyts/xjDPgGOMM2FT7HE+0D/cGL872OcGQ/TyBQQ65Vmo45XCiITmcGGCZvJQHcoJdNj2GTsJJNjoJJxl2Ek4y4CR0FMlJKHB3LKuRO5kRi9NJ6DA0CJ0cwEkodJctZ/uc0sg3sHM6Caba5xSDqy2bpmbf3MfSbcp2LF2rx6k7p7LZ9tasNpK48hGGHLDXcboGJrmmbSj3mDeivPR5XMjtqJQZ6kxcFZZYC39BnfM0xs5puCN6v+SOeBpnR+yxmOZ4PJ3bYnI/POW1mK0/TgO4LfDpJW2BXVYLfEaPBbaiY5/RY4Fd76hepc/jop6Gcr01qkufxzN7Gsr1FlvQoxb3NJSYClvQUGf1NJTrTbDA9C3paSjXW9uChjq7p6Fcz7PAPT+np6Fcbz0LetTSnoYSz5YtaKhlPQ3lemELGmp5T0O5XtSChjq3p6Fcr9mChjqvp6Fcr9WChlrR01Cut4EFDbWyp6Fc7wkLlpDO72ko1/u1BT3qgp6Gcr2NLWioC3sayvU2saChLuppKNfbzIKGurinoVxvCwsa6pKehnK9rSxoqEt7Gsr1trGgoS7raSjX286Chrq8p6FcbwcLGuqKnoZyvZ0saKgrexrK9XaxoKGu6mko19vNgoa6uqehXG8PCxrqmp6Gcr29LGioa3sayvX2saChrutpKNfbz4KG+g1nQ8kjFuqdzLtlktkxqNHKmCtg6s1ft6DQasfrN4Z4PNMCHhdbwONZFvC4xAIez7aAx3Ms4HGpBTwus4DH5RbweK4FPJ5nAY8rLOBxpQU8nm8BjxdYwOOFFvB4kQU8XmwBj5dYwOOlFvB4mQU8Xm4Bj1dYwOOVFvB4lQU8Xm0Bj9dYwOO1FvB4nQU8/sYAjw4rj5Fmhwg82GHPHHbmq2GyzRpS19cLed8g6EZBNwm6WdAtgm4VdJug3wq6XdAdgu4UdJeguwX9n6B7Gn/CuLcxBarOJJWgq6G4G4i4G4m4m4i4m4m4W4i4W4m424i4e1NxMOT7cQJt8H46YE5hFbLg3eqynguetTBd6KFtv2PiSx6lDdvnd0T7sD6Q8LJ5L1QOv2c0WlAOvyfkwH0gIONDAO/3jDK9z5BM7yuCbt3HKIf7Dcnh/iLoFuPDG+9+Rpn+wZBM/2Bat4Qcri9RORjTI9GfGB+wZT0IK1R+fzSkR38sgo36I6McHjAkhweKYKMYHzp6DzDK9E+GZPqnIujWnxjl8KAhOTxYBN1ifFjsPcgo04cMyfShIox/N5SoHIzpkehPjA/0sx68Fyq/hw3p0cNFsFEPM8rhz4bk8Oci2CjGTQ7enxll+hdDMv1LEXTrL4xy+KshOfy1CLrFuDnF+yujTP9mSKZ/K8L4d2OJysGYHon+xLiBKGujT6Hy+7shPfp7EWzU3xnl8A9DcvhHEWwU46Yq7x+MMv2nIZn+swi69U9GOTxiSA6PFEG3GDfDeY8wyvRRQzJ9tAjj300lKgdjeiT6E+OGxayNhYXK7zFDevRYEWzUY4xyeNyQHB4vgo1i3MTpPc4o0ycMyfSJIujWE4xyeNKQHJ4sgm4xbr71nmSU6VOGZPpUEca/m0tUDsb0SPQnxg3SWRuZC5Xf04b06Oki2KinGeXwjCE5PFMEG8W4adx7hlGmzxqS6bNF0K1nGeXwnCE5PFcE3WLc7O89xyjT5w3J9PkijH+3lKgcjOmR6E+ML2RkvThRqPxeMKRHLxTBRr3AKIcXDcnhxSLYKMaXVLwXGWX6kiGZvlQE3XqJUQ4vG5LDy0XQLcaXi7yXGWX6iiGZvlKE8e/WEpWDMT0S/YnxBbCsF7UKld+rhvTo1SLYqFcZ5fCaITm8VgQbxfhSnPcao0z/ZUim/yqCbv2LUQ6vG5LD60XQLcaXGb3XGWX6hiGZvlGE8e+2EpUDrHOIuc6/Zahze+wnLJN83m6JPO+whM87LeHzLkv4vNsSPv/PEj7vYeRTvn8tX0qHh5I2ONmBm//rDciZm8cbLODxRgt4vMkCHm+2gMdbLODxVgt4vM2QjefgMdLcagTXFL89uD8vXD7scNggtqdsAvRV3hT9+i1Bbwt6R9C7gt4T9L6gDwR9KOgjQR8L+kTQp4I+E/S5oC8aneyDat5s7Hp4zVtE3NtE3DtE3LtE3HtE3PtE3AdE3OdE3BepOOnQDXIyCwAwcBvTDxtLXhk9+QfK4svGn/7/Gze6TMCeL/fK1IcMKwrydCKJ9SXjisy/LZn52MLnR5bw+bElfH5iCZ+fWsLnZ5bwyWEv29t+9KqzVmDx6nih9pNxRcN701DbcNeZcYXEe8uSOjOuuHhvW1JnxhUc7x1L6sy4IuS9a0mdGVeYvPcsqTPjipX3viV1ZlwB8z4oUp3d7gVPXXzOOFf6j6Gn+BCXWQ4qeF8wtv1/mOayiXiiDdY5xKzvXzPUmVqZ5ebzGwY+m2NuW7y5ucUkn/9l4LO9vbklFm9tMsnntxzt3tEcT0Rawib5/I6Bz1hTNJFoisRM8vk9A59NnhtvCrckTPL5AwOfbe1uU3Nra4dJPv/HwKeXaI10tsXaTfLp9Gdo9/a429HptUne+jtdT6uHp9TD0+nhqfTwNHp4Cj08fR6eOv81uB5R3v1ruNj+Bbj+Blz/F1x/C66/A9ffg+sfwPX/wLUUzo/X4n+ZoHJBFYIqBVUJ6iWouv9Pi/yDncz6tK793cKCF+rvGPHxHF4+o8awvZ/8NCVb9cWCGiGXWkG9BfVRSq2cOZlYjeJqibjeRFyfVBwMlbzCymrUQg1ETX8mRzDherVMWLKOvVmwfpJXH8ZOUMzOW9bTecnOWyfk0ldQvaAG3HnriE7Zl4irJ+IaitB5yxg7bx1j5+3L2HnrGTtvg6Wdt7yn85Kdt5+QS6Og/oIG4M7bj+iUjURcfyJuQBE6bzlj5+3H2HkbGTtvf8bOO8DSzlvR03nJzjtQyGWQoMGChuDOO5DolIOIuMFE3JAidN4Kxs47kLHzDmLsvIMZO+8QSztvZU/nJTvvUCGXYYKGCxqBO+9QolMOI+KGE3EjitB5Kxk771DGzjuMsfMOZ+y8IyztvFU9nZfsvCOFXEYJGi0XGXHnHUl0ylFE3GgibrUidN4qxs47krHzjmLsvKMZO+9qlnbeXj2dl+y8Y4RcVhc0VtA43HnHEJ1ydSJuLBE3rgidtxdj5x3D2HlXZ+y8Yxk77zhLO291T+clO+8aQi5rClpL0HjcedcgOuWaRNxaRNz4InTeasbOuwZj512TsfOuxdh5xzN2AqVMlzrMiipCdQ9eD14PXg9eD14PXg9eD14PXsnjSX/wxurMPOAGcH09uP4NuL4OXF8Lrq8B11eD66vA9ZXg+gpwfTm4vgxcXwquLwHXF4Pri8D1heD6AnB9PrheCa5XgOvzwPW54Ho5uF4GrpeC63PA9dngegm4PgtcLwbXX9Zkrr8A15+D68/A9afg+hNw/TG4/ghcfwiuPwDX74Pr98D1u+D6HXD9Nrh+C1y/Ca7fANevg+t/gevXwPWr4PoVcP0yuH4JXL8Irl8A18+D6+fA9bPg+hlw/TS43rB35noDcN0GrlvBdQu4bgbXTeA6Cq4j4DoMrj1w7YLr9cH1euB6XXC9DrheG1xPBNcTwPV4cL0WuF4TXK8BrseB67HgenVwPQZcrwauR4PrUeB6JLgeAa5P6JO5Ph5cJ8H1ceB6Abg+FlwfA66PBtfzwfU8cH0UuJ4LrueA69ngeha4ngmuZ4DrI8H1EeB6OrieBq4PB9dTwfVh4PpQcD0FXB8CrieD6wS4joPrTnDdAa5HgHUg+CgVPmqFj2JXA9fw6Q18ugOf/owD13DBGC4owwXn8eAarlHBNSy4xtUHXMPtz3B7NNw+3QCu4Y5LuCMT7tgcAK7hJi+4CQxuEhsCruG+ErjvRO1LucX5KUwQvycKWlvQOoLWFbSeoPUFuYI8QWFBEUFRQU2CmgW1CGoV1CZoA0EbCvqVoF8L2kjQxnLtSNAmgjYVtJmgzQVtIWhLQVsJ2lrQNoK2FbSdoO0F7SBoR0E7CdpZ0C6CdhW0m6DdBe0haE9BewnaW9A+gvYVtJ+g/QUdIOhAQQcJOlhQTFC7oA5BnYLighKCJgs6RNAUQYcKOkzQVEGHC5omaLqgIwQdKWiGoJmCZgmaLWiOoLmCjhI0T9B8QUcLOkbQsYIWCDpOUFLQ8YJOEHSioJMEnSzoFEGnCloo6DRBpws6Q9AiQWcKWizoLEFLBJ0t6BxBSwUtE7Rc0LmCzhO0QtBKQecLukDQhYIuEnSxoEsEXSroMkGXC7pC0JWCrhJ0taBrBF0r6DpBvxF0vaAbBN0o6CZBNwu6RdCtgm4T9FtBtwu6Q9Cdgu4SdLeg/xN0j6B7Bf1O0O8F3SfofkF/EPRHQQ8I+pOgBwU9JOhhQX8W9BdBfxX0N0F/F/QPQf8U9IigRwU9JuhxQU8IelLQU4KeFvSMoGcFPdf/J52WoczJhEmp/26BoZoVr93tsXur3u6pc7GeF79fEPSioJcEvSzoFUGvCnpN0L8EvS7oDUFvCnpL0NuC3hH0bv+fHoj0AzoXAv+HpK7fE/neF/SBoA8FfSToY0GfCPpU0GeCPhf0haAvBf1b0H8EfSXoa0HfCPqvoG8FfSfoe0E/CPpffymkVGHpU9hAZdOnsBFxHxBxHxJxHxFxHxNxnxBxnxJxnxFxnxNxXxBxXxJx/ybi/kPEfUXEfU3EfUPE/ZeI+5aI+46I+56I+4GI+x8RJxtXxkklSx3yllYu9X+0uhZ5ywSVC6oQVCmoSlAviSGoRlCtoN6C+giqE9RXUL2gBkH9BDUK6i9ogKCBggYJGixoiKChgoYJGi5ohKCRgkYJGo0VMDSga0XKiLhyIq6CiKsk4qqIuF5EXDURV0PE1RJxvYm4PkRcHRHXl4irJ+IaiLh+RFwjEdefiBtAxA0k4gYRcYOJuCFE3FAibhgRN5yIG0HEjSTiRhFxo/PoDKuJvGMErS5orKBxgtYQtKagtQSNFzRB0ERBawtaR9C6gtYTtL4gV5AnKCwoIigqqElQs6AWQa2C2gRtIGhDQb8S9GtBG+HOsBpRkTFE3OpE3FgibhwRtwYRtyYRtxYRN56Im0DETSTi1ibi1iHi1iXi1iPi1ifiXCLOI+LCRFyEiIsScU1EXDMR10LEtRJxbUTcBkTchkTcr4i4XxNxG+XRGTYWeScJ2kTQpoI2E7S5oC0EbSloK0FbC9pG0LaCthO0vaAdBO0oaCdBOwvaRdCugnYTtLugPQTtKWgvQXsL2kfQvoL2E7S/oANwZ9iYqMgkIm4TIm5TIm4zIm5zIm4LIm5LIm4rIm5rIm4bIm5bIm47Im57Im4HIm5HIm4nIm5nIm4XIm5XIm43Im53Im4PIm5PIm4vIm5vIm4fIm5fIm4/Im5/Iu6APDrDgSLvQYIOFhQT1C6oQ1CnoLighKDJgg4RNEXQoYIOEzRV0OGCpgmaLugIQUcKmiFopqBZgmYLmiNorqCjBM0TNF/Q0YKOwZ3hQKIiBxFxBxNxMSKunYjrIOI6ibg4EZcg4iYTcYcQcVOIuEOJuMOIuKlE3OFE3DQibjoRdwQRdyQRN4OIm0nEzSLiZhNxc4i4uUTcUUTcPCJuPhF3NBF3TB6d4ViRd4Gg4wQlBR0v6ARBJwo6SdDJgk4RdKqghYJOE3S6oDMELRJ0pqDFgs4StETQ2YLOEbRU0DJBywWdK+g8QSsErRR0vqALcGc4lqjIAiLuOCIuScQdT8SdQMSdSMSdRMSdTMSdQsSdSsQtJOJOI+JOJ+LOIOIWEXFnEnGLibiziLglRNzZRNw5RNxSIm4ZEbeciDuXiDuPiFtBxK0k4s4n4i7IozNcKPJeJOhiQZcIulTQZYIuF3SFoCsFXSXoakHXCLpW0HWCfiPoekE3CLpR0E2CbhZ0i6BbBd0m6LeCbhd0h6A7Bd0l6G5B/yfoHtwZLiQqchERdzERdwkRdykRdxkRdzkRdwURdyURdxURdzURdw0Rdy0Rdx0R9xsi7noi7gYi7kYi7iYi7mYi7hYi7lYi7jYi7rdE3O1E3B1E3J1E3F1E3N1E3P8Rcffk0RnuFXl/J+j3gu4TdL+gPwj6o6AHBP1J0IOCHhL0sKA/C/qLoL8K+pugvwv6h6B/CnpE0KOCHhP0uKAnBD0p6ClBTwt6RtCzgp4T9DzuDPcSFfkdEfd7Iu4+Iu5+Iu4PRNwfibgHiLg/EXEPEnEPEXEPE3F/JuL+QsT9lYj7GxH3dyLuH0TcP4m4R4i4R4m4x4i4x4m4J4i4J4m4p4i4p4m4Z4i4Z4m454i45/PoDC+IvC8KeknQy4JeEfSqoNcE/UvQ64LeEPSmoLcEvS3oHUHvCnpP0PuCPhD0oaCPBH0s6BNBnwr6TNDngr4Q9KWgfwv6j6CvBH2NO8MLREVeJOJeIuJeJuJeIeJeJeJeI+L+RcS9TsS9QcS9ScS9RcS9TcS9Q8S9S8S9R8S9T8R9QMR9SMR9RMR9TMR9QsR9SsR9RsR9TsR9QcR9ScT9m4j7DxH3FRH3dR6d4RuR97+CvhX0naDvBf0g6H9SWQeKvILKBJULqhBUKahKUC9B1YJqBNUK6i2oj6A6QX0F1QtqENRPUKOg/oIGCBooaJCgwQMR098QFfkvEfctEfcdEfc9EfcDEfc/Ik5WHMeFiLgyIq6ciKsg4iqJuCoirhcRV03E1RBxtURcbyKuDxFXR8T1JeLqibgGIq4fEddIxPUn4gYQcQOJuEFE3OCBmc4gH7DCHQUqqI4xKfXfLSx44/mwjH69ZAIjnyHA55CBKYEP6BF4Fp+cAneoUMbM8JnVjEeSDOTjC/ZwibtaDjkUfMYwo0zXccwoAXedQ4x1XteSOpcx1nk9S+pczljn9YtUZ7ew4LmM8qsut2Pw8Rw7+AxbwmfEEj6jlvDZ5NhhO5odPttxfi/eOuM2KZS/xirxZKcXf1u3OHboZKslfLZZwucGlvC5oSV8/soSPn9tCZ8bWcLnxpbwOckSPjexhM9NLeFzM0v43NwSPrewhM8tLeFzK0v43NoSPrexhM9tLeFzO0v43N4SPnewhM8dLeFzJ0v43NkSPnexhM9dLeFzN0v43N0SPvcwxGcpP7Pcs0h1dgsL3l6M8utjybOsvR07+NzHEj73tYTP/Szhc39L+DzAEj4PtITPgyzh82BL+IxZwme7JXx2WMJnpyV8xi3hM2EJn5Mt4fMQS/icYgmfh1rC52GW8DnVEj4Pt4TPaZbwOd0SPo+whM8jLeFzhiV8zrSEz1mW8DmbmU/u/aNl1Y5TW81f7zklXu9yQ/WeW+L1rjBU76McM/2Rey1+HqMs66vtqPN8hjr/9M3ETq+22g67e7RjB5/HWMLnsZbwucASPo+zhM+kJXwebwmfJ1jC54mW8HmSJXyebAmfp1jC56mW8LnQEj5Ps4TP0y3h8wxL+FxkCZ9nWsLnYkv4PMsSPpdYwufZlvB5jiV8LrWEz2WW8LncEj7PtYTP8yzhc4UlfK60hM/zLeHzAkv4vNASPi+yhM+LLeHzEkv4vNQSPi+zhM/LLeHzCkv4vNISPq+yhM+rLeHzGkv4vNYSPq+zhM/fWMLn9ZbweYMlfN5oCZ83WcLnzZbweYslfN5qCZ+3WcLnby3h83ZL+LzDEj7vtITPuyzh825L+Pw/S/i8xxI+77WEz99ZwufvLeHzPkv4vN8SPv9gCZ9/tITPByzh80+W8PmgJXw+ZIjPMmY+HwZYhb4fc5qhd0UqmOv8Z8Y6y+8xcGF9OYgP6+tBdvSTvzh28PlXS/j8myV8/t0SPv9hCZ//tITPRyzh81FL+HzMEj4ft4TPJyzh80lL+HzKEj6ftoTPZyzh81lL+HzOEj6ft4TPFyzh80VL+HzJEj5ftoTPVyzh81VL+HzNEj7/ZQmfr1vC5xuW8PmmJXy+xcwnXicudD1xF7EIO7iad910rIFzqd62QI5DmOU4zoAc32GWI/e5ZrLeaxqo97sW1HstA/V+z4J6jzdQ7/ctqPdEA/X+wIJ6r2Og3h9aUO91DdT7Iwvqvb6Ben9sQb09A/X+xIJ6RwzU+1ML6t1koN6fWVDvFgP1/tyCercZqPcXFtR7QwP1/tKCev/KQL3/bUG9NzJQ7/9YUO9JBur9lQX13tRAvb+2oN6bG6j3NxbUe0sD9f6vBfXe2kC9v7Wg3tsaqPd3FtR7ewP1/t6Ceu9ooN4/WFDvnQ3U+38W1HtXA/WWgKVe790N1DtkQb33NFDvMgvqvbeBepdbUO99DdS7woJ672+g3pUW1PtAA/WusqDeBxuody8L6t1uoN7VFtS700C9ayyod8JAvWstqPchBurd24J6H2qg3n0sqPdUA/Wus6De0wzUu68F9T7CQL3rLaj3DAP1brCg3rMM1LufBfWebaDejRbUe46Beve3oN5HGaj3AAvqPc9AvQcarrdbWPAkXkM5/37xECOPg0pchuMNyXA8I4+DmWWoQhmzLIcw8NnR0tIabfNaZJsU2hbh1taW9uZ4zGSdh4YY/ahyPv0z0Vckf6PK+WU4LMRX71HlpW1vpAzHGpDhcEYZji1xGdaV0zbbLSx4IxhlWGeBHq5uQIYjGWW4ermZcY9blqNCdvA52hI+V7OEzzGW8Lm6JXyOtYTPcZbwuYYlfK5pCZ9rWcLneEv4nGAJnxMt4XNtS/hcxxI+17WEz/Us4XN9S/h0LeHTs4TPsCV8RizhM2oJn02W8NlsCZ8tlvDZagmfbZbwuYElfG5oCZ+/soTPX1vC50aW8LmxJXxOsoTPTSzhc1NL+NzMEj43t4TPLSzhc0tL+NzKEj63toTPbSzhc1tL+NzOEj63t4TPHSzhc0dL+NzJEj53toTPXSzhc1dL+NzNEj53t4TPPSzhc09L+NzLEj73toTPfSzhc19L+NzPEj73t4TPAyzh80BL+DzIEj4PtoTPmCV8tlvCZ4clfHZawmfcEj4TlvA52RI+D7GEzymW8HmoJXweZgmfUy3h83BL+JxmCZ/TLeHzCEv4PNISPmdYwudMS/icZQmfsy3hc44lfM61hM+jLOFzniV8zreEz6Mt4fMYS/g81hI+F1jC53GW8Jm0hM/jLeHzBEv4PNESPk+yhM+TLeHzFEv4PNUSPhdawudplvB5uiV8nmEJn4ss4fNMS/hcbAmfZ1nC5xJL+DzbEj7PsYTPpZbwucwSPpdbwue5lvB5niE+y5j5XAH4LPQMxCED7ajzSsY631Jnps6rMdf5/Gx99NwCwkN1ecqvxVd+3oT+ebdFix/WxP7daNdWGmvt/t3SkVYKa53uYbU1J7pirdu/27rrYqz1+hfQD8LZWOv3L6hPuRDL7V9g/4xmsLz+Bff1sMIKF44Vif8E5kVYsBISzYsyYQk0r4kBS9nGZozV2W0s7/mufHndxXqBqqPbPawXaXm53cF6yUf2bYn8sV72b8fWfLFe0elES35Yr2r1K5rIB+u1XLoaDY71r9x63xQU6/UgfcgNhvVGsP7oBsF6M2jfbsmN9VZwO9GRC+vtfGxOix7rnfzsV1iH9W42VqQAW+g5IKyW+q+w3cKCd0GIj88WRpvdymiz2xht9gaMNntDRpv9K0ab/WtGm70Ro83emNFmT2K02Zsw2uxNGW32Zow2e3NGm70Fo83ektFmb5Wv/6qZm27NODfdhnFuui3j3HQ7xrnp9oxz0x0Y56Y7Ms5Ndyp0fgTmpjsXPtdKz013KRwrPTfdlXFuuhvj3HR3Biw1N92jvx3rdhcy+nZ7Mvp2ezH6dnsz+nb7MPp2+zL6dvsx+nb7M/p2BzD6dgcy+nYHMfp2BzP6djFG366d0bfrYPTtOhl9uzijb5dg9O0mM/p2hzD6dlMYfbtDGX27wxh9u6mMvt3hjL7dNEbfbjqjb3cEo293JKNvN4PRt5vJ6NvNssS3u4jRt5vN6NvNYfTt5jL6dkcx+nbzGH27+Yy+3dGMvt0xjL7dsYy+3QJG3+44Rt8uyejbHc/o253A6NudyOjbncTo253M6Nudwujbncro2y1k9O1OY/TtTmf07c5g9O0WMfp2ZzL6dosZfbuzGH27JYy+3dmMvt05jL7dUkt8u4sZfbtljL7dckbf7lxG3+48Rt9uBaNvt5LRtzuf0be7gNG3u5DRt7uI0be7mNG3u4TRt7uU0be7jNG3u5zRt7uC0be7ktG3u4rRt7ua0be7htG3u5bRt7uO0bf7DaNvdz2jb3cDo293I6NvdxOjb3czo293C6Nvdyujb3ebJb7dJYy+3W8ZfbvbGX27Oxh9uzsZfbu7GH27uxl9u/9j9O3uYfTt7mX07X7H6Nv9ntG3u4/Rt7uf0bf7A6Nv90dG3+4BRt/uT4y+3YOMvt1DjL7dw4y+3Z8Zfbu/MPp2f2X07f7G6Nv9ndG3+wejb/dPRt/uEUbf7lFG3+4xRt/ucUt8u0sZfbsnGH27Jxl9u6cYfbunGX27Zxh9u2cZfbvnGH279xh9u/cZfbsPGH27Dxl9u48YfbuPGX27Txh9u08ZfbvPGH27zxl9uy8YfbsvGX27fzP6dv9h9O2+YvTtvmb07b5h9O3+y+jbfcvo233H6Nt9z+jb/cDo2/2P0bdzBtjh213G6NuFBvD5dmUD+Hy78gF8vl3FAD7frnIAn29XNYDPt+s1gM+3qx7A59vVDODz7WoHOGy+Xe8BDptv1ycIVkDfri4YViDfrm9QrAC+XX1wrJy+XUM+WDl8u375YWl9u8Z8sTS+Xf/8sXx9uwHdwfLx7QYO4PPtBnUTi/LtBncfq4tvN6QQLOTbDS0MK8u3G1YoFvDthg/g8KF+whoxgMcfk1gjB/D5dqMYsJRvN9oS3+5yRt9uNUbfbgyjb7c6o283ltG3G8fo263B6NutyejbrcXo241n9O0mMPp2Exl9u7UZfbt1GH27dRl9u/UYfbv1GX07l9G38xh9uzCjbxdh9O2ijL5dE6Nv18zo27Uw+natjL5dG6NvtwGjb7cho2/3K0bf7teMvt1Glvh2VzD6dhsz+naTGH27TRh9u00ZfbvNGH27zRl9uy0YfbstGX27rRh9u60ZfbttGH27bRl9u+0YfbvtGX27HRh9ux0ZfbudGH27nRl9u10YfbtdGX273Rh9u90Zfbs9GH27PRl9u70Yfbu9GX27fRh9u30Zfbv9GH27/Rl9uwMs8e2uZPTtDmT07Q5i9O0OZvTtYoy+XTujb9fB6Nt1Mvp2cUbfLsHo201m9O0OYfTtpjD6docy+naHMfp2Uxl9u8MZfbtpjL7ddEbf7ghG3+5IRt9uBqNvN5PRt5vF6NvNZvTt5jD6dnMZfbujGH27eYy+3XxG3+5oRt/uGEt8u6sYfbtjGX27BYy+3XGMvl2S0bc7ntG3O4HRtzuR0bc7idG3O5nRtzuF0bc7ldG3W8jo253G6NudzujbncHo2y1i9O3OZPTtFjP6dmcx+nZLGH27sxl9u3MYfbuljL7dMkbfbjmjb3cuo293HqNvt4LRt1vJ6Nudz+jbXWCJb3c1o293IaNvdxGjb3cxo293CaNvdymjb3cZo293OaNvdwWjb3clo293FaNvdzWjb3cNo293LaNvdx2jb/cbRt/uekbf7gZG3+5GRt/uJkbf7mZG3+4WRt/uVkbf7jZG3+63jL7d7Yy+3R2Mvt2djL7dXYy+3d2Mvt3/Mfp291ji213D6Nvdy+jb/Y7Rt/s9o293H6Nvdz+jb/cHRt/uj4y+3QOMvt2fGH27Bxl9u4cYfbuHGX27PzP6dn9h9O3+yujb/Y3Rt/s7o2/3D0bf7p+Mvt0jjL7do4y+3WOMvt3jjL7dE4y+3ZOMvt1TjL7d04y+3TOMvt2zjL7dc4y+3fOW+HbXMvp2LzD6di8y+nYvMfp2LzP6dq8w+navMvp2rzH6dv9i9O1eZ/Tt3mD07d5k9O3eYvTt3mb07d5h9O3eZfTt3mP07d5n9O0+YPTtPmT07T5i9O0+ZvTtPmH07T5l9O0+Y/TtPmf07b5g9O2+ZPTt/s3o2/2H0bf7itG3+9oS3+46Rt/uG0bf7r+Mvt23jL7dd4y+3feMvt0PjL7d/xh9O2cgn28XGsjn25UNdNh8u/KBDptvVxEEK6BvVxkMK5BvVxUUK4Bv1ys4Vk7frjofrBy+XU1+WFrfrjZfLI1v1zt/LF/frk93sHx8u7qBfL5d325iUb5dffexuvh2DYVgId+uX2FYWb5dY6FYwLfrP5DDh/oJa8BAHn9MYg0cyOfbDWLAUr7d4IFmfLuy1H8uPv/s8PmJvwkVp85uYcG7PsQnvzOrzdQ5xFznG0J28HmjJXzeZAmfN1vC5y2W8HmrJXzeZgmfv7WEz9st4fMOS/i80xI+77KEz7st4fP/LOHzHkv4vNcSPn9nCZ+/t4TP+yzh835L+PyDJXz+0RI+H7CEzz9ZwueDlvD5kCV8PmwJn3+2hM+/WMLnXy3h82+W8Pl3S/j8hyV8/tMSPh+xhM9HLeHzMUv4fNwSPp+whM8nLeHzKUv4fNoSPp+xhM9nLeHzOUv4fN4SPl+whM8XLeHzJUv4fNkSPl+xhM9XLeHzNUv4/JclfL5uCZ9vWMLnm5bw+ZYlfL5tCZ/vWMLnu5bw+Z4lfL5vCZ8fWMLnh5bw+ZElfH5sCZ+fWMLnp5bw+ZklfH5uCZ9fWMLnl5bw+W9L+PyPJXx+ZQmfX1vC5zeW8PlfS/j81hI+v7OEz+8t4fMHS/j8nyV8OmV28BmyhM8yS/gst4TPCkv4rLSEzypL+OxlCZ/VlvBZYwmftZbw2dsSPvtYwmedJXz2tYTPekv4bLCEz36W8NloCZ/9LeFzgCV8DrSEz0GW8DnYEj6HWMLnUEv4HGYJn8Mt4XOEJXyOtITPUZbwOdoSPlezhM8xlvC5uiV8jrWEz3GW8LmGJXyuaQmfa1nC53hL+JxgCZ8TLeFzbUv4XMcSPte1hM/1LOFzfUv4dC3h07OEz7AlfEYs4TNqCZ9NlvDZbAmfLZbw2WoJn22W8LmBJXxuaAmfv7KEz19bwudGlvC5sSV8TrKEz00s4XNTS/jczBI+N7eEzy0s4XNLS/jcyhI+t7aEz20s4XNbS/jczhI+t7eEzx0s4XNHS/jcyRI+d7aEz10s4XNXS/jczRI+d7eEzz0s4XNPS/jcyxI+97aEz30s4XNfS/jczxI+97eEzwMs4fNAS/g8yBI+D7aEz5glfLZbwmeHJXx2WsJn3BI+E5bwOdkSPg+xhM8plvB5qCV8HmYJn1Mt4fNwS/icZgmf0y3h8whL+DzSEj5nWMLnTEv4nGUJn7Mt4XOOJXzOtYTPoyzhc54lfM63hM+jLeHzGEv4PNYSPhdYwudxlvCZtITP4y3h8wRL+DzREj5PsoTPky3h8xRL+DzVEj4XWsLnaZbwebolfJ5hCZ+LLOHzTEv4XGwJn2dZwucSS/g82xI+z7GEz6WW8LnMEj6XW8LnuZbweZ4lfK6whM+VlvB5viV8XmAJnxdawudFlvB5sSV8XmIJn5dawudllvB5uSV8XmEJn1dawudVlvB5tSV8XmMJn9dawud1lvD5G0v4vN4SPm+whM8bLeHzJkv4vNkSPm+xhM9bLeHzNkv4/K0lfN5uCZ93WMLnnZbweZclfN5tCZ//Zwmf91jC572W8Pk7S/j8vSV83mcJn/dbwucfLOHzj5bw+YAlfP7JEj4ftITPhyzh82FL+PyzJXz+xRI+/2oJn3+zhM+/W8LnPyzh85+W8PmIJXw+agmfj1nC5+OW8PmEJXw+aQmfT1nC59OW8PmMJXw+awmfz1nC5/OW8PmCIT7LEJ8RtzkajbeE417Ei7nhtvbWJjfa1N7c6rV6Ta1NneHWSCTeGm1taWtva3HbvGgk7iWa2iKJFPZajHV+sUh1dgsL3ktlfPIbOtCOdq5glN/Lluh2JWOdX7GkzlWMdX7Vkjr3Yqzza5bUuZqxzv+ypM41jHV+3ZI61zLW+Q1L6tybsc5vWlLnPox1fsuSOtcx1vltS+rcl7HO71hS53rGOr9rSZ0bGOv8niV17sdY5/ctqXMjY50/sKTO/Rnr/KEldR7AWOePLKnzQMY6f2xJnQcx1vkTS+o8mLHOn1pS5yGMdf7MkjoPZazz55bUeRhjnb+wpM7DGev8pSV1HsFY539bUueRjHX+jyV1HsVY568sqfNoxjp/bUmdV2Os8zeW1HkMY53/a0mdV2es87eW1HksY52/s6TO4xjr/L0ldV6Dsc4/WFLnNRnr/D/GOpc7P+3xeSpV4XUErStoPUHrS3xBnqCwlIGgqKAmQc2CWgS1CmoTtIGgDQX9StCvBW0kaONUnTcRtKmgzQRtLmgLQVsK2krQ1oK2EbStoO0EbS9oB0E7CtpJ0M6CdhG0q6DdBO0uaA9BewraS9DegvYRtK+g/QTtL+gAQQcKOkjQwYJigtoFdQjqFBQXlBA0WdAhgqYIOlTQYYKmCjpc0DRB0wUdIehIQTMEzRQ0S9BsQXMEzRV0lKB5guYLOlrQMYKOFbRA0HGCkoKOF3SCoBMFnSToZEGnCDpV0EJBpwk6XdAZghYJOlPQYkFnCVoi6GxB5whaKmiZoOWCzhV0nqAVglYKOl/QBYIuFHSRoIsFXSLoUkGXCbpc0BWCrhR0laCrBV0j6FpB1wn6jaDrBd0g6EZBNwm6WdAtgm4VdJug3wq6XdAdgu4UdJeguwX9n6B7BN0r6HeCfi/oPkH3C/qDoD8KekDQnwQ9KOghQQ8L+rOgvwj6q6C/Cfq7oH8I+qegRwQ9KugxQY8LekLQk4KeEvS0oGcEPSvoOUHPC3pB0IuCXhL0sqBXBL0q6DVB/xL0uqA3BL0p6C1Bbwt6R9C7gt4T9L6gDwR9KOgjQR8L+kTQp4I+E/S5oC8EfSno34L+I+grQV8L+kbQfwV9K+g7Qd8L+kHQ/wTJzhUSVCaoXFCFoEpBVYJ6CaoWVCOoVlBvQX0E1QnqK6heUIOgfoIaBfUXNEDQQEGDBA0WNETQUEHDBA0XNELQSEGjBI0WtJqgMYJWFzRW0DhBawhaU9BagsYLmiBooqC1Ba0jaF1B6wlaX5AryBMUFhQRFBXUJKhZUIugVkFtgjYQtKGgXwn6taCNBG0saJKgTQRtKmgzQZsL2kLQloK2ErS1oG0EbStoO0HbC9pB0I6CdhK0s6BdBO0qaDdBuwvaQ9CegvYStLegfQTtK2g/QfsLOkDQgYIOEnSwoJigdkEdgjoFxQUlBE0WdIigKYIOFXSYoKmCDhc0TdB0QUcIOlLQDEEzBc0SNFvQHEFzBR0laJ6g+YKOFnSMoGMFLRB0nKCkoOMFnSDoREEnCTpZ0CmCThW0UNBpgk4XdIagRYLOFLRY0FmClgg6W9A5gpYKWiZouaBzBZ0naIWglYLOF3SBoAsFXSToYkGXCLpU0GWCLhd0haArBV0l6GpB1wi6VtB1gn4j6HpBNwi6UdBNgm4WdIugWwXdJui3gm4XdIegOwXdJehuQf8n6B5B9wr6naDfC7pP0P2C/iDoj4IeEPQnQQ8KekjQw4L+LOgvgv4q6G+C/i7oH4L+KegRQY8KekzQ44KeEPSkoKcEPS3oGUHPCnpO0POCXhD0oqCXBL0s6BVBrwp6TdC/BL0u6A1Bbwp6S9Dbgt4R9K6g9wS9L+gDQR8K+kjQx4I+EfSpoM8EfS7oC0FfCvq3oP8I+krQ14K+EfRfQd8K+k7Q94J+EPQ/QdKRCAkqE1QuqEJQpaAqQb0EVQuqEVQrqLegPoLqBPUVVC+oQVA/QY2C+gsaIGigoEGCBgsaImiooGGChgsaIWikoFGCRgtaTdAYQasLGitonKA1BK0paC1B4wVNEDRR0NqC1hG0rqD1BK0vyBXkCQoLigiKCmoS1CyoRVCroDZBGwjaUNCvBP1a0EaCNpZ+iqBNBG0qaDNBmwvaQtCWgrYStLWgbQRtK2g7QdsL2kHQjoJ2ErSzoF0E7SpoN0G7C9pD0J6C9hK0t6B9BO0raD9B+wuS35qX33GX30g/WJD8trf8brb8JrX83rP8lrL8TrH8BrD8vq78dq38Lqz85qr8nqn8Vqj8Dqf8xqX8fqT8NqP87qH8pqD8Xp/8Fp78zpz8hpv8Ppr89pj8rpf8Zpb8HpX81pP8jpL8RlFSkPy2jvxujfwmjPzeivyWifxOiPwGh/y+hfx2hPwug/zmgfyegDyrX56DL8+Yl+e3y7PR5bnj8kxveV62PItanvMsz1CW5xPLs3/lubryzFp5Hqw8a1WeYyrPCL1UkDzbUp4bKc9klOcdyrME5Tl98gw8eb6cPLtNnosmzxyT53nJs7LkOVTyjCd5fpI8m0ie+yPP1JHn1cizYOQ5K/IME3k+iDx7Q55rIc+MkOcxyLMO5DkC8h39PwiS75bL97blO9HyfWP5Lq98T1a+gyrf75TvTsr3EuU7f/J9OvmumnwPTL5jJd9fku8Gyfdu5Dst0k+V72LI9xzkOwRyf77c+y73lct91nIPs9yHK/elyn2arwmS+/jkvja5z0vue5L7gOS+GLlPRO6bkPsI5HN1+ZxZPneVzyHlczn5nEo+t5HPMeS6vlznluu+ch1UrgvKdTK5biTXUeS6gpxny3mnnIfJeYn008t+cgEcuc9YhnWcTEiZB6c8lS735cp9qnLfptzHKPf1yX1uct+X3Acl9wXJfTJy34jcRyH3Fcjn7PK5s3wOK59Lyud08rmVfI4jn2vIdX657i3XgeW6qFwnlOtmqwkaI2h1QXLeLeehcl4m5yly7/t4QRMETRS0ttM1yHFKhQGp/wPf3GTokX+7ZguYb5AmbbwmTcnprkmXXT7hN2duDtPCmvsiqf9LEl+23d7vokUwrSX1/6LGOcm1pklNyYQFGsyTNWmLNGlLNWnna9Iu06Rdq0m7WZN2pybt95q0BzVpf9ekPaFJe16T9lLq/9MPL1r0yOe7XwrTXk79H1X+6CYL2u/ZEaa9nfp/1urV7nVXrPkMTHsn9b/Maei774OHPQTTvkr93/y7w7Z4esq5l8C0rzVp32jS/qtJ+1aT9p0m7XtN2g+atP9p0tTLPXfNff2bIbPWPiQrSZNWpkkr16RVaNIqNWl1qTSqbfum0qi2HRXyr/toTdpqmrQxmrTVNWljNWkTU2nPPvD6jL3aXzsHpq2jkcu6mrT1NGnra9JcTZqnSdtA00YbatpoO41cttek7aBJ21GTtpMmbWdN2n6aNjpQI5eDNGkHa9JimrR2TVqHJm2qpo0O17TRsRq5LNCkHadJS2rSjteknaBJO1PTRks0cjlbk3aOJm2pJm2ZJm25Ju1iTRtdommjmzVyuUWTdqsm7TZN2m81abdr0u7XtNEDGrn8SZP2oCbtIU3aw5q0P2vSHtO00eOaNvqXRi6va9Le0KS9qUl7S5P2tibtM00bfamRy781af/RpH2lSftak/aNzkdJefdUG5Wn0qg26p9Ko+QyQJM2UJM2SJM2WJM2RJM2NpVGtdGaqTRKLmtp0sZr0iZo0iZq0tbWpEU1bdSkaaMtNHLZUpO2lSZta03aNpq0bTVpe2jaaG+NXPbRpO2rSdtPk7a/Ju0ATVpC00aTNW00VyOXozRp8zRp8zVpR2vSjtGknappo9M1cjlDk7ZIk3amJm2xJu0sTdoKTRut1LTRdRq5/EaTdr0m7QZN2o2atJs0af+naaPfaeTye03afZq0+zVpf9Ck/VGT9jdNG/1d00YvauTykibtZU3aK5q0VzVpr2nSPtC00ccauXyiSftUk/aZJu1zTdoXmrTvNG30vaaN6sp/+k/Jpa8mrV6T1qBJ66dJa9SkjUylUW20WiqNkssYTdrqmrSxmrRxmrQ1NGnrpdKoNlo/lUa10cYauUzSpG2iSdtUk7aZJm1zTdpOmjbaVSOX3TRpu2vS9tCk7alJ20uTdrCmjWKaNjpSI5cZmrSZmrRZmrTZmrQ5mrTjNW10kkYuJ2vSTtGknapJW6hJO02Tdo6mjZZq2ugKjVyu1KRdpUm7WpN2jSbtWk3abzVtdKdGLndp0u7WpP2fJu0eTdq9mrQHNW30kKaNntbI5RlN2rOatOc0ac9r0l7QpL2haaM3NXJ5S5P2tibtHU3au5q09zRp76fS5iwddfpbzdtmPZP6IJX2xsBdLljQe/wPWeVV/vT/kutG3TH8zbJ9szA1aZ9r0r7UpH2lSftGkxaq8k8r16RVa9JqNWl9NWkNmrQhmrRhmrSRmrTRmrS1NGkTNGnradJcTZqXSnv58Ntfqv3koSth2uapNOp56qEazKmatFmatDmatLNTaZPnv9VnnysemgHTzk+lXTYkdunbP7zSG6ZdrqnDtam0F15/atcjps/fCab16/XT/1vuOfHCD17e+gOYNjCVRj3vH9nLv7wfDyPxqZ+nSWvWpLVq0iZp0jbVpG2pSdtak7azJm1XTdpemrR9NGkHaNIO0qRN1qRN0aQdpkk7XJM2Q5M2S5P2YD//tIc1aY9q0h7XpD2pSXtak/aCJu0lTdormrTXNGlvatLe1qR9rEn7VJP2b03aV5q0HzdRiXDK2M8bb7luxRow6R/9/e97RJP2hCbtKU3aS5q0VzRpb2jS3tKkvadJ+0CT9oUm7d+atK80ad9o0n7QpKkNaFRaWSqN3CumSWtKpf192aMPX7sw1gnTWjT3tWnu21Bz30aatEkazE01922uuW9LzX3baNK202DuoLlvJ819u2ju212TtqcGc2/Nfftq7ttfc99BmrSYBrNDc19cc99kzX2HatKmajCnae47QnPfDM19szVpczWY8zT3Ha2571jNfUlN2gkazJM0952iuW+h5r5bNPdNHETfNyT1f9aon/7XpH4r51U+8pbTykmp325hwasBuNz4rW4sUuNkB2b+f8RXmAbwwwq/wgy+m5qGOJcls/EdVG5d6jfYdp2+R6XBCc7lqbTqVLq6TkU7NQjPRLtDnrjl1p/gvwzUTYbNkpm0EF/ZUYW/uRn8dJ/cwgx+WOFvaQY/3ee3Sppoe89V+FsbwQ93KPxtUvhOFrYXaW2OhFubw+HOuBvrbG5JtEVa3Eh7U6Sto91zI03h1s6WWMR145F4R9TtbG5r6ozH2poiifZYW7PC3pbEjsTbBVRTrLm13UvEmhNue7SlNRJLtLR0xjrbovGWJrfT62j2OsJeorU11tQU62hq87xEvK0p0ZrG3s6IXDJ6s70R/EiTwt/BCH64U+HvCPAZz/9P6+VOSYdo27yC54e9sxne0zZnFzP4ad3Z1UjbZvjfLVmw7LsEhb27Ed7DCYW/hxnZpO3xnmbw0+PhXmbw0/LZ2wx+2i7sYwTfS+vmvil8B2B7rZFwuCUizwxp7XS9aGdHuFWMLO1Rt8ONdYTjbVGvLRENRyMdnR3trdHWmJdwE7GOtkTrT+gKez8jvEfSbbs/wOfzFSLpMesAQjY5bvZyoSvsA/PHzhXSY9VB/tjdblqFfTCBHY5FOty2hBtrao21xFubhJvhiov21niiORxrFw5HuNPzvHhU/AnHO6Nt7Z3NXntzvCXc1C6KS8skljShL17ad2pnxm+OuW3x5uYWhd/BjN/e3twSE/JU+J3M+JGO5ngi0pIeB+PM+LGmaCLRFIkp/AQzfpPnxpvCLWndnMyM39buNjW3tqb15xBmfOEvRzrbYu0Kfwq3fNrjbken16bm2oem8FUZMqiyD2MuOxXaQqg8x8leS3BQ+bWIV26fLITKg/xA+ah5u5Ld1GRXXhuINGhjcFo5EafKobA6GLE6GbHijFgJRqzJjFiHMGKpfm22r0XT4+hUI/iRVoV/uBF8N67wp5nA9zK+13SA7/Dxn8Y/AuCHDOAfaUb+afwZZuSTnnPMTOGbwJ5lRjZpH2y2Gfz0nGOOGfy0jzoX4DPqZto2HGWG/zT+PDP4bQp/vhn8tA98tBn8tA95jBn8tA98rBF8L83/gqQJ/QynbdtxRvgPp+1P0gj/kTT/x5vBT/N/ghH8aBr/RDP46TWhk8zgp+3/yWbw0/b/FDP4ad/qVCP4Tek5+EIj+M1p/TnNDH56DeR0M/jp9e4zzOCn9X+RGfy0/p9pBj+t/4vN4Kf9n7PM4Kf9kyVm8NP+ydlm8NPj7zlm8NP+w1Iz+OnnJcvM4Kft53Iz+Gn7ea4R/Ja0/3CeGfy0/VxhBj9tP1eawU/bz/PN4Kft5wVm8NP280Iz+Gn7dpEZ/LR9u9gMftq+XWIGP21/Lk3hO93HjuAI+VKS3CdXn3ongNpfyOjLuWrvXkWmKlnPC+R1JYhnnAd2BnleAMuvRbyaeF4Ay1P8YPnA5wUyrYrgtYFIw21YRZRTRZTTQKRh368QrPMYsc5kxFrOiMVZx6WMWEsYsZYxYi1mxFrAiMUpe84+tKJEsRYyYnHqBKfsOfXrDEYszr7NqROnM2Jx2ugLGLFKdXxUPrVZ38ptriPKVkGl9QJlQ58Kh3L0G/ItfdWBjRlcnE+FPk7mmfjMedM6dpw+Kz7T0dwgg9oAj+NLTXghlFYdoA6Ok1uwEwIIFjvwkLc6hAnvDRFY1GYdrMxQ5hU+PEAM1VbYEZ6U+u0WFLxIkHrA8os1iaCMBDWJUPLpZUY+4RDCh/z0IuSDdRi3XcjJdORKgAXz9wJ1hPnhtbofxr2a+t/gdO1HamN9iEgrJ+KUfCXvz6O6wbbBemqmHaJeUD1V5dc6JvtNRk8pvaAGsxqnaztzbmgK0q6Ubash0hSW2mAI9RTmrwZ1hPnhtbofxn2U+t/gdNVprKc1RH1gHNRT9aGQGp/6TEr9dgsKLS3UOIX7AZQT5wbtoP1AlV/rmNS7TD+g2omyJ0p2tQSvDUQaXvSpJcqpJcppINKwI1oI1nJGrNMZsRYxYq0oUawljFjLGLEWM2ItYMQ6hxGLU+9LUV66cTBfLBk4dXUlI9ZZjFicuspZx4WMWKXaty9mxEoyYqmHh9jPVPiOk/GV8Hg/KfXbLSj8NHeD5al6wDhYfi3ilZefjK9EyZXyaZV8epuRT5qf3gQ/vQn5qLbsQ6QpLLXWAucMMH9vUEeYH16r+2FcS6rBGhCmDHjO0IeoD4yDcwY1scR+qcKToRjtAMtTfMM4WH6tY7LfuFq9oPp/jdO1nRnl4wZpV8ivass6Ik1hpc6DzNJTmL8PqCPMD6/V/TBuC6SnUKexntYR9YFxUE83RnoK2wbrqZF28BKB9VSVX+uY7DcZPaX0ojchxxqnazszyscN0q6QX9WWfYk0hVWf+g31FOavA3WE+eG1uh/G7Yb0FOo0fimrL1EfGAf1VH3YscanPpNSv92CQlOUaks+/Bavjqgn7mdQ1nx6HQncz1T5tU5XvTDRz+oRP356oGTXQPDaQKRhHWkgymkgymkg0vC8phCsRYxYCxixTmfEOocRayEj1hJGrKWMWJw6cQYj1qmMWCuYsCj7XAhf5zHxJcNKRizOvn0xIxanLeTsj8sYsTjb8RJGLE6d4JQ9V992mOvIqRPLGbFK1U5w8vVL8Jl6xrRVJ3vO/ngmIxZnHS8sUb44/QnOOuLnA3BuGUr9r3G69j3GeXY8hMpT9YBxsPxaxCsvP5l5NiXXekKuSnb9CF4biDQ8z+5HlNOPKKeBSMNjRiFYixixFjBicdZxCSPWMkaslYxYnLK/mBGrpx3zw7qEEYtTJ85gxFrOiMVpv1YwYnHKnlNXOWVfqvaLU1c59WspIxZnO3LqF2cf4tSv8xixFjJicdaxVH05zjpy+hOl2o6l6stdyIhVqn4Op4/Z40/8PPoQp53g5ItLv+Q1XlcthK/zmfiSgVP2nD6AGmvxfjeFL4PZNbRw4D22eA3NyB6sHGto1N66GqerHjLKxwvSzpBf1ZaNRJrCSn1LN2tPGMzfD9QR5ofX6n4Yt1VKKA0IUwa8J6yRqA+MU/KVe8I2KcuuG2wbrKcm2wGWp/iGcbD8Wsdkv3G1ekGtodc4XduZUT5ukHaF/Kq27E+kKazU91Oz9BTmbwR1hPnhtbofxu2B9BTqNNbT/kR9YBzU052QnsK2wXpqph2C7wVX5dc6JvtNRk8pvaDGqRqnazszyscN0q6QX9WWA4g0hTUw9RvqKczfH9QR5ofX6n4Y14H0FOo01tMBRH1gHNTTA1I/6h3//pmvnab8MSxDeB/uD0ba24u7QfuDKr/WMdk/M/2hf0C5KvkMMCKfzkQQ/YH8qrYcSKQprNS3rbP6A8w/ANQR5ofX6n4YNwv1B9h3cH8YSNQHxsH+MA3Zbdg2WE+NtIPrJoLqqSq/1jFpJzN6SukFNf7VOF3bmZGfeJB2hfyqthxEpCmswanfUE9h/oGgjjA/vFb3w7gTkJ5Cncbv8Awi6gPjoJ4ek/pR41OfSanfbkEh7lFtyYcfc2sIWfPhh9tqiPbiw29vVfhDzOA3K/yhRvBb0+07zAh+U1o+w83gdyr8EWb0J83/SCP4kYjCH2UEP57mf7QR/GgafzUj+O3p/jvGCH5bWv9XNyOfdPuONYKfaFL448zIJ83/Gmb4T9v/tQA+51qEwp9gBN+NKHmMdzKhnKiTKl/5ImuC/CGf/woLp6myahGWKb+PqhvkH8/7xgN+oAz8sMbniVVDpJlo07U09Ybl12l4xfWQAZ+N0V2ZyHAGI9YpjFjnMWFRvm0hfB3PyNdAJr4o/7cQrMGMWOVMWDKclOTjawgTX/J6aIliDWPEGs6INYIRayQj1ihGrNFMWDLgj7cUwtdqjHydy8jXGCa+5PXqjFhcY4e8HsuINY4Raw0mLBnw2mmpYG2ewjK73hVtM7veFYmZXe+Kdppd72qKmF3viraYXe+KdihfXY2HqgyoW3B845tXRAO/I6bKr0W88vKTmd+NQPxg+ah+qWQ3kuC1gUjDfXQkUc5IopwGIg3v8SsE6wJGrIWMWOcwYi1hxDqDEWsBI9ZSRqxFjFgrShSLU1cXM2JxyZ4at0tFVzn740pGrFLtj+czYnH2oVKV/VmMWJx2gnOs5bTRnLLnlFep6henb8LZjpyy/yXYiYuZsOQ1nsMWwtdJST6+BjPxxYklwwlJPr6GMPJ1UpIP61RGLC6+5DVeSy8Eq5wJSwYunZDhFEasExmxTmLE4uSLS1dL2Rb2YeSLU1c525HTrpaqvDh1Fa+tlkrf5rRflzBicfpfZzJica4pcPrknHMFzrVH5d+rdexhIC2U+m/2GYDb7WcAw8zwo30GMIyQK7UflpGfziDtDPlVbTmKSFNY6lk+3NsP848EdYT54bW6H8YtTTVcA8KUAe/tH0XUB8Yp+cq9/WeWZ9cNtg3WUzPtEPzbkKr8Wsdov/F0ejGCkCOlF+reBiIN+/RB24tqe7z3rRCs5YxYpzNiLWLEWlGiWEsYsZYxYi1mxFrAiHUuIxZnH+JsxwsYsRYyYq1kxOLs25z6xdmHOO3qL0H2SxmxOG20soXUe1SM/odLvefEiJ9+52C0RhawfLwXR6VT/xUWTlNl1SIs5rp5urrp5m7QD8d7eyms0XliUe/GmWjTUZp6w/LNvgvYFDb7LmBTs9l3AaMJpfNjgDxDSHZjjbRla+CzVFT5tYhXU31qLOIHywfPh8YRvDYQaXjv3jiinHFEOQ1EGh63C8G6gBFrISPWOYxYSxixzmDEWsCIdS4j1nmMWJyyL1VdXcmItYgRi1O/OG3OckasX4LslzJicdZxRYlicfbtxYxYXLKX13hfbqnoaqn6AJxYPeN2z7hty9jRM273jNs94/bPU/alqqvnM2JxyovT5nDK/ixGLM4+xDlul6qNLlV/grOOnL4vZztyyv6XYCcuZsIKOV335xSCNYoRi2udXF6PZsKSAe89LoSvPox8nZTkwzqVEesUJix5vZrDh/Vzl728xu9OFII1mBFrCBOWDJzyWp2JL05dlYGzD5Wq3pdqHX/utpCTLxl6xg77xw4ZTmbCktecex5OSvLxNZSRrxMZ+eIaa2XgHB855XVSkg+L035dwojFOec7kxGL85kO5zoA5/oE5/4c/H7bWJAWSv2nzouX5UxK/XYLC50hVJ6qB4yD5dciXpn58XRyHUvIlTrvnpGfjhDCh/ysQchHteVaRJrCUudkwvfbYP41QB1hfnit7odxn1b89L8BYcqA32+jzkqHcUq+8v229yuy6wbbBuupmXYIB36/TZVf6xjtN55OL6j+T+mFupdqLzzuB20vCmsJI9YKRqzTGbGWM2JdwIi1iBHrvBLl6wxGrAWMWBczYiUZsS5hxOKU1zJGLM7+uJIRi1PvOW0hZzueyYjFaXM4dWIpIxan7BeWKF/nMmJx6gSnb8I5bnO2Y6naL0794uyPpWqjObE49WsxI5aSvZqvwPlNKPXf8DfgoiFUnqoHjIPl1yJeefnJzPUoua5ByDWf74spXtU1TIPlFPs7XjIsZ8Q6nRFrESPWihLFWsKItYwRazEj1gJGLK5vI8mwkBGLsz+uZMTi1C9OeZ3DiMWpX5x9iNOucuoEp10t1b7N2R85+9AFjFic/fGXoF9LGbE4fQA11tan0qC/Dc8jgWmwHJ3PD+9X+eqI+0Kp/2a/4dsW+LwOVX4tIRMTPv/4gHJVsptA8NpApOG9KxOIciYQ5TQQaXhsKgTrAkashYxY5zBiLWHEOoMRawEj1rmMWOcxYnHKvlR1dSUj1iJGLE794rQ5yxmxfgmyX8qIxVnHFSWKxdm3FzNiccleXuPzOkpFV0vVB+DEKtVxm1P2nD4Ap43m9CdKVVd7xu1VN6b1+OT5YfX45KtOv3r8wlWnX6XoF8rAKa9S1dXzGbE45cVpczhlfxYjFmcf4hw7StVGl+qYxllHTt+Xsx05Zf9LsBMXM2GFnK57nArh6wRGvkYx8SWv+zBicT4f4pTXUEa+Tk3yYZ3ChCWvV3P4sLh0QoaTknxYXLLn7Nvc/ZGrD8nr0UxYMnD2x1+CfuHzhgrBGsyINYQJSwZOea3OxBenLZSB00aXqt6Xah1/7mMtJ18y9Pgm9o8dMpzMhCWvOX3yk5J8fHH65Ccm+fjiGmtl4BwfOeV1UpIPi9N+XcKIxbmmcCYjFudzK851Js71L879hfi8oT4gLZT6X+N0tXWynEmp325BwQt83pAqv9bpOlbx8ZPZ5zvA6SrXPoRclewGErw2EGl4bjyQKGcgUU4DkYaf+RaCtZwR63RGrEWMWCtKFGsJI9YyRqzFjFgLGLHOZcTi7EOc7XgBI9ZCRqyVjFicfZtTvzj54mxHTr447QSnTnC241JGLE57j795jn2CSanfbkGhqUn5JtCXUT5VjUP7Jjxle60hVJ7j0H6dKr8W8crLT8avo9oNygf7dYMIXhuINNyGg4hyBhHlNBBpuG8WgnU2IxYnX8uZsOR1L4cHi7uOCxixljJirWDEWsyIxSmvlYxYFzFincuItYgRi1P2SxixzmDE4qzjxYxYSUYstc6HfQsZJqX+i+Ew0tocCbc2h8OdcTfW2dySaIu0uJH2pkhbR7vnRprCrZ0tsYjrxiPxjqjb2dzW1BmPtTVFEu2xthazvkNTW41Dj688+F5Y4Q82gx9R+EPM4EcV/lAz+E0Kf5QZ/GaFP9oMflo/VzOD36rwzZx94KX1f4IZ/JjCn2gGv1Phr20GP67w1zGDn1D46xrBD7sKfz0z+Gn7tr4Z/LR9c83gp+2bZwY/bd/CZvDT9i1iBj9t36Jm8NP2rckMftq+NZvBT9u3FjP47Qq/1Qx+2r61GcGPpO3PBmbwPYW/oRn8tH37lRn8tH37tRn8tH3YyAx+2j5sbAY/3X8nmcFP999NzOCn+++mZvA7FP5mZvDT/tXmZvDT9mcLM/hp/2pLI/jRtP3Zygx+2v5sbQY/bX+2MYOf9q+2NYOf9q+2M4Oftp/bm8FP288dzOCn/asdzeCn7fNOZvDT9nlnM/hp+7yLGfy0fd7VDH7aPu9mBj9tn3c3g5+2z3sYwW9K+597msFP2/+9zOCn7f/eZvDT9n8fM/hp+7+vGfy0/d/PDH7a/u9vBj9t/w8wg5+2/wc6mZDBjsTbxVJ8U6y5td1LxJoTbnu0pTUSS7S0dMY626Lxlia30+to9jrCXqK1NdbUFOtoavO8RLytKdGa5v0gEruQ4KX71cEm5OIl0nYhBvBDbPy3pvHbjbRrBr/DiHw603a5k7ttPdeV33Wck3qQrs4XjoN6VKI2SaR+q29WynBkMpMnDtJh/rtrf/ovy5ufKq8OyMoB5cig6lxhQqZirT2EynMcep+KKr8W8crLT2afSgXiB8sH71OpJHhtQGky4OeWlUQ5lUQ5FNYljFgLGLHOZcRaxIi1jBHrDEasJYxYnHVczIhVqvq1kBHrPEaslYxYnPrFKa9zGLE49YuzDy1nxOLUCU67qvaz1Thdx0JGvz2hxlroW6ug0g52susF02Ig/7bJTD4cytFvWKdqQW2NGVycD/MD/aaDAb6fzyCDkmMVSOf0cRR+jRn8iJJ9tZMtU1ynGh9ZqXTqv8LCaaqsWqer3E34h1TdIP+4v1QDfqAM/LCq88SqIdJMtGmVpt6w/DoNr1Q98PyGskeU/63y12j4gvnribLVvUqGtSCNUYZhnQxhX1Tl9wF8dsbbZ0/efvpkB4VyJAcltyEo367JjBywDlb7YDno9xAUVw7wYDA7Z1y144CqU77jAJTtwSitu3ZPBmwbsMxlkG39HFpbKCfqhHXIb22hHKTD/C/3ypT3Uuq6Nyizj6bMOsQ3zC/Drsns/H1B3cqJPH0Qjyr/6ym+ZPttk2o/SnaKnxp0/89Jl1Wd8tVl2I4HI94UptId3LZ+7fIxaJftGzM84/LqNPVQvw8kylO8N6C8Mqg27gfiGde4An9LS5Vfi3hlHofSPkw/xA+Wj7ItUoa9U9dTp8c6N4sdMXP21HgZEmU9uIbwDQhO5YF5YWgALDk++XCzy7BVsut9OChR1jtdu3UDKgvilxNx2PQ2ELwpNVeyGZAaa6XZ+hYtv2I1lqHG6SpbRlXoCKqaqvxax6Q5zKhmPeLHT/ZKPoa6SnvI6dotyokyFb+qLfsRaQorZd2yTCTMD/sLzA+v1f0wrialWw1O1+69WzKbB6rrwzgl3x+H1xRuPVGfvqhuVLvVE7gNxP1YhrAfT09mp1USdVNpVZq0ak1aDVEvlVYL7jsS3debwJQ8HFydwfOTDdQr5b5QtsnPtvphbYew4P39EFZjDqw9EBa8vxFh9c+BtSfCgvf3R1gDcmDNQljwfnw02MAcWLMRFrwff8ppUA6sOQgL3o+PzhycA+sohAXvx8d5DcmBNQ9hwfvx0ZlDc2DNR1jwfnyc17AcWEcjLHj/MIQ1PAfWMQgL3j8cYY3IgbU3woL3j0BYI3NgHY6w4P3q3joCC/sBZl4JC+4HqPJrEa+m/IBRTle5Qvngx7CjCV4biDRst0YT5YwmyqGw+jNiDWDEGsiINYgRazAj1hBGrKGMWMMYsYYzYmG7lWu83iv503/deK3ug7oL85WDPNQYDTH8/AE4Z4PxIwPUB8Zh2Yz0Kc+PPygbNd/U+R/16D6K54Yc5eh4Vvkon3lGMjsNLrFj/xYuB2M/HC6V90NpNUS9sM8M2xX7zFBu0GeuRPXpSMWbXY5zXah/frLC6xLUf8cJtlxLLbmbLqesSOXg+vRlLAdiqWXPVbfE58aD1AOWb3qJT8miv0YWZo56igZe7sRHivY3JAuli7nmbfiRIjU3o8YSuDw6OT5LPKTbdN7uscm9QFZoVjE7dShfP/S70YetSSgfPmVMuX+YD4gFA+ZDt/xKlU+ZEXVdScTLQE1r8TJsvqexwPsHacrpX2A5/YlyzJ5sktm5YebkkcxTfmopAdZJlY9PaVPp1H+FhdNUWbVO1zYyYQaouunaGU4xgiy5DMkTy+xpNZk2HaypNyy/TsMrVQ/4tBjauaqUbyjduiXV2diUrTC7eyzSHFQfVfnF2mkedKcL5aqrextQmgwnJzP5cFo5EVemwVrOiHU+I9YyRqwzGLEWMGJx1pGzHTnreDojFmcdlzJincuIdQ4j1iJGrJWMWEsYsTh1grM/cvYhTp3glNdiRqwVjFicsj+TEYtT9ucxYnHKi9MWLmTE4pRXqdpCTnlx2pxfgs/EqROc4zaX7OU1Pg28VPSeU/ZnMWJx6j1nHTntBKcPwCmvixmxgryNTc3rVX7qDRZqXeqX8gZLE8rH8QZLE4ord+g3WCT2c2h7Ln77RQaz67GRcAiVh+vooPJrEa/M7Z9es6K2h1Hrnkp2wwheG4i01cE1TIPlDCPKaSDS8LhdCNZSRqxzGbHOYcRaxIi1khFrCSMWp04sY8RawIjFqROc8lrMiMUprzMZsTjldT4jFqeunsGI9Utox/MYsTjlxTkOLWTE4pRXqY5DnPLitPec+sVpczj7I6dOcPpMXLKX13gNplT0nlP2ZzFiceo9Zx057USp+l8XM2KpNRjqVSL8CgM1hx2qKQfePzQAFjUfVvmpV490az3Uq0dq7cHQKzhhXXtQry91Z61Hyc1D+fBaD7Rtw32wHPTbQ3F+az1439K81EKW2a+g0VvN8X5FuGe0AdUv31dt4f31mnL6F1hOf6Ics7LM/xSNBpQWA2n4FYd2gAVPQcGhHP2G9ZX9Yqc8TtiA7XGwD2YlkTeE0lTeM2oyfOyX4sPsvsPitYl61Tlom6j6SlkcWGCbUF8pVnxTr0sHeY2beg2/gbi/n6acsQWWM5Yop464L+TzX5WD43A5FM+69fbulgOxVB82u3afv/5jOUP9x3tz20EaPkWvA6TB50A4UH1DyUL2jcsD9A2zz5uKJ0P8yhuUIezbOFAyVLIIKsN6p6sMcd+uJ+pB9XuI0Z1+T/FQauNEf5QG23gASoNtPBClwTbGz6s6QVoIpcVBWhVKS4A0fBLiZJBWi9IOAWmwrXHINZ49lsd4BvXmYJRGjWfUESoK1+wrZZFIELsPy69FvPLyk3kOSr0iTJ3cqWQ3kOC1AaXJcGIykw+nlRNxZRqsJYxYKxixTmfEWs6IdQEj1iJGrPNKlK8zGLEWMGJdzIiVZMS6hBGLU17LGLE4++NKRixOvee0hZzteCYjFmc7ctovTnmdy4i1kBGLU16cfYjTn+CU1zmMWD12ddXZVS7Zy2v8HLRU9J5T9mcxYnHqPWcdOe3EYkasUvVXj2fEUv6qug/O8eEzS8PnGKS/+jnMDH76nATds1xYPp7Tq3Tqv8LCaXjf9kAzddPu29bpAVwbD3JE6NA8sVbleSZQ1vg8E4pXqh4DGGUS5Aso1NpSvm2rO7LVcB9L7ykYoJETLL+Q90fCKJ96TljmdG27IT5YDvodRnF+ewrqna5tWuPDpyoXx2FdgfdXasqpLbCc2oDlNBRYTkPAcvoXWE7/gOX0tE92OauyfZQdhmcWHZn86b985tJeS5cJj9SHZzXhPRMq/0rwNdx4rX8dy1H9oZ1QRxGa/QJX/s/JsCxjRH1CBBb1jEnVKd8vxcB39A4G1xDT70sxVSAd5p9Rm+Gl1zAaMwQw4buK+CtCqs9WOZl6wzyYB5V/DuBBfUUIY1b41KvaB3MR0MV5tTSmQ2BS9apF9cI81CAeVP5jQb1qwcY/mEf9hnoyM5nNW2+iLMcnDtu03j5punJz3Suv4VeEcBrWFSwveL+fTLGuqPynaHSliuAB1he3K+YB56n14eF0ggd4bGXH9CPmpb7q46CAP05WiX7jpsRNUEXg+AUlBnnPoloaB+ZTAasfHIqriTJqfXiE90rxqObtjE+Nz4r7CKgMgVX6FFbm0MHs1z7NjBvU/gpoe3GgxhRVX3lf3bAMLs6nAnwnu8ev6p5fhbEof0mGw5KZdJj/KmBHRgyjMct8MNVnZHRjGrU3SeWn5ow6nxvqI56nU2VDWWK7OzBPXnOtN9QgXqm5aFBetysyr5V58lpLlA3HHmFcp8yJz9hx+qz0KdoOwYaDrvG4g/Pg8aLah9U+KF89+o2PVcbmvRH97k3wRwXMM8VLuZM7qC6qZHUH6KKjfbqo49BdVKk9nn7Be+H0S6nEdCKfKvMIVB+YH5ap8h8JyqFcnOmo3ir/7wkXp4HgSfFTg+7nHXZbwkqGM5yuQaXNdLLrDtNmgfzbJDP5cKCGVlUnKYsJeUzXYDti3hQmHDJg2/q1y19Bu+APe8LyjnD866F+lxPlYVmqdBlUG89CGJNSv92CQlMshMpzHIdc5lfl1zpdZWtimX8W4gfLhzLDmg97zgDXEH4fBKfywLww7ANYcnzyUc0+kLgPByXKSsTz+2BW/SQyW7Dr4+8RQx7KiTjsbVUQ/FPlVBVYTlXAcmyuD95pLQP+AGSCqCveaS3Dkei+Q0Aa/gDkFKdrvVTaoRrMwzSYUzVph2vSphFpkqfJfTI84uGF6ur4o5Kw7fz6tR8W/qgkvH8WwpqdAwt/VBLePxthzcmBhT8qCe+fg7Dm5sCahbDg/XMR1lE5sPBHJeH9RyGseTmw8Ecl4f3zENb8HFj4o5Lw/vkI6+gcWPijkvD+oxHWMTmw8Ecl4f3HIKxjc2Dhj0rC+49FWAtyYOGPSsL7FyCs43Jg4Y9KwvuPQ1jJHFj4o5Lw/iTCOj4HFv7QG7z/eIR1Qg6srRAWvP8EhHViDqx9EBa8/0SEdZIGS17jt6vh/ereOgIrlPqv3MmTQTyf++YFfstFlV+LeOXlJ+NOnux0lSuUD37L5RSC1wYiDY5FMA2WcwpRDoU1gxFrFiPWbEasOYxYcxmxjmLEmseINZ8R62hGrGMYsY5lxFrAiHUcI1aSEet4RqwTGLHwWKbz6+W1WprT+fXqPmjP8HJXOboH5ocYfvOGcoeeD5wUoD4wDsvmJJ/y/PiDssFvSHd3niKvhyKs7s5T5PUohNXdeYq8Ho2wujtPkderIazuzlPk9XiE1d15iryegLAKmaccm8zGKmSeEkNY3Z2nyOuJTjZWd+cp8npthNXdeYq8XgdhdXeeIq/XRViFzFOOS2ZjwfuxbT8hB1/rIb7g/fnMU+T1+ghLN085OQeWi7Dg/ScjrFNyYHkIC95/CsI6NQdWGGHB+09FWAtzYEUQFrx/IcI6LQdWFGHB+09DWKfnwGpCWPD+0xHWGTmwmhEWvP8MhLUoB1YLwoL3L0JYZ2qwZNg6mY0F7z8TYS3OgbUDwoL3L0ZYZzn6OrY62Vjw/rMQ1hINlgy7J7Ox4P1LENbZOfhqQ3zB+89GWOfkwNoAYcH7z0FYS3NgbYiw4P1LEdayHFi/Qljw/mUIa7kGS4b9ktlY8P7lCOvcHFjbIyx4/7kI6zxHX8dfO9lY8P7zENaKHFgbISx4/wqEtVKDJcPUZDYWvH8lwjo/B18bI77g/ecjrAtyYE1CWPD+CxDWhTmwNkFY8P4LEdZFObA2RVjw/osQ1sU5sDZDWPD+ixHWJTmwNkdY8P5LENalObC2QFjw/ksR1mUaLBnUbq564v7LENblOfjaEvEF778cYV2RA2srhAXvvwJhXZkDa2uEBe+/EmFdlQNrG4QF778KYV2dA2tbhAXvvxphXZMDazuEBe+/BmFdmwNre4QF778WYV2XA2sHhAXvvw5h/SYH1o4IC97/G4R1fQ6snRAWvP96hHVDDqydERa8/waEdWMOrF0QFrz/RoR1Uw6sXREWvP8mhHVzDqzdEBa8/2aEdUsOrN0RFrz/FoR1aw6sPRAWvP9WhHVbDqw9ERa8/zaE9dscWHshLHj/bxHW7Tmw9kZY8P7bEdYdObD2QVjwfnVvHYEVSv1Xz7nuBPF8z5WiXgiVp+oB42D5tYhXXn4yz7nudLrKFcoHP+e6i+C1gUjDa453EeXcRZRDYc1mxJrDiDWXEesoRqx5jFjzGbGOZsQ6hhHrWEasBYxYxzFiJRmxjmfEOoER60RGrJMZsU5hxDqVEWshI9ZpjFinM2KdwYi1iBHrTEasxYxYZzFiLWHEOpsR6xxGrKWMWMsYsZYzYp3LiHUeI9YKRqyVjFjnM2JdwIh1ISPWRYxYFzNiXcKIdSkj1mWMWJczYl3BiHUlI9ZVjFhXM2Jdw4h1LSPWdYxYv2HEup4R6wZGrBsZsW5ixLqZEesWRqxbGbFuY8T6LSMWXnPMtU9u39S1bp+cug+uO+FXM8vRPTA/xPDbh1fu0Pvr7ghQHxiHZXOHT3l+/EHZ7Je65tj3tz/CKmTf3wEIC96f776/gQiL2vdXT9yH94nO1JQjg26f6ExNOXcUWM4dRDnUe4ozktlpCadrXakvwuB3H+EXYWagtClEvfB7irCP4PcUoQ7i9xShTuH3FKGO4PcUYZtXOZn3FNX7uEpGh6bia1DdVN+dlPrtFhiorytiOcJ2C/n8d5yuzyZkwPoRB3lCRSqnrEjl4PrMYCwHYqljDqj+i4/vyLf/wvtn+mCpow1kUO/4wn5aifIfk9Jlib06OmqD2qOeAHG7auqq7lV9BI9vk1K/3cKCp/DnmsGP6MZHWCdsU6Ds8tEvWFYtwuKWna5ukH+sh3C8DuJHzMkTq4ZIM9GmszX1psYQileqHn59E5ajOwV5roYvmF/nPykZQh+GUYZhnQwpH6w7pyAruQ1H+fCXlSlfFGM56PdwFFfu6E9Bhm1a48OnKjeXHYf3Yz9sJuKL+q/KwXG4HIpnVQ48zwKeSns+OptB6R08Mgfeq95trkT5v++XwbwohUm95+XXV0KgPKgo+KglVZ7fUUt43FP5LwfjHj7RcjKqM6wnxbPChOeNQJ7VuR+Yh2uQH2lojCT9SFVWPeIXtw+uC9UmWO+OJOSgky30U6AfA/PfmKefAnUU+ymQJ3UvNefHpzFS5ejGyVqinEL9A6ocimc8d5MB9vO7UD9X+gD7Obx3q2QmHeb/APTzezT9HO8fwj4Ntn24n6vy/Po51huV/35NP6d85q2S/jwrTNjPIc+4n6v8D6J+bsivIfu5Kosax3A/z3cco+w4VU7vAsvpTZRjerzsjcqZzVgOxMLnMPn11ydQf1XtSvVXPG7D/HeC/vo06q9Q33XticeO2US5uM84TrA1St27ydhGyaAbO1T+lzVjh24OIINujqtbE4b5YB7dumm5pgyoTzBe+axwTJuM8s5BeWdr8vrN5+S1On3Z7Jy7pVX1Bbj2q4JKm0fwrNLgO9n7JjP5cChHv2GdpK6sEeBEZ2puOM8HE8tUhpnJ7LyqzmUE7lyEC20Altduyew0lff7VF+Q/f/zPjQe1hMZDkzhmZ1XtrTh9oUBty+WDw5U+yq+Zfvunkf7wjacj9KgzcZn/MExUmFI2fdKFVqqfak7/WX3AvsLJU/8LALKU2FAeVYijIl1mTw1ddk8qTx4vJBB9R/VZ5X8Koj7ZcC+n8pflypTyufSYXT5uv7mOLRdgHLAZ43Oc2heqDqrvGshfYR9jE8fo55qx6MRz7DsYwyVHcRfg+XXEfwovmuJtIoCeG3yWlrCzdHOpkR7c2tTUzyE8BWvOA6vHVJnddQT+ZWsFxiRdaRTdbXyZAb/WCBXGSpA2jEorRKkKR5lH7piWDb/xxriP4j8YfkNRP7tQB3yacsGohw8VysEa3Y3sRqd7D5AjYXQt8FjIfRflH2VdnlLH7scxNYp24btPqwntoObIVsHxz9GHYpS/ii2dUcbKjuorVPl1zn+bVtLpBVi6zqbol400dbU3pmIxDtbEiGn65hQTsRhW0fpbV8iv2Fb4VK2DtuzCpB2NEqDtk7xSNk6M+NixA0if1h+A5Ef27qgbdlAlINtXSFYs7uJpWwd9IOwnwptHfZT5xL1gbYOz8u2QTbJzCcd6DVCbFMhvzLAOfRcICcsX4wD46DfDO/BazYq/y7Ab9+xjuZP1WE3gj9q7xKs1251/vnmEvnkVFn5UZPjs3Y7JDYj3rlbvGNGfFa5Q7OHq4irj6dTDsonA/5y2VT0Gy/fJBCOGoKDfrlM/YdYVNNBbDz07gWmPDchEwaXqRinuU3UMq0K1JQTqxAM1DRX8S3rdGse01yoVngpHsoC5sPtGuSRW4LglfqUQMjnvyoHx+FyKJ7Vb53Z8Ovmc0A3n1yXyY/7TZDtR0EeK8M4mD+G0uDjppAGHy8dHA50vxbpCXQPVD3SH9oEaXz9IuxJPu4HfGD7BF0P3H+oR6nYBdNti5JBLc/rtslQugV1SekI1c7qnmI9xqbKqSuwnDqiHNN9tw6V4/fY6QSfPun32GldkA7zXwMeO50coD2pPqPyGe4zYarPQPsRpM9QjzOD9BkowwYi//7J7DTYpviRHdSdQ5PZPOSjo/h+lc/stpWWZsrNVoFys/GjYbjkrY5cpR4vwEeIOFC+gKqv1JOn8/AFYFthNxX2AcU39cgRb6fJ91E6pS8YC77CAm2/+kQN1vtKn7L9toxcDsZI/AFOqm9QeqnyU1slqTGGelSNt0oa2kIcVbweBfjE8sXlQx0tA/mP0uTH20ow/jwf2an8MsA2xo+n4asRWNbwXrzcdiNo723Q1/PmaepD1Rkv1em2nIYQ4UcoMsxNdi2fegQiaVLqt1tgwO1bAcqYT8gDP6q5G43JalmmnKgrJdejiXLhUpqSSSXKfzdox72GZ2Mq3no79JiG2wQvzeK+vFkyO13lvw/MF37nM4WXAfowD9bRZdc6tB5iXucSvMKxZUEyO13lfwDIa9/hNK+QH4pXqo/CjxDn20f3QLyq/H/R9FGdLlE2F28NoPoo5hvbsKB6ofI/BvTiEaQX1HxE5nsFyRpvf5BBZx+wPZ2U+u0WGHBbwn5K2Uvcls+heqn+W07UlWrT+US5cIkU24f5qFzKPqgyYJ9rB+X66XElwbMMuM+p/C9p+hw19lN6QL1ySvVX3CZVPvlxXVT+1wOuFUB/W4YKkMbnp3jkWgG0qZXJ7HrP1shJhjIfOcH81FJwg5PbJuNt5DIO+qrqOGq8jfwrYCc+RHaCmmsbXo5vC6HylGxgHCy/FvHKzE/6lTDqE6i6tp1J8K/mjFR+SncoP18uG+B1ggaApcqFr0bORnHU+i9eZ4FjDBwjfkC2gZo3U68aYLlUObRP7vda5rc+tgHbQSVjaj482elaD2rNBdvefD9/S62r16D68Opp/tvaEiiN8rOprUlq3SBElEOtDUB9PACMPzgf5pWap9U7XccSvKaZQPz49VNqTRPLBK/nU/9VOTgOv5II270B8ZzvmgXV36l1ue7y3KDhmfIh8dhgaN0g8NgAfSvIq6mxgVpz0T0joPypOZr8Oj8B5odjg+IJ6grc6usgbBVH2UPs3+VrD6lH4tRzOrxtnfrkt7TdY/vS/EDfB96rPo2Mn7UdDdbg1+ybXX/dOrLudb58ZUM9n6HK6VdgOf2IcqjnX4XaDIpnygbi+uRrA+H9xbKB/VA5fusrrUg/u/sq4f5APzfU6KdOb3SvLZlYO1+Vr9X93Orzc+4juzD1kW1BH9kd9RFqLq17ba27cg5azs+hPecwlgOxgr722YH0Bq75BdEblT8M9CYRQG8o2fgdeQLLLZa+6bAoXzFE8BzEd6V8XWqdgpqPKl0wu83cC/xaiyq/FvHKy09mnkB9GvcoQnZ9nMwcORaf6YVbN493zJh3xCzcGAqwwckW8jwEqPI76De+TzJVgfLMJMqQQSk4ViQ8ucUTEYwfhKdceXOlU53wKJ96Ok6wTgjv9+uEfu9l4/fRVP6jU4Yo6HvZUHnyeS/bz4CUE3WodWhDAh8EUQM45Imqs8p/gqbOc3LUeTtUZ79zj+BvnK+cqEO101UHIAYlY7iPvDv6BO8v1uDeiMrxG3QXo0E311kLHSAd5h8NBt2z0aAb9KwFfJ5CvnKmyjEtZ3ymzhxNffI9L446n03XTh0gD3ZElK2uIDBlwBvcVf5LU21p+Iw18l2N9HvFTlc9hBsJLmfS4X5Ah69COqzbaEXZke7qcNBy/PpKyOl+XylWfXRYusXSXGdfWefQenE3iA2C5Vvv0L4ayhZyUIcW36dzaHFebAyVIhXq0FI8+eXN16GFK1Z+OwIcR6/YlEOLdzSbedofdnGbwN1RsDPhFbdZoA6Uo+b3pkPIBx8bSviSHiU75RzhJwoPAGd2yIifrqm26u/Dn+MEayt4f7HekOiPyjHx1EAGOFEKohvrIr78nNhHkANAHeQJHQA4iYP5/9iQwXwcOQDUanR3V+yxLjpOsCc9un4QVK+xjCoITBn8DvL8CDmEZp7ANrm6VUmzT6ObAg/KeDcFteuzlkgr6PCUloTnNje3RBLhWGu8qRmPXYpXHBfkSfVwIr/ZFb0oeXgKdPxlqABpc1FaJUiDT7zxgQJmHKZoZxD5w/IbiPx4J1XQtuTEUocA+C2mQPsQ9OB9lf9TzUIQ5dTPJOqjO2i1HP3GtgzbKhkmpf7nauFEjuAgufUieMFvAKi8XwG5DB+RXRdqZ4WyHeWaMhwiLuT4yw6XQS0I7pTMTpsTgDdqwQ5i+O1CkRjUpHsYqku+iynDCH5MPvmCZebyX6rqM/fA/un35GvvZCYd5r8Z+C81KUxqZ53fpD7k0L4DtinwMDpqQRjbAZW/b4qnoAeR7w0wse+kMIMeRK7y90/xYHhHG7mgpcoq1qkIGKvCybzpAO3jjslsWan8L6VkJdt5aH1+mDv7YG4JMEfkibmLD2YLwByt0fsBTnZ5+e4ohffDUw2wzDkXZBT+FDP46Q+EHELIAtZJlV/oDlpYVq3TtY1MLGZRddO1M/yYF+5LFNYheWLVEGkm2nSypt6w/DoNr1Q9sF9BlTOAkInKf6iGL5hf9WGo++peJUP4kTRGGYZ17Q0/2qbK785HX1SGwSgf/ugLlP0UHywH/R6M4sod+qMv0mbunPIbqHGpjw/Piodc4xK8H+t/qZyQBHnEoRz9hnzL9h7YmMHF+SAG1mO/D2lSNtcPg1r7zNXvZYCL96qfzpw1fUZ85xlT5sRmxbeYE582i9Dfaie7fljv8IldU1BefOKJSsMPZw9Bvw9Hv6cR/OCAZQJDHZHPL+TqH2uA6+70D3i/bl1xZIHljCTK0WGtQWDp7PdIIv8vxX6PRfnU3K4Q+z0WxfnZb8wLnD/BgyrxmrfKfwiaD5nxSdoidU5Xm6bqoso+1FDZIVSe49B+qSq/juBH8V1LpBWynhtujXheq3gUHHejbqzT1fUxGIf75GFE/rWI/ErWhztGZE0eEHsYkKsMFSDtUJRWCdIUj9R6rhm70RZI/rD8BiI/Xi8J2pYU1nbdxFLrudD2qr5ttq/n73/htzODnnSV72lWqr5Sn3YK4LdRp1kpvs3Oy4snQ6irOFAyVPXNV4ZQ17AMzfTl4skQ9lEcKBmq+koZHpiHDKGu4TVsaJvw6S2lIt8QSoPPobZNZvLhkEuGbXnIkFoHL3e6yilBYOF5yIEEP6qe05xs/mH7yYCfa8H7pyGsI3Ng4c3S8P4gb7RBrD0Qlm7/wuwcWHsiLN2bMnNyYM1CWNTzJYU1NwfWbISlOyHoqBxYcxCW7nS2eTmwjkJYfqfBSZqfA2sewoL349Pejs6BNR9hwfuPRljH5MA6GmFRh+5Tax3Qx6kj4lRfN/sBAS/vD+tQ8wUTa9yU3Cm/UMnuWILXBiINjtswDZZzLFEOhTWZEWsWI9ZhjFjTGLGOZMSayYg1mxFrDiPWXEasoxix5jFizWfEOpoRawojllpHptZBD0Xl5LsOCu8Psg5K2dA+TuaZwY/r5pvFjpg5e2rcQQH6raoM+Ptwn/IbiPsdDRa8R1cX6osCKr+y834n++E9HSr/k2BPRy1aozHzXLclQr3UpYJKw+MDTIN+q5p36E5OCxHlUHMSVV8pi7oAp2VTzxagToxAdTgclY/jsK7D+1U+qpyRBZYzkihHhzWCwFL5qTmF7tkCtY/M8MfH088WqDkeNS/pzrMFJbfhKB9+tkDN9TCWg34PR3G5ni0oXvxeAMbPFlT+H9CzhWmozEmp325BoTWie2/B7D711sDPFvAJWNT+TupUs0KeLSRaw25HJBF3myLt7R1up66P5XuSxBgiv9k9da3kswW4DiZDBUibjdIqQRr8mC9+tmDGbrS6QeQPy28g8uNxO2hbcmKpZwvQ9qq+bbavl+6zBbgnIZ91cThe4kMIoAzHgmuYpvjBcbjdxxK81hH3hXz+q3JwHC6H4jnXqX/1DZl7oF75nfp3TDKTDvNfBPY/N2r2bOA5OtZVqBsy4H4Cv9gUZDxU+QeneKL2P1PvVhyT9OdZlRH0/S2Vf0SKB7PjIr3/WZVVrNMWS+2rPXgPLVxjwHsP4JrBYSgNrgHgdT08p4dpcE30cJRGra2pNPjhbPxO6nEgDeooDpTNhIeyPJaHzaS+JIPnhFC+1D6kceAapilecRzWN3j/FJ/7sB0xvOfJM9yn0/uKqXe2YJ2wr0ut0wcZX2BZxVpHp+qm26sB1xnwOjKFNStPrBoizUSbHqapN2UTKF6peuB1QaqfjSNkovLP1vAF81OHDRV7PYCSIdd6gJLb2igf3isOdXCWD5aDfq+N4vzWAyg7OtmHT1VuLjsa9B0T6C9u30CXGfR9f5X/JOAv7gSu8ZocxIojWcRB2ozUteH9VR613uEg2c0AZeM50EyiPkHHbLiHakI391BB3iAmbL8jQB6/tecDgD/daxiNGXLoOQT26ZVOBH2nUeWPaXx6lafCp16H+GDOBbrY6aPrDoFJ1etQVC/MwxTEg8p/CKiXWtd3nK72F+qQDDOT2bwdRpTl+MThMecwnzRdubnuldfTwTVOw7qC5SVJPZ/ykynWFZX/SI2uUO9y6PaUYh5wnkN9eJhN8CDHo96p9I7pR8zzeZyFP9COXwHETYmbYDKB4xeUGGT15jbQOOq3Tv2o7a/w3kN9eIT3wjOuOuNT47P8nveVIbCET2FlDh3MvhfV3EbtwVeB2keIxw3Yl+MobSpIg7YXB2pMge9TBX1uNqfXT9fF8kmC+BoyHJbMpMP8p4N+h78EOwXwQWGqPXkqP+Vn6g7CyzVfU+UrWVJ+v65sal+jys/5lXVYPuXvz8mT1+2KzOuUPHml9jFAWy2M0ZQ58Rk7Tp8Vh90Ds+Gg6xoUh/Pgba6H+rDaB+XDy8j4iBE8PuDX/KYS/FEB80zxUu7kDvi84vNBFx3t00UdR7+dgtpmDF3L7dHUgnqEolPHIMdyQNMEMfCxISr/5RrTNDdHvYMcKwWXQPESMPUxVeoxH1zSlaECpDFO5TupD0NCGVQmg9eXkg+1BZg6nrEB5Yeyoh614GVQOITBs3Lrkf7pPlSr+zioDFj/4Dng5QTG4clMOsx/u0b/qG3O1HmzKj+1lRkul+MlYShfdS+lf/CVChkqQBqj/sUp/YMywPqnqy8lH2qbMHxkoNq3AeWHsqKOOlJlUvYPfqhZHXVEPcYN+fxXvOI43aPt3ZLZ5Zg44kkG9ZgN20vKlZPX66aulasPZc/5+A33H7gEcTTBD/7A8aNo2eFYIB/Krq/rZOc/higXPmJKoHKPQeXCDyvjJWcZ4HLg44jX+QAbL7vr6vwRWHZ5CtlJys3ER2M+C3gfNcL/fjwGQl8NHwHgd9QalD+sJ9RNbG9V/pcBn2NSfFI2Dy6fy1AB0hh1NZHvmEuNCboxN9eYgMdV2D/w9IeaSkGZ+01/qI/UQzzsi75LLL9R09O5iPcj8+Q9qA87C9QDH7eraw+Kj6MBFpUf9l+Y/zNCJhgT9gXYxvN8ML8EmKvnidnhg/mVxp+hxl/qXHVsd2F+OCYrfqjXqY5FaZB3PO4eA8rHeTtR+dTrXw5RrqPhF4/ZufjFNlel9e3303+pS2Wp6xqn63hj4pEp1ZZrEvUJ2pazNPXHWHB8xfpK9aFjCHnV9KMxK/PE7JPCgeMe5SvNSGbK7ovKpmwItFfYNs0i+IK+ADW/wY8BFW8DAP8j0PJj0ecAXtylxkMoRzwecnx0GM5B8RwA5j8imZ2m+1YItTwWdLyBR4xeHuBbLKrMXOsV+ySz86t6QxsPdeZgkA7zjyN0RidfatuHTvfhvBQfGwrbCs67frw/mUmDxyzIUAHSTOurzn+j5DO3APlgfaXm+5S+4tcFufR1MdJXygZRbYn7T9B+iuVU5ZMf+0AqfyvQZT+/CvKge1Ug6PoCNcYd49Blw74JZbJVMrs+Kv9GpWTPXc+j+geUK+4fOhnKkK+PiNdtqNdJqf5xNEqj1mqD2l1d31H3wo/A6j7Ymm9/xTxS82XK1qv8O2lsPTX26mx9rj6NXwGAtkPdu+rm6rQuQxkEsfW6+U4hth7PhamtwLls9y4a/fNbf4G8TtbULdezEWwbgz4bWZVtX8xnI35+KZYVlAnEomwDtW6C/a1C/E01RmGZ+PmbeG1S5Z+Wp7+p00Or/c1u6GGp+ZuUDYLrhK0aG4R9Pkr/dP5ZLhukW38+yqccmE8G6jVQGSal/rsFBt0zHcPfKW0KofKUPGAcLL+WkCMjP56uXak1ALOfc3Kj0kxRz+OmJbvKxs/uYBuunqXJsCfAwa8iUZ+ak/3pDLTWRPmB8F5VBvYDzwZrZ4sRJvW6GrVXg3o+D18nHBtg7qhrc52/Mg+UQ+WHYxPMf65mfkjZSt3aU65nMfjzedTzeVw2td+AGktV/gtLan4Y9lb1M388ZunmjlAH8VFE1FgE+wXuA5TPBfur7tOLqsw5OcosC8Aj9bo4NfbiT89BXVE8GtaVcL5rw7r6UvIJOkehPi2LjwWjjprU+eDUMbuUr6Rwpa6ckGoMvKZ/N+jj+LketU+O8tkx5r15rgPo9DDoXIfyw+Zp7qP8MFjWpNT/3B+2C/bZO2UDejn+Yzu2v38CclSfvaP8kmx+CwvUWkUIyQnaM8Y+G/hzoqr8UvvGt9m9Sl4C+oxQf6HP6HfkKFwTw/YO+oD/RP4aZQOgnVsHpMP8TwIf8DEfTMcp7PnBE32ycbnX0HTrG3g/AbwPP7ug9hNgH8Vv78TBIB3mfxHYBt3eJMWX2WdbiVW+do/X53VHZ1L6B3XBb79ulaPfF4XnA28T84Egzw9m58k79Vlb3M9x3/kn8h1hmbMClNnd5wcyqGfLeN74aRH9hp7nB13zd/f5AdSXoM8P7krZbmrfZ5Dj06n5km7Mgvo9CKTD/GWp1zxL+f0OJSfD+hde1c8wVPsGeb9Dt3ZMHXsp9e/8lP6ZlGNLq5v2aVUbwmOrYKgA6TD/gJRO1oJ6qP8FHXnYEvMSkVgi1hTr7Ix2xPAxVDKoNpOv0Ul9qG/MyEzJiVtmMij8SjP46X2J8P3qcqJOqnylS/i1Zeq/49BzFlVWLcJirpunqxvkH7+rUYH4Udd+WBV5YtX4pE3iqXe6Tcs19cbl++Wn+oCKr9Lgw/zKrkMdrkKy6GVGFmFdu1WBMlX53TlmR/0egfLhY3ehvCt9sBz0ewSKK3foY3awXapzutZb3WPYpoSD2gFVfq1jtD+k7UAl4sev78LXpadOj3WmTm7AJg83HRQnhMPVxk2XHhZRHFYHfAKEcvWoIRTzGSIwKBEozHonmwd4L2VKyn3KdZyMumLzkQtLXZdrePHDCCGMOg1GT9fp6TpE6Ok6wboOtzcebm1tbgu3u9GWzo5EZzSSyxvnLr+jvbk9Gm/vaPaizZGo25nPbAB7G3DWXU7IrxLl3w3MuvETqDINpgz4pAaVf0/NTJ7yiqh6BjEDkJ96p6te4RlEsfSpJdba3tbRFo1Fm90Ot6W5O+1J1RvKXn2gTOVXnmWVo59NVaL8HaCt8K6JKnCPwto72RUT8wzbB3rs+LBnlX8y4GEcWE3HcsBDIvSmGYegjhAqz3HoIVGVX+sYHaI93B6KHywf/CTM0AynPYTwIT+9CPmotqwm0hSWWgmCtgbm7wXqCPPDa3U/jJud0q0GhCmDOn0hRKSVE3FKvpL36ch1g20T8vmvcHEcnsFD2WAbBu0nfHI438d+QHnCe5X9wH1xUWMG89jUNeVf4PbDNlnnJ8Dy/OwVHq9U/hOArcCHE+LxCtYT8wjLqyDKlQHbK5X/VLQSZ6jfk4fTq7Ko8S7k0PJwnGCrUNT4WEeUo+TV29GvtOjshG7FS/W5Kp/8Cq8S5T9bM5ZVg3vKCb6wL6PyL9P4MjVEvah+reJrifw1RL3qna72T91LPZVQsjd8AkYH9VQCyrAymVs+vQqQj9KBBpQfyoqyob1QObmmlvgpLrWKBm0u9N/qifJxPan+UEXUU9cfqPph3b02T98Ofsijlw8PQX07lf8GwMNaGt8OjmU3Nep5xfYGzn1g/jvAWHYrah9qFZSyg+UoDbalkhG0g1UELtWfsU5QfQXmx7620v0qn/zQn4L579XoRC24h/Ivsc+g8t+nsZG9na71gvMYLIc+RP7eTlc51DtdbUAfhy4b1gfKGX+gR+V/kKgPZXfhEwUZKkAao90lT/uDcsV2VydDGbDM64j8UJaqfg0oP5Q/1Xd6ozRYbjXiIdfcBttkyt+AtoNaXoUyUHzWEPXla7uOwB/iVuXXOl113sRcMqiOKPnUmZGPq9PBOkI+ip++Rvhx0x9pbCDKVrymNkpl2RWYvw7IEOaH1+p+GPcW0td6cJ/Cb0BpMuB5LEwrJ+LKVhFWA4EF5abaVPbjF5As8Mm51H+Fi+Mwj7A9lc7rbER3y4FYyr+h+pOkSanfbkEhElb16EvUQ5UN9Yqv7zS1BLV1qvxax2hf9nQ6DOWD57oNBK8NTlcdPiGZyZdLv2E5FNbKEsVaxIi1lBHrXEYsTnktYcRaxoi1mBFrASMWZx2XM2Jx8nU6IxZnf+RsxzMYsTj70ApGLM525NTVCxixOPXrPEasixixOPW+VG0OZx0vZsRKMmJdwojFKS9O34RTv0rVL+TU+1L15RYyYp3DiPVL8OVKVe85fZOeMS0/rFL15UrVFnL6cpy2kLMdOeVVqv7X8YxYpep/ncmIxdm3OfsQp7w4xyHOPlSqsue0X5zrcqW6NsSpX5y+b6n6mKU4dshr/MyKY+ygnvXCPYo1BB+cz3sVfqMhfCWrfhpZwfLxs1+VTv1XWDhNlVWLsJjr5unqpntGDJ+HQxn4YfXLE6uGSDPRpg2aesPy6zS8UvWoY5RJJSMW3ttG7dmgnquq/I1EfkpP6omy1b2qbfuDNMa2DevaFtoIVX533t5WctsT5VMf0C5zuvaNfj5YDvq9J4orB3gw1Dtdda3ah09VLo7DugLvr0N8qN9qzwvcA4u/gln8vQvNkaC29eeyd+GkZCZfoWP5hYxYnGvnnP5wqa4zcNaR8xluqT5PKdW1p7MZsX4JOrGMEeuX8KyhVJ8PcK7VcdaRc52hVJ+Vcq49cer9WYxYpboOz6kTPf7Xz8NGc461pzJi/RJsYak+yzqNEet8RqxSXe/mHNN6ng/kh/VLeK7P2YdKdU9Yz9jx8xg7evZBrDqd6FlTWHV15HxXoFTnQ5yy59znXKrrhZx+To+dWHX+RI+dWHWyL1U7EcT/guf44XNzqXMWFFa/HFjbISx4fz+E1ZgDaw+Epdv/ALEmpf67BYVIVD1D7g+wQ6jcASCe8Xl3PITKUzKCcbD8WsQrMz/p5+8DED9YPmVIPgPN8NMZQviQn4GEfFRbDiLSFNbg1G94jgnMPxDUEeaH1+p+GLciVVADgdmIeBhE1AfGKfnKvUfnpHDz6APhjoQXaYq3NLnNsWhTZ3Mk3BlucTujTQnPa/XCbdHWSCTREW3tbA1HEuGWcEed07XdcR8w1MbRoH1AlV/rGO2Tnk7nBhBtROmcuhfrggwzk5l8+egCp15RfKmz7OqcrnpWHF2ItHdXFwztY9XqQiMh13x14eRkJl+h7beQEWsJI9Y5jFiLGLHOYMRawIi1khFrOSMWZx1PZ8TirONSRqxzGbHOZ8Ti1C/O/sipX5y2kJOvZYxYnHr/S9CJsxixOPVrBSMWZx05ZX8mIxan3p/HiNVjJ34edoKzjhcxYnH6E6Uq+4sZsXr6UH5YpzJi9fShVSd7zrk75xxZPa/Aa0gyTEr9dwsL4RqiXCbsqMIezI+dfh97SOHYnThCYQ/l5zuhsIexY0ea1Foa/D4K/F7GGikFUro5PJUHruvD7ySUgXSY/+SBGczxqWv87TwHXNcgvJDDueYYTn+9HZZNrYGq8msRr7z8ZNZAyxA/WD54DbSc4LUBpclwYjKTD6eVE3E6rCWMWCsYsU5nxFrOiHUBI9YiRqzzSpSvMxixFjBiLSxRvlYyYnHqPSdfnLI/hxGLsx05ZX8mIxZnHS9mxEoyYl3CiMUpr2WMWKXatznHDuVPUN+wVN9mob7T1huVR31DUgbD3wf2FH61Gfz0+UK5vhOoytd9Kxn/V1g4TZVVrG8ZU3WjvmXcgPJjGfhh9coTy/A3k9NtqvvOGSy/TsMrVQ/8zch8v7NereEL5q8nylb3KhnCb3YyyjCskyH17cPunM2k5DYa5ds1mZED1sFePlgO+j0axZUDPBh036unvseryoXfoRwB0vG5TiNAWeVEHO4v8P4RPljUWoMMhyUz6TD/Gan1BeqbkSMJ/nS6O4rIPxLkUfxQslH31hFl52NDIV8NBA/lRSqnokjlVBepnJoilVNVpHKwfR/FWM4okAd/N340YzmjQZ4+qJzVGMtZDeTBvt8YkAbtjeJjdYIPNT6NBfGM41Pg/buq/FrEKzM/aV9rLOIHywePLeMIXhuINLj3FabBcsYR5VBY5YxYSjfqna66sjoqZwxRzhhNOasT5Si9WhPVZ1Lqt1tQCLeodlnL6RpU2ngQd2kywwcO5eg35Fva9IngG904Hy4TynU8SoN9bAJKg201EaWtAdLWTl3XO13lC8uGaaqOOA63I7x/TU05YwssZyxRTh1xX6G2kpINbieOcqDcxqJyxjKWA+U2DpUzjrEcqItroHKGg/vg87Zn0PM2dR/0geG96r2uSpT/q6EZzOdTmMqWjAd8MdqSNlW3CU7XoNImgrKxzq4N0rCerQPSsG6sC9KgzHGg7JOShbRP2+Vhn9YCaapOqg3U/e+BZ55voWeesA3xOyFw/MTn165BpEn8M4dk+IEykj670hv4fXqsNyp/eeqhvtIVPI5OSv12CwrNLTo7ZVZPmwN/SxiPO5AfxXctkVZRAK+JjlY34jY3d8abo+1N0UQI4StecRyet04g8lNn+ypZTzQj67DqC+XJDD4cs2WoAGnjUVolSFM8yr56xbBs/icY4j+I/GH5DUT+PUAd8mlLk1jQHnBg9eomVqPT1cdQNsesDQq3Uv6tCngsk9f1KA32mQaUBscyfFY/HMvgWh8O1HilZCH7QGce4xXlM5eSPyADHgehDOF4i0OucX3MyAwuzof50c0foI4q3szan3CMkhPmGcoJ6yjUNayj0G/COroeSMtXR5Us8tVRqIewThCzAsRBX33L5E//K1H+NVL+jKzD2EHZ5Y0BZaiyZb6LUL6JBN81BJ+rYr1HlV/rmBzHM+s9ayN+sHzwes86BK8NRNogcA3TYDnrEOVQWJWMWEov6p2uOjoRlZPv+DmRKEfpFex/jPYkodplfadrUGkuiMt3vUfxne96D5Sri9JgH/NQGmyrMEqD9i2Suq53usoXlg3TVB1xnM4PWk9TztoFlrM2UU4dcV/I578qB8fhcijZUL5SoeVQ9h63OUc5UG7roHLWYSwH6uK6qBzoA8H1nl0GZe6B98H1Hngvnrer/O+A9Z7d0Rwe9oNVZUsonfVAGtazMEjDuhEBaVDmOFD2Scki3/UeaKthnSDvQX0Tlb8dtZMhX8JtRPWiZEr161L1cczMV/Q+DjWO5+vjwDOOsO3J1y9ZkxFL6Xa94/j6JSGUBsuZqCmH8pd+qT4OZUOK5eNgXzVf3wPe/3PzcfA8fyJjOVBuv1QfZzGTj/Ms8HHORmOnofUXVh8H65kpHweuv2zHNAcbA9KotZIQKtvPF9oi+dN/vE5zOVinuXSQP19jQNnDBmfn61mn+eWu0yi9oPbl4LFvDFHOGE05E4lyfqk+DJRrsX0YWDZMU3XEcbr9JT83H2YMKmcMYzlQbr9UH+YRJh/mz8CHedzCdRqsZzat0yjeg/omKv+rJbROQ/Vrs8/Jg/s4qvxap6vdMOHjUPt4oXywj7M2wStle/A6DeVLrU2UQ2GtyYiF12mofck62ej2OMP78f4L2HcZ7VInHv9hoMbLfH0cxXe+Pg6UK7aFsD3XR2n5ru/UO13lC8uGaaqOOE6353QdTTmFrh+uSZRjeqwu1l7dYu2lXlXrTn4+Tu/BmXvgfUF9HJX/LuDj9E1hGl6nycuWUDq7PkjDegb9CKwb1PpOUPvU3XWaMSAN26egayVU3zH7rknw73DgvbWG/Jq0H0G9d0GNlX2czHtwk+Ozdp7dPnVKx3bxeTM3mda5c2zGrCmxqZt0ds6Iz5wJa4O1BtcWawvOo67riXjHod8sGedTPqyh7s0SyhoqLGpnMZSWepuZ4msCwpqYAwt/AQfej1d11s6Bhb+AQ1lIPPJRvRp7bTA/5GedHPzsmfTnZx2EtW4OrFkIi5rhKqz1cmDNRljw/vXQfev7lAPzQKu7PlE2hY/7h5uD5znJbJ4hX3gW6OXAOgphwfs9hBXOgTUPYcH7w+i+iE85MA+cbUdAOSEijuJnftKfnwjCiubAOhphwfujCKspB9YxCAve34Tua/YpB+ZpAvHNoJwQEUfxs3fSnx91b5CRFPLKOHJ1hlB5qh4wDpZfrJE0l1zxjLyF4LWBSMNjUAtRTgtRDoU1gRFrbUasiYxY6zBirceItT4jlsuIFWbE8hixIoxYyiZSTzz6o3LyfeIB7y/WE4/+qJwx4D44qz0MzWqVDsJZLbxXjUWVKP9VYFY7LYVJrcTpnixhvzxfOVPlqLEG6jCfbc+cEAzHcBVUGhznhoBrHKhZsOI731U6KFc8JkM704LSoN1oRWmw77alruudrvLFNpHyA2GcTo/DmnLWL7Cc9Yly6oj7Cu2XlGxM93+8+ro+YznU/IF66l5oOdTcIpc9W4LsmbrPz54pX7YS5V8O7NlStEoH+8GqtCVYZym/RKW1gjSsG20gDcocB8o+KVnku0oHbTW2T1SfqHG66t6qeIqnyq91uvY5E3MGak2AGgMp+63upfrTUHCN+205Eafrm+MYsdRcUuc7hFAaLEf3FI/yNQz7BxH8tB+GOlRnGfJ9itdd/wDKNYrSYB9rQmmwrXC/hXZR2SJq3Mb6ku+4De//ufkHxXqK90v1D/6ap3+An+Kp/CcD/+AfyD+A62Gl6h9gPTPlHyhZ5OsfwLl9M8DH+gXzwTakdN0h4kIEDu5zrk/5MhyQ/Ok/tbaOv/pOjeUwDuv3AIJfXX81O5b9dJIyLE/VA8bB8msJmZjwkcIB5UrpVhjJnNIDrCOwnAhRDoWF7aBuXdw1I6/APq4qv1jr4pS/SH3lvhj67dfO62v4MWPvM6du53o+pPiRp5RUOV11iHouhvmGz5FUnF/b6J5n654t5noeiJ9n+9XBr410z7MpGVSitMbU4pyU4deDs/Osm8pTC/L8F+0age2E+7ShZ12B+zR+1tVkhh/tsy4oH6izvRy97sC289sHsC5RV6zL6+TgCetyvnsOIBbWZd2eg/VzYGFdhvdjv0B3QhO14xzPQSH+jzvUhvjjr6/BdzX4YQ3+GJAP+6hw/h5BaXDuGQX4gzT4EzX462jw1yXwMaayG/UgbQxKU3mHpjCkj/zhSJpfhSGD2VMJg9sUVX6xdrRT+6GgfHRv7al7qZ2znKcFTGDEwqeomdlpHglTaxoqUOtXxdppDtsF93coZ7x+BfsFXr+CexLUOFGsHeBUOYXqywSinDrivpDPf1UOjgtyugZuJ45yqP2QuM05yqH2SmL94ShHt9Mc+qtwjWpTdFoxtdOc8nXxTvMZYI1qixSm2be0eHeaYz2DPiHWjUJ2mitZFPIMS9VJ7oJWb0hNjs/aLj5vz9jUKZ2xWVOmT9s1fuTs+MxZFQgWdx+s5hN92IU4joZdGcpQ2jiUrg7LLnPoEGTZwszwFNwdUeUXa9ki1xZm7I6sS/DaQKQNA9e4K5UTcWUarPGMWPijEBAbL5Xle9jjOILnnsMeew579Cun57DH7pVTCocIjAH3QbfnGOT2qHEx6KM5lb8duD3HIbfH0GHpVh72CA9L347pkBP44Y4Zyey01cF9Y9F98ONDCh9+uKMe3Sev1cfd6tFvea1eRKtEfF2J9AF+uI1xSt0ZxF9a01DZQfosLJ+abuPDCmBaIR/wCMfbO5pjsUSkI+F2xBJx3NcVrziuDJSPba/K30jkN/tibSSm+gv8gAf+SEcFSMOvOlaCNPjCK/6Ah5lDPSOxIPKH5TcQ+XcFdcinLakpP+zf+WCpD2VA+44/MAptE+6LZuxA8LmLKr8W8crMT3ruQn24dTghVyW7sQSvDUQaPgBtLFHOWKIcCmskI5Yae6ixYjgqh/oI7khNOcMJng1/mDCvj7PIUKwPE0K54iUa2MfwkhtsK79lMujjUK9PY33J1w7B+3UfJhxVYDmjiHJML6WOROWY+sgutrmmPrKL/cexjOVAXcSPIMeA++Dc5TE0d1H3BZ27qPy7grnLk8WZu+T9oSess3C5FesZnG9i3aA+WhjUPnHMXbB9ovpEqfoHI83wo/UPqDEwX/8AHx5WyJi+FiOW0ot6p2t743GFks0oTTmUffyl+gdQrrj/wb5pwj8wMW4X6wPJpv2DYo3bY1A5YxjLgXJbVf6B34eLa4Zm7vHzD3QfLlb5NwX+QZ/UtbIlZsYEXv8A61m+HzUOap+ULPL1D+BcboIPZiWRdwRKU3mHgvbaOHVdT9w/2slOGwHSVkNp1NyVGrcgBiwD6hzs54cls+ug8q+W4vvHj0WOoDHLfDCVHlPrZHCuLEMFSOPT3w5P8n3/sAwfUKY/1jeZXacxIK2cyI/XIim/A9oiJaMgPgy19jAaxKm1Nkqeq6XiVoU8IY9B5Anz5ytPJSPdOk/I6dpulB+rk6ficVXIE/IYRJ6Ubx5CMoH5oTxXS103OF1luAbCGk1gwf6O14JXS8VXEfmxTYL5fwVsTu2wbP6o9TaVNoLAhrY3hDBgPWqJetShNHivxF1jYDYu9VxC1zbUcYHjibKo16FL8UPF1PgfdA1gDEpbF6Rhf87v2BgcKN8Afvz4kwAfPw6hchQu1iOsM8MJHilfcHwO3Hx1Rsnx56IzeE0J6gzWJxt0ZgyIwzozhuCRWl/Mdcwo1hlq6zz02bHOUAcx2/QxqUL3UKg0+NoKlAkOlM7A57n56Ay1XhBUZ9S9cD8N3hY8C8xJTkC2aN0cZWO9ovZtwT6odLLe6dqv8RFd8D5GvYrXEbyqgHWO0oGgB1zj9SzqtTVK56BMcKD0SskpqF5R7ZzrOGCsY+MIfqmt6tRrmdQ+PpWfOkYVykbpHnUkq7q3hriPcY9EtI7gVQWVBl+nxHsv4aufeL2IOv5RpcEjGfA+K3gkAz4OFwZKf5Sc8rVL1NHAY0Cczi6pe6kjOHK9yot1hnodOqjOqHsN60xJHeWl0jYAabbpzBJ0pCS01/hYKDdgmSp/rtfSsf5R+gptvU7/8JGl6j64Jgf5x8fTqfw3gvnxCLB28CNPyUwZSk5m1zDcOLWGAeVamcyut06GMuTb55XMGpyu9thDadTxkrq9rdQxqdx+kvIdfi5+Eh7nYB/APlSp+EkhVI7Che0jA7ZZEwgeqQ/GUK/5Ux8d1dkxKH+sM1Av1L1mj02MuHUErypQbY/HMspu6tqempdhPYR9H8oEB0pnlJzy1RnKHgTVGXUv9SFFSmeo96h+qToTxF783HVmcQCd6bEzmTS8NvRL1JldkM6sReDC50ZB3r+AzzLxcwv4HAm/3wnvK9V9C2NQGvRFxqI03Uf5oJ5AmeBA6YySU746swbChe0jg+65hbpX6swzqWddtags+b+gd4I6O+Ne1Gtpa41Ho51tTfhDrzIo/ettoPxoU6ylI9bieW1RLx71cpYv5V/fmC3PCnAPbLs6Ik7hKv2vRPdO6mY9sFhDqDzHofeWqvJrEa/M/KT3llYifrB88N7SKoLXBiJNtUG9498mIZQGeaggeGgg7q8IgEXVp0+KZJg5a/qM+GaxI2bOnhp3UMC6gvt0mU/5IeJ+R4MF7zHRrzqamts7ROdy496P+ljsft3U2d7qtoRjbZ0dzZ2Rpo5ilx9vj7a1tLd1NLmdbpvXFsnHrtQ5XXUr5PNfhnINdgOBNTP5039lg2A/4rRBCr8X4o8J31NyqiTkpMquNlK3RCKofVXl1zpG7X3avlYjfrB88LuxNWbkE5dHOyrdgzaripAN5qMX4rHWEI/UmqniSaVVgDTFh8wzYVQ2j2WGeDTbRxOdlI8C9y5vMCxTLmwbuGYN9b4MpMP8Gw/LYP46dV3vZI9L0E71Bum9iHT1W7VXGZEXXuPfincsV5hf6WSVT12rUF1V/i1S9ZO8bdNIY0L5Qb7KfDC3BpgjUJvAvWu6Pq/y9ybywz6m+Kl3uvbN3ug+yHuNkx1gHNU+IZQXj8FqnIL3+f2uIXD8eKgmcPA4iTFxmZSvh+dS5UQ5sE/BMb+GKJ9xfGiixkoVKF87hNJg3Q9KZvLhQM1dVZ1kfddAz6tgPswP1dc4fSMVXwnicbnYH69CeeF4jmVWycBjA1FOFcLtpeE/hHAqiPvqHLo/Uv+D8hsi+NXNh7tbDsQ6OJldDmxnOKZNQ/YT2vFy4t5jk5l0mH8mGNOODDimYVsC6xBLZuKwzcZ+LO6T+Lk2HrtwHjiOw/xHEWMXtg8QS8bND+AjUH4f9hHOB/I8FsmT8gHqna6ywTpcg8qC/rEaX7AMTgZ8nDDMvywl1zpNHWXcqcPofJAHmA9jUGOnwqD6tbqvnuAL9z1sO6o0ZVDjGVVGJUortH2ocRv6GpQPQ6XD8RyWg+PKiPy5/I9aH2wKt4rAoex8NUoLEWnYhsH6QhuGfRNqTgZtI9Xv/NpO53tTvAfxq6o0vFPyg3aIey3HbXU9t6OlKZHwOptj7dFcazkqvlcyu14//gdxlaBeMlTD/CitBqRVJLPLr039rgDlQCzFRyXKfyNoaxmqwD3q/gai/CpUfhbfRBzUNYxVTsSp/LJNr07xaGKNLtzU1hpra3e9cCIcjrQ257NGp/x17KN0lxccKB8mLT9QdwfwwVN22AsRcij3kb3jZNa2zKyBZNa2qLX2MqKtzD5bCbtwbQvKaFqyq2woPmSg/ETs84WI+lK62eBzvwx1mnLUGosMsO/D9TAZlP2A9gXmh2sWMP+fgB/1EJr3VRLlyXxPafKFfP7/iEHEVSSz4yi7A+2xyq/Krk125VGl9QZplaicPqnfUF4QS/FRifI/juwxtKHq/gai/GpUfhbfRBy2x72J/L2J/LJ9/obGWFh37j7/Y5kIH8Zh3p4CYwX1PEX3nMDM+qoX2Jaq8ov1nIDyF3XPCXqZkY+r8wGp+Y5qy2oiTWFRa6zUmh/l58N5A54XvoneRYZ+vlpfCBFp5UQc1NtXNPPDfG0eHhOoeVkI/abWPWB/q0T5vwV2/X2fub/j0Guk6pwJLCe/NXa8TqHyfwzWKWqH0Zh+9fLD/ALU6zPUJpVEHWS+b3zqH3L0Mg1a/zIfXr/SrNNUEnWFvOI1VHiPzPe9Tz4Z4Dra96juitdyh95XsWeS5lNhUP8VHo7TrY9i22XmGfBP57dB+0DVG5cvqRbUQbc2odMpiF+L8qv7Kxx6rVC1IdapvqnNX7Jtq4fTPDiOfn1Bp9dB+mCfVLnU2Q9+eq34ptYs1D251oT7ofrmso2Yf5V/MJDhAMQXNd5T6zFwvRiPd45TeF/RjVtwTYdqZ9WHVd/qDcpj7Fsu7itQl3sT/FSi/Kuj9kw/63e69jmIo/L3IcqtA3XFdrkPKlfKeK/UNWXvoO6NQ7zWAmzKN/OrcwvQvbWQ7lHPj6jnu9j26MZSGbZKZvOi8q8D5KB7R03xZfYdNY88Zwf2g8pkdr2pZ+qU/6by53qmjvsg7Dd4PZTaI0nZWsrHg/tXsF2BYzy2dxT/NcS9uH9U+eRXeLh/bEjYd4wJdQ3KqcIHcxLQ+41Qn4PteEQyk2/74XTZsP7lRH2wPfHz2/ogXlX+zTX1703UH/J1XDIbU+XfiuhrmE9YL2psUPF9ifx1RL3qna5yUfdi2cN8UPYUBrY/qrxah7b/c5PZvEIsvG9M17f7ELzq2roPUQ5u6900vky1D59+/EGbgJ+HVBJYcFzhXjdvjjZ7ra2x1o7mjkRbtKO92HtrO9qaE22RSLsXaeuMt3nNpbK3FvatYs1xqOevIXRNrfVUacqB96t8ZteBMnOpasCnzu9W+Sl/tVqTH6/zYXy/Z5MVPrLDcymV/2IwJk1DY42ujjJgXxTv0cV5cNtDG0Dx7Oc/zgT2Cu9bpPbIQH8I+4Eq/xzN2ETZOd3YlMvH0u17wPsWdf4XhY3nObnGmxBRT7XeKIMatyCG6mN1CGdS6rdbYMBjaoXTdYyD/GA/6ySkx/VIpjqZSepLlKswoEwqUf6TiDkVrktvp6uuU22C9+xivdosmZ2u8p8O+vNC5GNSays/nlsynC4b+jJ9NLz2JniFfWZBMjtd5V8M5LWvD6+QH8grNUdTOrsq5mjQblUinij7QY1r+doPao6m2yeM7a9uL45ujPFbK8M6q/JfGHCtDLbzxcj3DvJ8ANo7ahzJNde8PI+1NRkOT2bXN71GMCKDeZUPpvIDZDgqmcmT3mfidO0HJtatlJyoNVjID7YzN6J6UWvL1H4ClZ9a+4XrXEomeL3mRsLGUvNa6M9Sz04dRlkGeW5rqB3bQqg8JQ8YB8sv1nNbah1e99zW0LOPVrgHBj7fg3tgYNtQz2tzrcnfjfoC7DOU3dgumUmH+f8Ixu57kf2j1t3rHbpvUbyEnK79xHH0c6pyVH+YhvcRwvy51uQpm47nplh/ZFD2FssDthv1vpcMfvbkzxq/n9qbq3tfiRrnqTkRtd8Y+1RU2bA++DkWNZeCbY/3L6v8j2jW+aj1fZ2NVvkf18iU8m10MqXWO6k5Ub3TVY59EFYumap+iXkNKlOV/7k81051MlX5X9TIlJKRTqbUWmsfol7Uuiee8+WSqfq2BuY1qExV/tc1MqXsrU6mKv9bq1CmsM516D6/51xw/grf16bqjNebqfcOMabuWRLG8GtLyqbhtvxE05ZUvWoD1qs3U71651kvlf/fhupV7lOv8jzrVZujXtjXV/m/DVAv6j1hGfB6m8r/Q8DnrnBdV4aKZDa/k1LxbkEh/+eulN3TPXfN5RvgeTvuozBNt2eH0omg79eoe6FPSz2Xx75arvcS/dZc61Lz5FJ+9q5b18n1PpCfjwrzU+/UB9n/ku+zd2odKOh6CPuZM9FIe8JLtLW0RxJupNUr+pk7MTccj3rt7U1ePNbWlij6mTue5yWao+2tzR1hN9FZ9DN/oomWWHOixW0Kd0bj4c5YscuPtcTbos2RcEck0RZrdVuLXX57Z3OH2xbxOmOxFrelubU7z2VhX1P3Ue9acT97xHyWE7JRccV63ynXmKOuqf28fmObDLslM/lwWjkRV1ZkLMqXxzafko1u/YUaj4Ocz2fqPI6gOoffsTPUB7Tv2FFypfaeVCCZw7EU6wk1zlLzQFuw1P0yUHtMpiez02AbY5kG1VXlu2Bbmo9vSb0DAPnFvuUuKd/S9HMUPHbAsgyfndlM+agqUM9RcbvDuQNuW2r+Se2Xw+c6wlCOfkNZyLJ/NSqDi/OpQOlICKVVEfWg9tjjsSZE8KU7C053vgQ1TsxIZvMMx0RqvqB8dt07t37+CPUuVjH2QsHyVL0ch+4PtU7X9irWsydqXkb1A9yeeH4Nr4O+O0dhBZkbBsWqQPWB7YF1wZAvGNhPUOXXOl1lakIXqD4XIuRK+aY6HxCe+YbT8vUnSx1LN+cJ0u5UOVj/YTl+75+cgL7rre7ze/8Ef58+PW6MzGCenMKkzmPGYwn1DFanZ2Wa+lPl1BD3TUr9d/MLURxh9hxVN0a9x6CCSutN1DlE5Kf8BsW3tHsTR2RwcT5cJvQbeqM0OA71QWlwzKxDadD2qr1/lI5gnyVfHdHto6b8k+6WQ/lPpvs8ft/R1P5zvNZZxVgOdb4Ttdey0HKo/SnUWA9t5bXIVlLPaeC9eK+1yv8/sJftejSnMrRnpw3PQWCg5iBYZ6GdwXoGn8li3YDPtvFZ4DBQ9knJQv7fLg/7RL0fHWSN0dCcMrBPr8ov1hpjrucdWAeo/aK438qA/aV830HR7WEqBEvJvFhrjIbniq3UM1UVqP5+aTLDBw5U/1N85+sfUHtPgvTNfP0K3XpEyOk6ZlDP0nE7UusQunNIu1uO7ixeU+NckLXv7pYD8+C5s6n37VaVv+PnH/wL+QfUM3x4L55LqfyfAP/gTeQfGBoT8rIllM5Seyso3wHrBvQdoMxxoOyTkkW+/gHUCVUnuOeWWjeixsWQ09XGUnuAVHnU2qq6t9T8P9y+eB8YTINtiNsX+n+4v/YFafg9Ahhy+Yb5fBON8h9gPryXJ0TwSPV1SgeoNSGVP9feJawz1F65Ul1/0PVtSi+wfYV6gfWwHqRBmeCQa70jH52h7EFQnYFnIV2L1sVgPqwf1BojdQ6AjkfdvqlcNkuVRfk+WE+peTB19heeBw9OtUGuvWpKTmb3qrlNq3q/In6GTtljar6B1y+oZ79wrRc+63LQPZUIXwb1nByv+f4LrPmuMTI7j8KbCPKsNTKbT9iHtkxmp1HrZzLulRQG5Q9JmpT67RYUWmLUmgAffrhT5+ub9QWiHSFUnuPQ6xFwfzW2ASbWI3R7OR1H/zwdv78L++YpyUw+v35bQ5RDYS1nxFrJiLWIEWsBI9ZZjFgLGbFWMGJxyouzjlx8UXa2VHT1PEYszr7NqRPLGLF67FeP/TJZR07Zn86Ixan35zNicfbtUu2PnDa6VMdaznY8gxHrlzAO/RLqyMkXp10txXFbXuN5e6noF6e8LmTEWsKIxemblOqY1tMfV10dS3Xc/iXM0zh14jRGrFLV+3MZsUp1reMCRiyTNlrlpd7Nk0G9W4SfgbyInjmY2ScY7aSeOYWc7LJrDJUdQuU5Dv1MQJWvW4OvJdIKerfcS0Tibnt7NNze2dTc3Jyvbqj81PM36vmCkrWZ75tE26lnnHAvnAwVIK0GpVWCNMWjlP0Vw7L5rzXEfxD5w/Kpvun37RkKSwbVNo1Otq7B/kg9V1TffaD2qqvnmvC5IrWHMYTwqXM/5P/3RmZ4hfdBHmH9dOevlvvEw+sQioflwvK2SGbfh/fJYV5wfcsJPnXvdkFZUHsi8P4h2E/h94+4z6hoCXc0xSJNbW5HvKkl1tySzxkVuu+pB9kfCs9mdZyutge/c63y/weNPWbsP/3OdQ2qQ67z8PF+xvSehdQ7yTLvNyOzZUbpHSXPMpRGnbFFfdMItwN1/mK1pg7pMSNVh9I4W8uNUntV4PgGxwg4TjhOpt4wPx4rc50RiZ+3++3j9LN9UOZ4LxO0qbq9SXjfbG/QRvhMbKjXeFyCdcf7bCjbR+1FrgE8j0/xUePQNmNS6rdbWGih9pCogH1Jyq7DfoL3VuS7nzdE8EDtwVOyyPesAg47Afem/shfsitfq6LfQj8H91vdnjHH6dpvc/Vz5Xc1OF3bEus3NRbk02dk0J2ZBvdGqj7TG5RVlczkZWyDsKqXknU54LkimeFdla/0BX6TW+VTvNaY4dVVvKpveKtxC5YJ61KG8uPrShS34agM37COsB1hvWG7y0B9Pxx+V13xSH1rvncyP6xqhNWrACzFVwORv1c3+aKwqhBWDYEF46APvS7oE9T5JH7v9G8M2hTatqDv9Kv8ewK/bdPUtYmzY3LZamzz0rJ06LFqUuq3W1gIfP6GKp9a9zCxTzLot0/MrmNkvttF+YrUGCW/G9DX6dpmkD/4fSIVdGfc4zlKvu+HwvvxmUSwjXVnGeGxEeqI7tsxSt97O/r5ZQhhUf2Y8pEoWVDvEOD52n6g389A/Z46+4rqv7jf4z4B0/zOvvLTLd0e+zoiPzU3CXIOO4XVS1N2ru9n4rIhX/BeXLZfH6H8WCUbw34s+a4E9D2xH6ubT8oQRJZUOzag/FB2VD/WvUfRG6XB/of7OPUeM+wv1LsYcF6rxui2VFwNIQfOsQP2P278VjfaAu29Af4jNYTcTeAbOgPCVXq3eTKDT73LXI7y4XtkOrXOrfKoepjQI9HOTYbl5Cl8Q++aRIKMjbD8Qt9hh2XVOkZ12NPVTXc+me45RCHnbcAz5ldVm/qds/BjnmQmrQylVYC0KpQGxzZ49uZqIB/ug3g+A9dItkxmMNYGeOukrpX8TNpuUzZDhv4E/3gdAc7lqTm2kjm1FlOO0uB8uiKZXY5a91DPMDCW4gOvk0xM/abWMfD8H5aP5/9ZfBNxWC75rBeMTV33djJrBhGA59dHypyueNQ8H66RGuzPYcUr9Q40dT6Y9AsHpq5nzpo+I77NtC2OinfMnjVl+rTNYh2HxB0UYOeDilnm+A/MsKIURjm4nwpwYbMimX3fpFS8W0Boac0sFqoOUYn4dFD5lSh/a+o394PXREvMS0RiiVhTrLMz2pHz4wgHpK4td4o7iuUUG3rA1GS4o6ed4i2SGXyqgysdVgMlvFY8qTxbgzxb++TZBuTZBuSRgXKuFX94YId8UAP7VigNGrStURq0M4onacCVYZPXQwCPMmybzPAeQmnww3t4QRA6qYz6HjM8SQv3J/ivAHWTYbOkmbIV/uZm8D01YG8M2hEP2CEnux1NOtSwPMehJzalegi5dAj6p647YlOn7jxjypzYrPiWs6d1SJ8AVgHClhFVxMO5ykPtoYK/y9Bv7C7g+WQlget3P45TZVPnyuA1YdykOE43n9OZyJDPf1WOk6McimfK3Ha3HJOmT4Yg50Ca+p4MNYQ4SIa6dqT2T4QILEoHVZ2k6doC4OJ8mB/YDlUAH9aDai9qXk/tL6KGCBVveA3LyDdEgrYHXI/Ipz1051HCvob3Avnt3Sz1qc7mqd+reqoDh3zdt8d1Z+mrfHAModb9lGtETRsch2+4xmdAbZ/6L+u6F+KZWo8oJ2QVxAWA9aXWL3oFKBvKa/MkXXaVQ9shuM8C5t8t9V/Wf9/UNTXulaO0MgKb6pOqjib2THc0Nbd3RJtibtyTP8NF/65iU6ylI9bieW1RLx71mnKVv17q2vKlg+ZiLR2YlI9Jf4t6nkb5XrpnZbI/qmmCvB4A7od4jqP3lQ1Pq5sM+49evs9DylFaJUiD/uBIJB/TzyQN6ZrX3/HXLzWGjwcywboTQnIwxGc4hMpzHHraruJK7Vumcto+KHU9dXqsc8sZ0w/PXsiHtQj51A6mw0BJJ+QTLwM10sKRRsWX+pOrtVK/S/nJ1WqpaxtmDuumfq/qmYPqKZZ7Ok09no4+cHk6avdctQPsjUPPQiYxtq1B2Wt3FqiRWdk2OLpMmz5rSmLeZjPiYlW4c8fZU6dOSUyJz3BQCDpS2GC11GOkVW21rk8xbbfVircXy2rVGcEPtyv8vmb4T1utnZMZfFgXVa7S4V2SGVnuAu6BeXYFefA7oyrPbiDPbj55dgd5dvfJswfIs4dPnr1Anr1AHsjz3iDP3j44+4A8+/jk2Rfk2dcnz34gz34+eQ4AeQ4AeSDPB4I8B/rgHATyHOST52CQ52CfPDGQJ+aTpwPk6QB5ykGeTpCnE+RxQJ44yBP3KSsB8iR88kwGeSb75DkE5DnEJ88UkGcKyAN5PhTkOdQH5zCQ5zCfPFNBnqk+eQ4HeQ73yTMN5JkG8kCe4Zk6031wjgB5jvDJcyTIc6RPnhkgzwyfPDNBHvhtOqg/s0CeWT55ZoM8s33yzAd55iN+KA9N2UezayRNnll774Xxd10cUE9Vdr2ZsgNvV1Dl1zomx9bMukc94gfLB6+xBV1/q0dplSBNtS981kI9q6tDadCXVDbW5Lpjq9scNeyDJFahTro/R53E5ydUJLvWI1+dhLqFdRI+18ffTYfP7mahNPiMcDZKg+8OzkFp0Kefi9LgO7dHoTT4Hts8lAbfe1PjgeSh3clcH5G6Vm1UGs8dWtrNPndocU09d9gLycfMmJqRj5mVnxZX99xB6UOprz7HUr9LefVZPZOH6zhwG6mkSal4t7DgUdtIGfHT21S3MIMfUfhbAnzOcVPhb2UEPyOfrc3gp9sXbjFnwk7LZlszvKfbdjsz+FGFvz3ANyGfHQB+yAD+jmbkk8bfyYx80lvMr04ZP+Wj4LMHqP+O03XskUHZ0QYCS7WDKqeeKEeNoQ2OEZlGg/rhqvxax+S8IOOHNyB+sHygHyTT+hG8NqA0GbDu9yPK6UeUUyysOqdr/QvVOag7cB6SS+egTFeFzqnyi6VzVPvpdK6R4LUBpcmA9aSRKKeRKKdYWLgPKXzqvyoHx/npdr46B2W6KnROlV8snaPaT6dz/QleG1CaDFhP+hPl9CfKKRYW7kMKn/qvysFxfrqdr85Bma4KnVPlF0vnqPbT6dwAgtcGlCYDfFUUp5UTcWVFxsJ9SOFT/1U5OM5Pt/PVOSjTVaFzqvxi6RzVfjqdG0jw2oDSZMC2aSBRzkCinGJh4T6k8Kn/qhwc56fbUIZm1+vd5hqna7sw4jdRzyLUPFKuQd0HypWk1qnhuzz42YBKh/m3L8tg/jEVRz3jwf3VzLfGg/dX/O0QM2uq+m+NQ/ng/lpD8Ep91wL3sRqiHOpszGJhUc9BCu2v1Fn8QXQOnwk5KfXbLSwE1jlVfrF0jmo/nc7VErw2oDQZsJ5Q58NSZ/0XC4t6vlaozmHdgeXodM7QWcGBdQ6fFWxa56j20+lcb4JXfFa8DFhPqHPnqfM9i4VFPbctVOd030TQ6ZzJ85cdJ7fOqfKLpXNU++l0ro7gtQGlyYD1pI4oh9rLUCwsaj9AoTqHdQeWUwbug77kt+AeeB/0JeHzUvw9lfTzUuBL/pCKo95R74vS4H6BBpQG38fuh9KgHjSiNLhHqD9Kg3OCASgNrg1XozTot9SgNDi+1KI06uxy6jxpfJZ1vnatImA5lQWWUxmwnLoCy6kLWE7fAsvpG7Cc+gLLqQ9YTkOB5TQELKe6wHKqA5ZTU2A5NQHLqS2wnJ5+2tNPe/qpnf3UqO8cjqXPmKWeiVJnZav81POsSk1+6llEnSY/tY7cV5N/EJG/XpN/MJG/QZN/CJFf9/2NoUT+Gk3+YUR+an1B+bzDQVoo9V/pyggQz6grgd8vUOXXIl5Z+QHzrBFOV9kNJ2Qn9yCrNpscn7Xj9FnxmZBviHV5WSYepsOg8uDnPyH0uxyl9QO8wvhGn/j+PvEDfOIH+cQP9okf4hM/1Cd+GIpXafiIzl7odx/0G9pSHEKIcDzmiSvdMYjNne4Q+al7VTx1P9Vf1J7Qeh8ceF+FprxygifqLPOQpi4hzX2Q562S2TxTZdYRWNh2mjkLscULofIch7ad6X3jTlf5mrCd1JmR1LhPnZXHKB835HS1IeVEmUX6lkYL9bwLz1uobyjD/FVAhjA/vFb3w7gjUwqBn1FBfOwDywD3E+M0nc9CYW3Tg5UX1g4G+dI974R9QOrbgUh38PnM1H+Fi+N082543LhBO9WSa413bihTLuxz1BqvDOp9DfyNz+NCGcz5qWtq/MPfrsN+PLyG5VK8YPnC+1Va74B1g/fjup0A6lZVlp0f2igKcyDCx+eOyqDGXmyroV5X+eTvhXhW+U9N8Sx/3+DDM5QDHAd6O7QcTgeYN5fRfDqOfg6h65PQTit+gnyrkyobyhm+owPvr3Lo+sM9MzD/2RqZ1oB7qPr09sFcppEp9cxVJ1Pq24i1RL2oZxN9NPfhZ+RU/XTfF8d5oV+aq+2grsNygradyn+xpu2os4AhX9sG4IHSXczD5RoeKF+oN4GJeaa+HymD8mXwGcJXAx5u85FDUB1W+a9bhToM5dLH0ZctA7QF1T5lV/nkh20E89+iadc+4B6qPr19MH+rkSn1jFkn01zfk8XPJanvyepkCvsolqkqx2/8wjJV+e/RyJTa06iTqcr/+1UoUygXP5lWOF1tpwzKXytzutpV2B6Gz2bpUL4kXC9UQaWNBGXXoLRRIA2fGQ9DOfoN6yTleEdZBhfnw/xAvRiJ0mB7Kd4ofwPPW+GZc5TPh8+3gOcSwG/fyVAB0jjXS6SczinPri/U2cpkdp2o8zx0zwt07x1CGTUQ+XdCZVNrFlD/4SeufswD7lc8rgp5Qh6DyFP3/CKXPPE35eEzQj/fAGJBGevkqXhcFfKEPGJ59s1RJyxPnT5DGVHPdrEfQc1VqPlFqfV3yCOWZ58cdQoy3kE54f4OZY19gkL6u+JxVcgTzgmwPHXzWRmC+LnU2meD01XW5QirkP6ueCy1/l6To075yhP3dyhPvO8g6HqCTf09lw3D8gw6n6f2XtShNOrbObq1NFgmXO/Dn7qEPFcBXLWmifeh9k7dIHm/tjy7bJXHb91TrQFgzL4AE88pVJ6ga4PUmKXbQ6LbswHLp/bFDgpQNvTD8Rra4Dx5pfZ/DAZ56hGvkL8hefKK14yG5MkrtfdkiIZXWI+hefKK15aG5skrte9lqIZXWI9hefK6XZF5LSd4xesE48De8m3Ksu+H+q7sFWWz0+eWpf5XgDTGZzFRymZDmWObTclXtycrl3zx8xLY/oNQGvTZcLtAucI5/o/lJjNppSrXfPe6Ue0A7ROWK5T5YJQGx1CdXNV4+nOWKzWG6OQK7ewQlAb9D51c1dpgj1xpuZajNGr/NLS1IXQfLDOo71YOcNU7R3jtdkeN76Z7x10G7Lup/LtofDeVp8yh13fxXvLaHPXHbUTtbQ76rK53gLLhHAb7boPy5DWXPuG1bsjf4Dx5xb7b4Dx5zeVnYl51fmYuXrHvNiRPXnP5mZhXnZ+Zi9cgvpuO11y+BeZV52fqeJXXeF5kmtdqglf8nP4w4GdegfxM2Dfxe4qwT/cNwFMIpGN+8H0yYNum8h9J2LZVt95Lj3mwnfCYB5+9lRP5cZvr9rBDmTWg/NBeUWvrqkyqrdU+9FKTKxxbsFypvkG9UxOkHSi5QpnjOQU86w6/BwTlqvbx2yRXakzVyZVqBzgWYblCmeM5BTzPTSdX9R7Ez1muuXwVLFc4puI1TXhmGZYrHDPUeySrbn2dlqvu+STlf+qeT+ragZIr5VdR53Lp9vJR/gI+Tx3u5cP5IR4ezy8D46PaX6J7dgXHfYpXat6B5zx1PrjqzC6TOsLx7b/rU/Vf1d/+W9Xfhucuv6Opub1DMOHGPfkzXOzyYy3xtmhzJNwRSbTFWt3WXOXDs79VPnz2B/TP1X58laZwT00pn+wD/1eWnUfh3Qf87nuBHwtxZNgimZ0G9+8oXmTcSakya1CawpuU+u0WFKJx6n0oPvzmBPX+Dh9+S5Q6z4+R/ybq7DY+/LBLndPFyH8r9V45I376O2t9zLQv+V1QRvwYtReRET9MnePJKP90/20wg5+Wfz8z8kn3r0Yz/KftQ38j+OFOhT/AjHxaqXNaGeXTpvAHmcFP6/9gM/JJ288hZvCb1TgN17LUeK7KhnNevrlStCOEynOc7GfNDiq/FvHKy0/mXWLduqUMylfBZ1jAe6l1mCBrOtRedwqrkhGrFyNWNSNWDSNWLSNWb0asPoxYnPLirCMnX3WMWJy62pcRi7Nvc8q+vkTr2GO/fh72i7OOnLJvYMTi1Pt+jFicfbtU+yOnjS7VsZazHRsZsX4J49AvoY6cfHHa1VIdt/uXKF+c8hrAiDWQEYvTNynVMa2nP666OpbquP1LmKdx6sQgRqxS1fvBjFilutYxhBHLpI1WeeE7WuqcIBnUuQz4Gf7x6Jm5mTM+o53Ue6whJ7vsakNlh1B5jkM/E4DvkWF+FN+1RFoh+zPavUQk7ra3R8PtnU3Nzc0hhK94xXF43Z96B5h6vkA9O2eUdbtu/6FKqwBp+N29SpCmeJR59kL81xjiP4j8YfnUGZU7gjrk05aNTrauwf5I7YvB3xSC71irfTlwXwz+DhXEw+f/Qjz5/6zyDK/wPsgjrJ/ujJ1yn3h4HULxsFxY3ubJ7PvwmZ6YF1zfcoJPShZlhCzqCN7LEQbspwpP+njp962STjrAPiNDr9TvCoAL8yvsSpT/XLD3agXg9ce8RHky3zWafCGf/z9iEHEVyey4mmTX/OXJrvlV2bXJrjyqtN4gDdoKGfqkfkN5QSzFRyXKf2Uqs2qTanCPur+BKL8alZ/FNxEHdQFjlRNxUOcuSmVIn6kGyuZ+Xv1jmQgfxmHelO6Y2L8Yb4+2tbS3dTS5nW6b1xbJtX+xKZVQg9K45VRD1JMLv9ULt8Px3AD/EWqPJB9+Zo9JuRn+XTVGwvOgcV0c8F/lw/fAPDuCPHgMV3l2Bnl29sHZA+TZwwdnL5BnLx+c/UGe/X1wDgR5DvTB6QB5Onxw4iBP3AfnUJDnUB+cqSDPVB+cI0GeI31wZoI8M31wjgJ5jvLBmQ/yzPfBOQ7kOc4H53iQ53gfnFNAnlN8cBaCPAt9cM4Eec70wTkL5DnLB2cZyLPMB+dckOdcH5wLQJ4LfHAuAnku8sG5HOS53AfnSpDnSh+c60Ce63xwrgd5rvfBuQXkucUH5zaQ5zYfnLtAnrsQTo1D+4iTUr//v72ri5HsuMp1p6dnd+dnd2bHJgmKYgNKgqJgunt+dgaBtJZnd/3veL2yYlvBmZ+ezYTN2tldAxZYauABEAEEAgkRpLyAxZ8UXuAFJESEAoiXSDzwgPgHISJ4QDwAigRMzdbp/vrrr6pv73b19Ky7pNa9fe+5p06dqjp1qs6pOrX7SBu11c28cvZCjfVYLH/e8+3LxwWx/GddzjGt48un4q0gf9CX7wim1aGnoHfTrd5yqLmwldvPG68AHLetKYC7CvevuG4a1JxN6VQ5Y5ts1HY21V6H4dXZek3VAc7zfJqGdzP0DuvgFPDzCsF94Ec6cFMleF1xI+Z1vb6dl9f1kfH6Y8BrjrWRY/0S22mmGD+NZUE/n6Ns83vn9Dza+Gd8wnksz6NxTj7d6s7H5qw4j0ZcRkeV4F8M/9Xahn2/KPLHuSbnpfLnebRaXzgj4D0/nw73fq5ocyzcdzrM/mD4t7LgrzUM/6U8+Ntz3MutDi+HhLvNmyt5aF8x/E/mwb9qeyWXQyNUelgxRH7xmqTlgXnnsd2sT+KzpfkzbvHZ1vmMAG4bhcsXn+2tcFU2tJTNxGRMId6lbCbvRVxKzgyTLmVLVOct+zayF+5TsSULeod4KwkaWX74tCC+KyJX53rllMpH0ZySt4Pmk1c+12qKX2zL4vizSFem+UDpcYNt63nkdGfc6HemOtdbHr+Eeq1M30V6lVxn/6d+ch3PPhxErv90uKqzTmMxVJygwfL2yfP8x8O9ivnEdltVb+qc80XxPfNQ+aHcq/xQNKf63b3mk9Il8rTR2oW8/ha1tbz+KLV1dZaDGx7+urLzW934+voVeI7vYmfR21yUz0r5VcD5pXCfikGtYnBO0ztscxyTUfmBzIlyTIlycHv0Pzw7KbXeaM/7xeDiWKOpuGYqb5w7XGp1w58bkNZFAY/+eQtEK9K3OCCtW63+eadoXRLwiwlasRxLA9J6pdU/7xSt5wX8UoJWLMf5AWnlc3TPD0jrsoA/n6AVy7E8AK0si2N5p2h9SMAvJ2jFcjw0IK2zI6a1Kmjl+ItfCVcv1xaL7u9VLB511vh0pFyxc6pZrhv8n4Srl5cfKDTOKadlYOoceStH3rMJ149i1Xyw6NDBdVZtdZfpYXhXEfBc/+psQtzPYzxSZxPyOKDiCGF7tHFA8dNoPA5+pmL7qf6Uiu33cIIHyKNF18tr9jlX4yTyOMXP0cT20/xEGsvwE+EHlU/GI3U+Jo/9SudBHqf4eZz9PRXfIKUb+VRmHEU+GY/UOa6sn6j+jjxO8dNoHLf+vtinTIPqe9zfkYesQz2I/X2xT5kG5Sf3d+Qnr5Mo+wXqDJeIVuPhjEvPiaoE/41w9bxpFN304RyQ24JaT1R6Fs8dUYfiNZy2rd9pfrOeZPBTRacMH4D69Un5G+RtZ3XZzrDuuJ2l5rNH5XPd8P1inHJd4dhcxv9E9dtUO8M6jbWzBagjbme4RrZAtKt1LdTNU+WYEuUouyYz7mcyvz8geODOZD4kYH3/Qm2tsbfabOz1zT/nXplHAwLfLr6V5EpV5Ofh6gm4InI9wiGeTbe6n437XpnHAoJx3ivzUeo3WPZh25OO8iT8+Ixps4/G4axz2x96ovfK1FYvjGqvTCUP/kZeP+rOXpmtVjd+R/mqPab2jfIDt/HWj/emA/j7c4DPJ/Yv8Cnn/qPDNrGeuc7qyxH6fWr7hrlO6pINxAvEo3y6Ee/Y6yzh/3HrLI+E+4lsS6bM+wBr9VHtA9xqdfCrPpmSbSy/FuEbn3h+hO8ui3xzlvmwTaxlHi/avuhqjGCfaVc+33q/jE1uml5SEXRgP1M2dIR34lnh4rKX86gIfFbuhQRtqX05Cy49boy7fP9Q+H/c8v1bwv1EvifTRHd1E92VUindFc+hQj5XXVy2VQnWbLFe312O4CujC1ci3+H8lXG4IfIrJeuRjpOuuz8a/h+3bL8e7k+2bF9bn+ju6WSyHX2vyuru9g3qi/7+EfjGJzzrg3X3p0W+9g5jalfo3bPwjvdsPwfveO8rninCe19fgHen6B2eM8Lnpb0I7/ictavwjn2FXoJ3c/TuGrybp3d4nkl7L2n4j/apIY6Hmyoe2BDb4d6yoJ/t/3n2iHb2cG7lwV/PvEd0hfeIDhn/auZ9onum72wHfEpXZL0vkzxssv7iXK/NCPMf1XkXFaKH+WP3XlbY/PB6884n3tq5cbD7TPPt24/f3PvE9q07B9s3Ht/bu9W8fRtLoyQsv8fEMAzH8GVLsdW6e0151dvzfieAPEG4lAZruMpatZVnfpW+m4nkgzDqhAF8r/Bzfcz0ofky0azyzLsrt7ZmtJ5O0Ir5qx1Ip0dDa/vU1zMD0qp211boP8MhzIz4Ht+fFnkXo+HJBePJ7IA8wXLPjobWDaN1bkBacaY1NxpaN43W+QFpxR1U8/TdvChHqq2pvOdE3iNqa9vGE7WbIcUTLDdrw5lobZ9QfHZAWnHcPDsaWneN1nMD0qo08Qr9ZziEmRHf4/uzIm8e41I0+2Qa6blEnqnV/tTqFu8+xzF0gf7jmMW7W1Eeqt3Dc/QO++ACvcP2E9vlimOGOgFilt6h/Jund2pH30lYRdsP/ycW8PvHfzj7355YSNJpFBYS82L39+cBn0/KQmLvcNbOK2x8MhO+w1W70Zzw1rG6ZBoLV1MnvLHl28s+i65yOJM+nEO/vH3jYG/7zsEbN682P/9W8/YdPpikQv/5PR+Mb1kjHKeC/scM5fZ/SsBhShlI1HDIQx6KsNRQiWydGNTLDRcTZ9BSaSWzOF/JKeZ8UsNFbEnJJxPveG803euQwn0dcaMRHp2xlJF32O1GqerDwO/TsqAf+x86jM7D/c037hzsv/38WzduHOwfNPeef+NO01Fi0R8Ty1gs/o6TwU18TsuLUPN3OOEidG1UIrTIg7+WuysrEaq6te/S83CPM+rY95l9i1bHwbfIRLrnjc3sD7Xcq9s399743OWD5o09lmDI3VQ6CdLKTlQ4bmnVCPcnXFqNLFJOLjtH5tNgpbRSJ+NZGzavGLy/X4Uvs0f8emYervA6p3O9EjvTCXyrSvZV6BnmP6pTNJVdVZ2iqXbp83rPdKu3HLy7Fuv3aPc9wHHb4vVpXOSwtSVeR/fJ2rvH/1HI69vDfeZJyM5xTkLs2alWhx/tmQI8qwL/jviD8PQOdzNPt7rzudcoAx8J/8c5yoCtvc+5jtbzccDHfcX6D+oR6FVj6693J4NP3Gpu39FTQRX+Ev9PRYgou3qI+F0iL8aJcCdlWlkP/49bUauEFydbUbuwc7JX5hojW5lDo0lqZc7g+BsUJE8CzJMRmKcA5qkITEwpRJhnAOaZCMyzAPNsBOY5gHkuAlMmVOMLAPNCBCYWzhFhXgSYFyMwVwHmagTmJYB5KQJzDWCuRWDKhJd8GWBejsDEQlAizCcB5pMRmFcA5pUIzKsA82oE5jWAeS0CUyYk5qcA5lMRmFjYTIR5HWBej8B8GmA+HYHZBpjtCMwOwOxEYHYBJhbGcw9g9iIwTYBpRmD2AWY/AnMdYK5HYD4DMJ8BmArAHADMAcGMatU/j0xv1NUEpK1Qum4dbMh5NwrKzzk9cbT8RxW2J+V07FNq4ljQu+lWbznUxNHq1yviWwDHbYutyriYYe1XWa+s3Xr8L0Be11w37fhNhfJ3rvcIgRx1sVFb387b7nUowNSkPxX6MlZ3PmFIX+ZdnsWmDu/y9JN6PXX8grWVcZ+kPx/+j/Mk/Uq4fwBCAebe5rWad5vXavvoj7+yOnM55VMnnN4kLNIkLBLinSJ4vLfv8dleuA47LNL3Utlyhyti3azf0TpVgv8hoP2zhFPVI+pB7EB6BnAxPOKrEvzNcPXv/95pnLFyxXDeBlo+H+6V7LAy+GdvO13+wqV5Wrb8UxFaf8B1yv9PEVqRHqQ15UXpr+8k4KoCriBaK07r+jZepeTxvbZzLDPLLuynwzbWoXxQ5eb8/W8OylBxvTKI4VWbQvxzBN9ea3dalvKRzgb/M+HqefkTERqc623XPm21NA0zbrA++IVwxX6t6hjbtdGtNkqmNqD6dDFca/eX6nnbWqONn0PsDIn+thvVXB78G8qrG2XJL1K+5kpVVoYb/BcB5y+Fe7XJm/UJ5W0+5/Rx7/crq3BzFesNZ+Eb1c9Mhlp9YTiCYerMRo/N6VCWLAp6qgT/LpXrPPCnQmVFPAa/JPJF2xmPi0uUr28f/xLu1SYzbHu/TrSeA9wV+jZV5t8HnL8V7tXmUQ6hgBsUF4iW9hqJ0+0hFkLhd1yHD193HT74NPpQMndDKPw70MF9qtrqLrfakInwbNvuF5aP+6AKM8OyB3GpsS4V7kDJFcOr5F0q1Au3H2zvMxF4w8f94w/DVenNS/AN93WUi4zzj4GWr7ju8mMdzALc1yJ5Y/krojwsT2J68xLRavB/6uLlXxTlx5AuZwinwf854Px6hE4slxob7Hm/0IJGjwqDaN8q3hsc8l7hYPlj+c063SbmiFYVHqdw3WVXfXtJ0Jqq6yWRD9f1X4ar0iUXInTG6EOZsNW6e1XjSnsN1HXGlXH3ffm78P+BCz0yYIiEYeff2NhY32zsHFoe93b391ZXRp3/+up6fWNje2N3fXd/c3V3Z9T5766t7+weVkKteXQadOM4Q7/8h8Ee/v4z3LP9CfPzcBaGSsEVkesRDvFsutX9TNkuxin0y/+F/+Mc+uW/DV+4YtmHvWZ+lCfhx2dMm7Ud364Nwcn26VvfO9k+ffXGqHz60B8u5dMX86GrAEzMhw5hYj50CBPzoUOYmA8dwsR86BAm5kOHMDEfOoSJ+dAhTMyHDmFiPnQIE/OhQ5iYDx3CxHzoECbmQ4cwMR86hIn50CFMzIfOvx/VBoecfifYxxyUJa+/VXm77nvN36oBcNy2Uv5W1n6Vv5W1W4//eyCvy66bdsSXmmvn9Rla28s8jkl/K67X6VZ33vgO624a+Nkg/uTQU5A/Ofjv+ZPalszzCOe0/m08Oi6fqu8O/8fZp2ot3Md8qvzvYnheu7+0mtenquOzdSkL/s7R33l8qjq6/5U8+NtHfz+ZB3+7fp/Kg79p+J/Ogb/eCWc1A2sGMd2kjO7gE9ss+DBpzKc6xHxQX7N36uDLgu6V7jGTyEfpSZk3d7d9Nk4Dncq+zD5lOHdXPhWnIrwoIvjPjKa8Pf51aE9VBwMoPwbnhiunPM5MfgwbVSrvT4WrL+urlCfaLriOfOI9dPNURwzDfWMB8lb9wb5l2+3r4Xp0pEzRjVP57OFB1FuE0+B3AOe5QtPpXFpvtuep8PZIj5IZZ+m7lI1T4eawIwoP27C4nFPwbFbgVr4VQ2yj0reiEHkaPexn8CbRhb4VhUvzzP+WRL64Nj9L+S5RvkcHg1IbMtrmnJYvXCczlAe3K/ZrMPjvD1f//064V4cPnwK4dyJ5o03znKD1jNP8uxj+1+4rNXraAfJC1R+3A/PD9eV+uIjzIubb6ZOa/4/CF+T9RC/KxSrRpOST0isGlU+Lrrd+T9M75SNbCBrUGM/yDH0WFTz3CYP/yXD1/x8ruulTB8z6q417SgazzxmuS6fGqX4+fD8bwRvzXTJdv0rw/wU4fz7cZ1673+A6RT2P80R65vLQk9Tb5gQ93Ga+6Lrrot3fnZbPFYKfF/kqv8WY/yWOERWRB7YvtcfEDZGXZfb/ZKrHzYLyM37gM8x/VPt/VPCS1P6f+Tz0bHjdYtF1tw+fcJ6ugpFge1FyCcf/d+E59xklly61Ou8R/suA8zfC/TmR9zS9476laClcbz9xLj1nxnVdfod+FZxXzLfY5LwKjsRrD7wfwCdcu+Ex2eqw6rQ8YHli8L8brmreovw0U3qB0iPUnE4FwWH9VeWN9YbrfPh9zF8R/d0R/g9cp/yPFRpnNVKeagQn+oAyT5XulOJpv4ArRo8KTMN+d/14av2SaS3LU4P/quuU/7FI+cvy1OD/DHAyTxWPUjzt58vMPFV+v2V5iuvFmE9Znhr816D8zFMlb1M8Nfi/AJyj5imWeZG+iwXAwvk3jufqu9kEzoUITiW/YmNjrC6VTOO6/OtwVXWpyrVQslxnh1SuswOWy+D/MVO5KpFyVQYs10KfcrGub/D/WqJc2Pdw7N5qdeM0+H8DnNb31JoBrhv7NN3qpvdieF67r6TXDFCHrba6y50KOufToLoBrwtwH8V3qb2Zqk2gDmZ6g9Jp7VvUaVXQTdbVUvu8fdpqdd4j/DfCtV8bsLzHbd1I7VlNjRFqToRzUtbFsW7Z/lMVuFQ9p9aZyq63jPv+grmA4EHbX3Dc/v2D+tc/cPsLNtf3N1dWduorm3vNzfr6ce4v+GBA4Pvlh0hWVkV+Hu47EnBF5HqEQzybbnU/G/f9BR8LCMZ5f8G3kdzCsg97Te4oT8KPz5g2azvjsG/qN8P9yd7fsDay/Q1FHvwjC4VzqdXBj2WxfDFw5JFt0nXDox5UITzOjcpP927oI9a9hqivbuTy071F/Mnjp9vhTw7+e/6k/HSVP2kOWbKVAz/4A76TqKtieOWpKb/5gvLO1M5L27gs/1mXs111bFzTRA/zh+VMpn0qG6k5oZq389yW6w7nmzinVzb+Kdc7P8Xz5ar07MPhmjpXq6B3zqXn1/7ZI1S2XH6xbBOrDCEfbh8+XQzX2n2lRo1tn5hPGbt1Hr/RxuTcyjR/TtS5ld8VrurcSu7Tg5xbuUplQ73ufvu08ovKu6evoz9nOgt2g9ukc8PVZ7huh9neld/2MOlXPgzoz7YFz/Ed9hUll3hN+ynAaWdCq/Ph8Aw45UPH48pcJD+U52xjeQ5oeS3clw+TyScZxlJmD549dZqXJXt3tiTdvKqMdPte82OAl+E4T1ydt/xVTbKFZtBdLPj9DL2bEvmoER89Q19L0MqeRZj3FL1TFkpl2WQ444PyhMDv+DQsg98JV1+mnwP4wmmrfcoq189qv0BlVp4QahaOI4pP0/BumDMjz4NfADq4vNVWd3lTlnDFn9QpeQbjXKfNIe/Yq121e+xXNhNPWTlj/1OW1Ir4bpDRwCdbhXdOr3Ybn49rN+8Ph//jvJv3rXB/EqL1/Wj4f9wWRbXCw9rtxXukhVNKy867wlN+NsgrPLksAQXlZ/Qwf0azwtOooRcz8mir1csbRYdPSgtleV+I8qq2uRj53qd+3sIP8ilwdiK0l3e/7Dr8OIJt9eaHnt7vRSvtu+H/OFtpv2T4whXLftxWWms7D46VdH11YiVNp4mVdJBU359YSdP8mVhJHwQraaN2rzr0e8RKul8QfqRnYiUdXNecWEknVlKjJ9bmJlbSiZV00JTZSro/sZLG6Z9YSe+miZXUUTknVtIO3MRKepKspI3axEra28YmVtKJldTom1hJy6eJlbSdJlZSN7GSOjexkuK7iZX0bsKyj5OVdCUgONlW0tWR7SXNZB1o5B0rO1ZSPo/fUb4sh/EbNdZbHC2vc5ju7u+/CfD5hLG0WD/IZCnczVxn9XGyFLrh4c4dm2Mlc2yOVRWbIwd/MsXmqKnYHEOkv25zhGbA5+fBZgk7XN176uZe8webe9e2r18/uHn9pebureadx2+/1Dx8fIvVfDaYoYGPk7GJcRT0fyqBwzm9sIpGsAXxjEVOpsX61TIqF+Y/63JOAdJhypA/U8S7U4JWFX49ZgDGfE6JfBSuqSHi4vrG+rgYrrXB0go/yGvMq22ycQ6TvZsVZS4EvFrCNrr99fsAL8NxnlhPs/ROLb8px4F5eod1x8unakpYuOFNPVOGlnvNJxU6iOWdulo+rk8+ije5DZ+sKuZymuBj2WaGmA+2RTaGY1+xId7DPwHf4HfqiGWfTH1iZ5arroPzcrjPuxRUu8D9DJO9O03lw3fKOK9kELcNZYYqK58wzOUXAC/DcTmUCUstL7Wn8K63jq6Fq6d5B75BnEY30upTGeeF04IOdQw4h60at7FG1TO3DzSzcPtAsxD3dzQFIU849Rvbfg3wMpwlVc9K/8C8bGqn2h0eh29yY9zNF58N/8fBfGFTkzLmhUzT+9K6fHvp0PWOlTl0+QrRw/zh/qccEXm89Wmr1YHjdxXxbGrEuNRR4SxrFW8qiXzU0s3xOS3X1sq2uXF1Wua5N37LIZR82mp14Phdamw9Kbjse59SJi41t0q1Rw4RhfVjy14sSwc5ulqZBRE3O5Rx2Khc4TV57MC8MuvQ62oeYknNY7ne1dHWSr/melf6dSFo6KdD/y3gZThLqo0U9E453yvdlceaQtCVcqxVrjin6B22e1wuRZzOaZc5099S6wyxPqScLgcJ4zMtyuQT9y+D/+1wzetQq/vXGSrDKSiD4uulVncZDP6r4ephv+y6eTZDeeA7tUZ4zvX2Ka4HpJvrQTm1n06UweB/L1w97PsCocfnyldb9XR8M9CBtB7R3+outzpyH+FZn0qFdUCeLRK8kiFqDEWeP0G0omudmjezA7PB/1G4elibFCkZNEu0Y9lZzlREvmrN6gzQ/DfhPrPNYWRrOzwuYTsYdFwyXgw6Lg1DTkxTfuPSb3Hthfst9tGKgOd+26+fm/6o3MW5fauxYJA+41PKTRfdzK3PxNYBqqIM/rt/AHxYjyjf8VuW7wb/P0DLP4f7HDpRv3bJ9Wv5qQ0vxzH/tPxnncupj9RT7T+1wS5TeNHV1Lio+qN3wTzreutMhaVCXdZcI1T7Yn1s0K0h+D3r2ljHKR2d5UAZHR3be78NTAXhUv1YjQf97Nwc5tzw/2+4+u8ttLfqv9zv1ZxO6Z/c72NzuljbQj2JZb3anqH0sDJhNhWuU4m8+4X+5rxVeDqmxbl4H1FjtvEm85i9psbsYYZEU7xU9ajCqC/QO+zH3B8x39T2L+7j2E6t/WJ/UWt/qMPbGP0gu3JbKCJf3keBL0ewIj8P950JuCJyPcIhnk23up+Nuyv3x0HW+jSOrtwfDh+Noyu3tZ1xCEv0vnB/wl3J1yeu5Olk48lWqxu/c3oeg+3FvlF23Uvh3WkHWyJdZ5xjX74c9c7j4zD5tizo53XmpfDfj/sfCfcHN3dvNT/XvHnn8Tff7HLKPXLUNc9cR4kt5gX97+dlexI2XNomg+P2WEAvHZ/waLkcku+hPPhragXxYbh/iMqJbefikGgwfNYOqq43sfZlsDwTKIZPX91RUlqYpeVwfQiePRyhNdOKTsPwZ1oRkW0GV2vm6J3V3bT4roj8V7IqBlsk8C6Id4bT6grptXKYVMbDJQzvMHmJ1oMM+NvyI5N1fkW1BT7WzTndZ3hUZ5k6ZFq32zM9oKFCeTKNCKPaL4+l0/S8UgJWtV/0oGH6+Dv2NuVn6GXJievFZFQ1ggtX5xD+FMHmqsNlQZPR/v8f10Y72ewdAA==",
      "debug_symbols": "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",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "notify_created_nullifier_oracle_wrapper"
      ],
      "verification_key": "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"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "admin",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "length": 17,
            "item_types": []
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4718290446670665014": {
            "error_kind": "string",
            "string": "NFT not found when transferring to public"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "11873158822563704285": {
            "error_kind": "string",
            "string": "Mismatch return note field."
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "18313900523101689315": {
            "error_kind": "string",
            "string": "Note contract address mismatch."
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "get_public_keys_and_partial_address",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAAAA2GUqJka\nMyv5O9KENcCLUcPYVwGfmeV9eTbfvjHbG1oVjedoqhOEiT1rfARNkDvw09yJsIy5qL/oDRe7Kd8J\nPAEzNicfQEVzF5HfT5M+oY7NErDZsG63V2PyiC8jtNb0L6ri+rZFcvmXmS9a8jJepaNwOCTGd1dK\nBLj0e647Of4qdrlZkA2IdSbSDaYL1CBVo92jxu0iqbEM/oucjvoH/hsftqnHGjmm02nOzca8odMq\n741bp9+Ar/87ypD5rrlrEwjtnWKn2nX69J6keq0bjgjJiwvegcne6V0q/oyISIAPp8BXHTqj6LgT\nXh34KHsYYoTn59Foyn9fG/sFEAXiRy6C8ZW9+aXwcCI7ApJNorsWaGzpMafGFxD7gp3PzQ58C18a\nxGMSQzMikUirnLpeowRFI30rccBxm66MRSgoa6EUzAhw3wRmXqneHBJH3wNLrjWycNUQ6CWeIOZF\nANTixRq1COp26V/lKaQ7fGCHOOVkmIDjIqggPqChiZmpcYP+IuSmLVifXcWOAD4X0sKeZqqcjXq3\nWBuYEO2nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icCmMMxH8kXD5LelAsEKq\nuZDVPGo7JjOc2mtz35IIMUFZB7BfQIphKEclkBa5IErkvzdTfrGWsFwdmPpRAWqbrLsCPmOs0GFC\n+qKsVKuqEXGsdJWKB4Uv8n/z9Fu/miJy2CvfaAz7kYx0i29sCAzWI0QVFjzHCdunCI3Ll5XF6jFj\nBPz3KfkZ6SJIgTYoLCMhmGxA4+kriH3xbZGQ2XFjT6wCKyZVnUoYwMYPT06xZrB6XVpIV8bNCOMN\nreZr6b4caRmz7hM37OYMZEaDHOA0ls4ypkWhz4tfCGNY/9jEfYwFJnnwhPJ7oSVWC6jwqzoIu2mE\nI4Ktt7EbaGmvMSBwJ7AIGN8DBg/1+RRiTOpEEzLMoXL0pNrNRottzA2D2gYx5ASkDg84okHMNOIG\n7bOR8VpT0ZeMCeXugLq3x/4zGoQQHWMPPpJn+NqTSRqqGXWBKdMaesD6uHWoDqJXaQ7E7scXo2wF\nfKrfTFC3sSp+7kPAOha0Db+d0fRRv9OGRlDQDAyGeeRVM5S3LSwwsgnDOQbMbiYMfGDIDBJpKRYz\nNXZCL21nS0Juf08JOl4hyAsVUAMitqFWkg3XjnvINUljNGkaNJGSDi4SiXhrIAnLK7f4weWG10B/\nmEy2ZUiugxIsUikoZasNqTojV7375zQbsyV4/UJ5V+fXCQXLuGxUxAL3FpSOkjaehPQ0vXP0Rkoa\nSOhLqoJVkEXJdYBomK0arJ4lFAT4AlicmaMt+8lHcZNAau3jXTnIa7vJqS2A73/uXidAANTvN2qN\n82PyR5fVZc9VgaUIFYW/A+H7flR68QQjJgdws4/45IA8SqX2+X7igMXz7Yw0JixFuF496s80VmQN\nhhDzV5Oj+ZOg2TgxZYoKIxg3gNwdHJPDNz7TFvwICxdjGuWVBU7P94S8XO4W4f47tJbe43SxyVWg\nJsmuK4dfAvsx4XtdDOxaYJEW80ALzL0FXu/0YbrzufyMhTVI84MUy9Ah1h0DsRvICWgzmzdjgq2W\n0FF3PTz09h8RIpuMawXP9TBQ3+KerA0YMJ03f+qv+/Zf7n+fHTELUYPVK1HRKkGz4UlP18gEPrPx\nFu5ZjPrPeyMjiU6SBtL9EXqwsrIhtl4j6rzCJuTfbkhhPm6LwqpoIu6w3os0wt0ZDbsBnwApVZLN\nYK5jJ7d5J89dopn5oNKD7Uc63M3iylO5fuE6GxKmysIXeLxzBgR7I6PKCGyVNxk6QpU6LkVtjfa9\nbTUlI7bX6Jp2X02BPEsEvO049ltd1VeEVfbVrtJXNlD8agrcicSNdbVxY29bvrSoBvb0WWICMBtq\n5OsOu+rdIDNABm8oE1dI8RljHD/gf6nXAANOPidFTvmStL+EuXuqdHEuJXg1Ud9QwATsfNH03Ys7\nZKZvKsSXm2XlZWjFoxsU7Rj3bPDO7MtHmN50GuibZOglj4RHfBtiVlpVm6e7OIMuLSmftoZ40BUL\nzFsW3IJSNT1D+nDpkjnBwcZ+JxoO6sUV06xaGZq7dJM6TvyYxZsoFO3nzSfa7QDDPBKGC8SwRi04\n1tS6Hkdjp07NsRyh80aWgMJw5VFRU0RZL1kYj6dlEts56JKCazJhDuCCUeAF/OkXwNXcoBlHfFL2\nB1MythIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAACJiYWV/ZPTdaazQooZkMNSLy/NEN10/4CnLmmZuJcvJoQlvdUFbrcqjbOEf+q\nrnyHa1ezfQDD5CH5lzY9NHHcGwDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04s\nAZaN5cMkgqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJ\niS18GKk8Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "owner_of",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9443383425599897888": {
            "error_kind": "string",
            "string": "Function owner_of can only be called statically"
          },
          "9605075991997100073": {
            "error_kind": "string",
            "string": "token does not exist"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "5V3bbuM4DP2XPOdBlESRml9ZLAa9pIMARVv0ssCi6L+vncaKG+tSczMey34p6oKnPEcXkrJl+X1zu7t++/Vz/3D3+LL58df75v7x5up1//jQXL1/bDfXz/v7+/2vn/0/b1T7A7Q5AF6erh7a65fXq+fXzQ8wGtV2s3u4bX83jM0/udvf75orsB/bob3SujNXVvesIWJtnYOjtXWkgjX5iDGjwqMxo4a+8d/bhj9fhr/3nTmAn5C/uVD7I4f251L7AxJ11s6YPH+PvhPrnbHn/C1cmj/or/wPXvwUXtBGveim2zqYRmsKXqgZTEdzauwLratdN3G8ZjxvXfTfYfRVd4tzVogT+iOS4VjHcWQw4AhdwKGKdqszp8nb6x4yn05oAid+CiXe/X4nWqkpnNgpnPgJnMAUSoAncKIvMoSBQ4zV/RnfOBlaI/ougDvWthcfKBZZQ9ol4pNtk+9a+kbVTZ+rpm9d1fQRvkGfoETfBmvo1YWtkwghZNsxcqpQJ5Dhbu6S7ZUuUeNmcpMLRKzyZ2WFRvoDaumkVhdqZqSuKEI+kTf4Gaecrpp91W1P32p702ffwljJYBiHsTqFCTb6/6U9r6ZwMokS//udGGWmcEITOAE9hZMplGiYwslFhvCfyvDGmKrpW6ibvq+afurO0Bf6lpZRHlobnyrYgbQ6eTAGY3x8kEren2KJ9hyxNtR1lO3dYNSxNtQaun+sde/WZdQYbXebEy33TQ8iaQUiUa9B5Bp60q2hJ90aepJgDSLX0JO8hjnJvAKRfg0VT+L2QH0iGcIdKn0mEtVSejIrcilzMicSFhJdXbB1X01bkWYhwzUvciHFQFakXcNwXcqiOStyKYvmvMg19KRbyFIrL3INPUlrmJO0kLIuK5LXUPHwQpZaWZHerkFklXOyYe5UlSHzwLzKjNYyhyoLjgNzrJW5VtUyrzKAHphXGxXrvOFyYF5tVLTVRsXEruYKmGO1URGrjYpYZdXfMnfVZn9XbZtTteOcZxxbDHQb4bTRbsB8xuO8wHzG4zzPfM7P1gvMZ1xxZZmTmnHFVWBe6wwlVesMJZhxJiowr7bNda1Rkea89s8zNzO+I1pgPuN1aJ65rbVWJFttVLTVztA5b70oMK+2VpzzmwUF5jOOik3g61gQyo1bmTTjEDpGJrjwRhuQ0gOZM45aF5TJCxm0BZl+xivQS8qc8XJ1lEzy4Ug4hvNIy2opIagg065D5lIibV7mnF8guKTMpSSUvMw5b/O4pMx1JBSzjt4060goZikJxZtwBI63A5lz3g1yQZmJU0ZV8ACqdzLYJ8gnKsQCKD49AEPJDXRecvtEWs+DEtmjAEIJKP5IAjgcuaLVoCESu3Xs6fjc/qkuHchKQCwAJW4RFUBOACKJJpbQS5wKjDZ0LvZO4TuCUs+ycyBQqdVTAYUSVGoHcgHlJCgt8pWqcHyISQ7MAJXat1lAsQSVivN5VOII0RJK1BqpnWZ5lBO1YeLVK3PKIQb1EEUSFIMIhSKUl6ASEaCEkrQGKC1CiXwBiFAoQklaPvmlCheOYDMMQ5SXoBLPWwuo1LcQCiiSoBJPygoop0QoQVJuUCxBkRahJL4Sh9CT60pWcnaAiWcvH47O9OSGGD8eE893BQyNxyTGbLZuh9Rp3wUUKhEKJSgn8uVEvkjki0S+WOSLRf3lRb68SFficKI8KnUYcQlFEhSACOVGxxgTX6w2y9FuHtsIZnxcMvFZnPeDAm7xhWoBw+Mx8WVqvg3c+JhpSOCH4m3N3Tj4cjfoiIlXwwWMwE98nvf0xDDjx5uN70ouYHg8BowAMz5H2/j7mwWMwI+gFrCCWsBaQf/YkePgo7n65+p5f3V9vzt+ne7u7eGm97G613+fdmffrXt6frzZ3b4979ov2J0+XtcOW820NYpbLu2lwy2pQ0nYXIBz26YMbXw2fv8D",
      "brillig_names": [
        "owner_of"
      ]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACSHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAC7HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAAzS8MAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAuioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF0E3qz6yL/WM8AQECJg==",
      "debug_symbols": "vZXbisIwEIbfJde9yMxkcvBVlkWqRimUVmpdWMR330Satrphu4h4Uzrlm/6TOWQuYuc358O6avbtSaw+LqJut2VftU2wLtdCbLqqrqvDev5ZyPgwfONPx7KJ5qkvu16sgJBlIXyzi+9kOfxjX9U+WKCuxW9eIiZcKpzRkKGV1jDQShs50sZlYMuSB9gywhz+LISVrwnfuYQDuDeG/6Lssx2zb5eyD2xMojXR3+E7dumsTpN6CN/Rq8MHvA8/itg3iIDU71AByKpg6IzkhqxoQcWEfh1wE/iFCqJOo+nQ8kMFAfR/Iro/d/RDeNLvST1ST/q5nJ/C0U2hmkaYZSaDpDGNMGlrJwmbHS80412CbrpLMDuMhq1KpdRyoZSGLCVYzborCwOQ0WMvKunuKn8N1lfZVeWm9sOO2J+b7Wxl9N9H/7A9jl279btz5+MemVYIxDsYTUF4a6hgEBXEQSPo/AA=",
      "brillig_names": [
        "public_get_symbol"
      ]
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACbHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAADEHgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAA1icCAQADLwwAAQACLQwCASYoAIAEBHgADQAAAIAEgAMkAIADAAAAwyoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF+0Le07wSjQI8AQECJg==",
      "debug_symbols": "7VXbioNADP2XefZhkswt/ZVlKba1RRAt1i4spf++M8VR6w7rUkqf+iJGTjxnkpzJReyKzfmwLut9cxKrj4uomm3elU3to8s1E5u2rKrysJ5+FjI8rL7hT8e8DuGpy9tOrIBQy0wU9S68k9P+H/uyKnwE6pr9xkvECJcKJ2hIoJUx0KOVsXJAW06AnZa6BzuNMAV/ZsLJ58hnjnAAfqH8J1Vfu6H6bqn6oK2NaEP0t3zWHM/KhtRMPtOz5QPeyw8k7gUkIM0rWACSLOgnI6ahVrTAYv289nDr8QsdRBOtyej0rIMA5j+K7s8d8hAezHuQj9SDeZzKI3YULSzlaGEtExUkg9HCZJwbKVzSXmiHuwR5vEswaUarnYqtNHKhlZYG1VZNpisJBiBrhllUkuedV+pdmURlrj76ytsy31RFvz3353o7Wabd97GY7dVj22yL3bktwoYdlyuE7YSckbpZzQekM7Kew/P8AA==",
      "brillig_names": [
        "public_get_name"
      ]
    },
    {
      "name": "_store_nft_set_partial_note",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "partial_note",
            "type": {
              "kind": "struct",
              "path": "types::nft_note::PartialNFTNote",
              "fields": [
                {
                  "name": "commitment",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "11988194033336150524": {
            "error_kind": "string",
            "string": "Function _store_nft_set_partial_note can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACXHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADAHgIAAgEeAgADAAo4AgMEJAIABAAAAIslAAAA0icCAgABMAwAAgABJigAgAQEeAANAAAAgASAAyQAgAMAAAC/KgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQWmXp71B3Vp/DwBAQIm",
      "debug_symbols": "1VXRjoIwEPyXPvPQ7W7brb9yuRjUakgIGMRLLsZ/v2IsVzlOL4Yj8YWwZJaZDjvsSWz86rhbFtW2PojF20mU9Tpvi7oK1emciVVTlGWxW6aPhewuVl/wh31edeWhzZtWLACVlpnw1aa7R9bhHdui9KECOmc/8VKpCJekEjSMoMkYuKLJWNmjrRsBs5b6CmatIAW/Z4LlNPKdi3AAN6P8idzX3LvPj9wHbW1EG8T78p128azOIA3kO5xaPqhb+R0Jz0AC0szBAjDKAs71bUqCecBCjBQHkJO0/TKAVvUDyHbwBQHGz62SQKvbRNP/RgLUXzwiulF06TPP9SE92efG+hgA4+EgCYyWY05INBEcJue+bZYx/qQsuwceB5Gs+0nUygxdJnpZ9edQfeRNka9Kf91v22O1TtZd+7n3g823b+q13xwb3+3A7/UH3f5QnCFewhCKEC00gSPwfAE=",
      "brillig_names": [
        "_store_nft_set_partial_note"
      ]
    },
    {
      "name": "mint",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6515419266667913063": {
            "error_kind": "string",
            "string": "zero token ID not supported"
          },
          "9296579303138805202": {
            "error_kind": "string",
            "string": "token already exists"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14466155340988305413": {
            "error_kind": "string",
            "string": "caller is not a minter"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3bbty6DobfZa5zobOovsrCRpG2WcUAQVKk6QY2ir779szEnoMoq0MpiWPyplhZ8R+Rn2mRpm3p9+bb3Zdf3z9vH/59/Ln59M/vzf3j19vn7ePD8NPvPzebL0/b+/vt98+n/3ujdv9oD3vBzx+3D7uffz7fPj1vPsUI8WZz9/Bt8wm0jsOf+Hd7f7f5pLX785+bjQ6GpIoUVbQkFWksIPkFJIaJNFai+GWUIakCptLWePUi09aCP9Pd5McrY8bDlTMnR2vkaBeCfjnahaimo2NCDgav/OiAN/r04J39WvexP6XxcK3TW9rfib+HiT/U+Gsfx5jQwdp5+5NPo7MpWHdpv3G97dfm3P7dKNa8ySjodWe9GWPD+pPY9movcp4g8pYgCpoiQuPLBj2Cs8HAqQgJd7BuDHc4GaEQ7tFM4Q7xMlxiwYcpxmxQad4crYI9XqvH6B2SCHY0hPHgdPTTWn8wJyzKHFDLMscvypy0LDppUXSsWhQdq9yyzIFFmaPtssyJb22OH80ZytYzc/JjY3JjARVTOv5ls3MkNzqOic2dFCsGM9kYPf5hY07KIPRg78aSyTs4PXTHz2jh18QvCL8Wflbir42fxF8TPyfx18bPC78Wfl7ir42fzH9N/PBWufD7a35y/9HEL1rhV+MHIwt/0h8f+Un8NfEDmf/a+En+rfEL07Hh/NAdv7fvDK+Mn9x/tPBzSuKvjZ/EXxM/LfHXxs8JvxZ+RuKvjZ/Mf0385PlHIz+5/2ji5+T+t42f9F+a+Hnp/yFQJKhyKPKkAoMi6S+HEqWmR6BIoY5ASQIlgwKSkhEoIFAyKElSMgJFUnIGxStpcyBQJCUjUCQl51Cky49AkdY9BkUiBYEic0oOxTGtU/wRSgiXUJi+zhndeKyJnn7wjmDkWeldQ1AHGL9K11GZjCDP2aojQZCruJEg0zv7ngR5pterCMY0LeYC+jIXB6Y9g54EeTYYehKUXNxIUPN8mtCToFQzjQSZLnLRk6BUM40Emb7o2ZOgVDOtBKWaaSTopJppJSjVTCNBpkuG9CQomaSVoGSSRoJBYrBKMNnJv+QygkyXDulJsEMu1jAtTG2crxD0Po3GBzBH4/fLu+cMp7XKYzwuHKPB7I3vscTvuxmf7Mc1PvZozL+f8fVOhg0146dre7BAnQ2BmOOn50Rx6MhPR6NrkEcL4wUbnaksWD7MWHFaG1e7E+aHJcujNm/uazz6atS8+cfl1j0cTbfeHmyPH9d284G5m7/gfrbq/k70F62ZXOTw9/eGK3wURWUzkSeIPGUk7ygiIIgKX7ZVRIEgihQQkTISUEYCyslNlJES5eQmwskFZSgiAnLQdRAa1pHZQIc397XXDAuFp1Efw/YPzN3WuZt0eVEVWubzokKPc17k8YkiBj+JIGSiSBAVduOpiDxFlAiiwn19RUQBAZSRgDJSopzcRBgpKU0ReYqIcHKTthRRFQQoU5l1nBprUe1MrMw6oOyYfkB5qGS2YZIYpyhIqpbZHBynP2/CRWZLxjDyFS+oQE/bgoGzf3p28Ob2khl6ZcsyJy7KnMJKQe9mzrLo+GXR8cuiU6g43s0cvyhzCnfl72aOe2tzVrWkfYog/Fr4gRV+Tfwk/pr4JYm/Nn4Sfy38tFJGALYBlAhsA6hlCmwEmARgE0AjNyFtAK0SgDWAMxsbDQAlAhsByhzYBtBJFm5ZW3wAGAVgE0AvdyKNACUC2wAGicBGgBKBbQCjFoBtACUC2wCCzIGNAKUf2AZQHom0ApR74SaAw72cAGwCqKUfiFGRsMKoyGyFUDGSBDEqUt0jVKyU7BiVIFRyKk4yM0bFCxWEimRmhIqXzIxRka4HQkUeKKBUJDMjVKT1j1KRih+hAhIrGBWZV3IqRjGtV+a23tKG6Suf/fbeGhDyLPn6bdszNPl4zlg9ETq5kJsR8rzP74mQaVOg3xLFA0JJJ60ImbYbuiKUjNyKMPJ8xNAVoROErQglnbQiZLo2RleEEoWtCJMUNc0IpahpRGiVFDXNCJ0gbEUo6aQVoZZ00oxQ0kkrQiNR2LadlLZM1xzpirBDRn6vvZW07bFG8PtZ79WHth4+svWh3tjwtT3FPsiy59oy7eJYMyZgsx/6Yupj2pipUGH66W2NCs93EK22ExWTFQ+O6cKhNSo8740qVJh+D1yj4oQKQoVpZp6nwrRhUKMisy1CxfL8OqBGRWIFocL0y9cKldhhu/fV3Qe5wja73KlIrGBUEk8q8/NKYSdo7lRAqGRUfKG/wp1KECo5Fc00M1eoyGyLUZHZFqFSWG+NOxWJFYRKYa9k3lQCvv9FDOMAMWSfkIeAxlea2KSYjxMNQROu1+B3uxUNmnG0mt7Z0QpSrkoUFf6stqoCgioqS1KRxtKksTRpLEMay1DOV7SksSzJL/zVqKoqUFT4i0xVlSOp0tVzTMRf9klmnCWTQzTXz0sRv4rnx0kE2/C3EWY1oDRB469mAFoRNJRxcNYwxsFZ4nvR4Cu+VDSEcfDr/MQfTHN9vAG+8MW8xmuC5vrcCcEQNPF6DaEWAEItAIRaAIBwfuD6OEh43XVlgQljgakTnBWY+yHwsOk7RHj1IcLrexFe34v4+l7gT7/6DpFefYhSLd5zCOgwxLq2gk3JCJOMSRQm50xMYd955kwkTjImWuIkZxKEySUTI3GSM5H5JGNSasOxZiJ1bMbEOZZMZvaIH5jwjJNZJp7nfDLPhGXemdsS0agu3ae1MWFZx84ziRInOROJk4wJSJzkTLwwuWSSJE5yJjKfXDLRPPuxFSZSx2ZMNMv7nQoTlvfF80wMg/7JwVEGJ3/vKIfO6cFRBtP+3lHHoDY8OMqg4Ns7WnoZd32OckkvPjFxNHBJL4FLeokMbikPjnJJL8AlvXDoJO4d5dAePDjK5IwaxeQaHabd1Tg6t1f14PtqOgz9tp82xq2muui3Ee0QSau5+rtSYXkF1ais546rK5XVpJV+G9YYs557ua5UVnPj15PKeu4Su1JxQgWhwjMzV6is5yPKrlQkM+dU7Hpe3OlKRTIzQkVLZsaoSGbGqEhmRqis5zPTrlRktkWoWJltMSo8Y2V2K1Zj1/O5aVcqeA6a2Tl0Lyt8k1mVXT1a7tF1+5QOJ3Va71Cf7iJ62LzT2MI6STVPCr2GiqywpV9VZixNRjq5ztJGK7zrWJUFkqzwGOa9trwdBoOFGRTCwgxKZlkGebWwGPJqYTHkrVvahO2dWZxJbz8XVU2KC7v4PbiFGbS02SisZ+2P2Z2rTFjPgh41R7mc0bCans3sFgyDo6t5QFJxdD2LZNQcXc1bqzVHV/OZS8VRWE96qTjKZTJazyv0NUdX07mddzQqJmc0rud5cMVRyiY1hrRJzaAqtEn89Nqpjtlrp7HUD5tXRUdSJYoKSo3XaY18ozIaoHALnRnvNof/NLkKKKrCWtE1VaCojCKpSH5ZkoWFjrd301n2UeeqSFEVrpSaKlFUwVNUUZFUtLEKfqVpWg06+54JCgVTRVVoFM2rUqG3XFN5kopCIxXWGaqpKAxT4fUFe3w4aX12fSWrSSpPUiWKylmSKlJUnkTDk8gH0liBRD6QyEcS+VggH6amr4VstkmFvFxRJUVS+etVVhXq6ZoqUFSFl/lqKkJetqU9B2qqQFHZq8f6M/z039un7e2X+7ufg2b3y18PX5+3jw8vPz7/78f4my9P2/v77ffPP54ev959+/V09/n+8evudxv18s8/PoWboONgzf62wSp3Y1Xa/bg7vbsC3Go/jDqM/H8=",
      "brillig_names": [
        "mint"
      ]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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taCON7Wgjjet38OkCW9qQR1vakEdb2pBHW9qQV2gbkAdb2pBHW9qQR1vakEdb1rfm6YJb2pAPeBNLajjTS2o400tqONNDXqYIFA3oI43taCON7Wgjje1oI43taCONzWgHvGmFtTxphbU8aYG3jTiTS2oC9QNqONNLajjTS2o400tehi8qQV1vKkB9YQ3taCON7Wgjje1oI43taAuUDegjje1oI43NfCmCW9qQR1vakEdb2pAXfCmFtTxpgY9jOBNLajjTS2oC9QNqONNLajjTS2o400tqONNLajjTQ2oz3hTA286400tqONNLajjTS2oC9QNqONNLXoYvKkFdbypBXW8qQV1vKkB9QVvakEdb2pBHW9qQR1vakFdoF7fmy54UwvqeFML6nhTC+p4UwvqeFODHmbFm1pQx5taUMebWlDHm1pQF6gbUMebWlDHm1pQx5taUMebGnjTFW9qQH3Dm1pQx5taUMebWlDHmxr0MJtA3YA63tSCOt7Ugjre1II63tSCOt7UgHrGm1pQx5taUMebGnjTjDe1oC5QN6CON7Wgjje1oI43tehh8KYW1PGm9anLhDe1oI43taCON7Wgjje1oC5QN6CON7Wgjjet701lwptaUMebWlDHmxpQD3hTC+p4U4MeJuBNLajjTS2oC9QNqONNLajjTS2o400tqONNLajjTQ2oR7ypgTeNeFML6nhTC+p4UwvqAnUD6nhTix4Gb2pBHW9qQR1vakEdb2pAPeFNLajjTS2o400tqONNLagL1Ot704Q3taCON7Wgjje1oI43taCONzXoYQRvakEdb2pBHW9qQR1vakFdoG5AHW9qQR1vakEdb2pBHW9q4E0Fb2pAfcabWlDHm1pQx5taUMebGvQws0DdgDre1II63tSCOt7Ugjre1II63tSA+oI3taCON7Wgjjc18KYL3tSCukDdgDre1II63tSCOt7UoofBm1rUOt7UgPqKN7Wgjje1oI43taCONzXoYVaBukGt400tqONNLajjTS2o400tqONNDXqYDW9qQR1vakEdb2pBHW/6FuoS90lKXH9QF6i/gfqSp/B19ZLDN+o/L96iyNfFW1ziD4kwss1LhOttXiIscvMS4aeblwjz3bpEGafevETY+uYlIgNoXiICg+YlEiRqXSLSheYlIl1oXiLSheYlIl1oXiLShcYlmifSheYlIl1oXiLSheYlIl1oXiJBotYlIl1oXiLSheYlIl1oXiLSheYlIl1oXaJAutC8RKQLzUtEutC8RKQLzUskSNS6RKQLzUtEutC8RKQLzUtEuvAOic5PGpgDgYEB9UgGYEEdW/8e6md/8z5HnLoFdcy3BXWBugF1LLIFdVyvRQ+DkbWgjje1oI43NfheT3hTC+p4UwvqeFML6nhTC+oCdQPqeFML6nhTg3494U0tqONNLajjTQ2oC97Ugjre1KCHEbypBXW8qQV1gboBdbypBXW8qQV1vKkFdbypBXW8qQH1GW9q4E1nvKkFdbypBXW8qQV1gboBdbypRQ+DN7Wgjje1oI43taCONzWgvuBNLajjTS2o400tqONNLagL1Ot70wVvakEdb2pBHW9qQR1vakEdb2rQw6x4UwvqeFML6nhTC+p4UwvqAnUD6nhTC+p4UwvqeFML6nhTA2+64k0NqG94UwvqeFML6nhTC+p4U4MeZhOoG1DHm1pQx5taUMebWlDHm1pQx5saUM94UwvqeFML6nhTA2+a8aYW1AXqBtTxphbU8aYW1PGmFj0M3tSCOt60PvVlwptaUMebWlDHm1pQx5taUBeoG1DHm1pQx5vW96bLhDe1oI43taCONzWgHvCmFtTxpgY9TMCbWlDHm1pQF6gbUMebWlDHm1pQx5taUMebWlDHmxpQj3hTA28a8aYW1PGmFtTxphbUBeoG1PGmFj0M3tSCOt7Ugjre1II63tSAesKbWlDHm1pQx5taUMebWlAXqNf3pglvakEdb2pBHW9qQR1vakEdb2rQwwje1II63tSCOt7Ugjre1IK6QN2AOt7Ugjre1II63tSCOt7UwJsK3tSA+ow3taCON7Wgjje1oI43NehhZoG6AXW8qQV1vKkFdbypBXW8qQV1vKkB9QVvakEdb2pBHW9q4E0XvKkFdYG6AXW8qQV1vKkFdbypRQ+DN7Wgjjc1oL7iTS2o400tqONNLajjTS2oC9QNqONNLajjTQ286Yo3taCON7Wgjjc1oL7hTS2o400NepgNb2pBHW9qQV2gbkAdb2pBHW9qQR1vakEdb2pBHW9qQD3jTQ28acabWlDHm1pQx5taUBeoG1DHm1r0MHhTC+p4UwvqeFML6njT+tTXCW9qQR1vakEdb2pBHW9qQV2gXt2brhPe1II63tSCOt7Ugjre1II63tSghwl4UwvqeFML6nhTC+p4UwvqAnUD6nhTC+p4UwvqeFML6nhTA28a8KYG1CPe1II63tSCOt7Ugjre1KCHiQJ1A+p4UwvqeFML6nhTC+p4UwvqeFMD6glvakEdb2pBHW9q4E0T3tSCukDdgDre1II63tSCOt7UoofBm1pQx5saUBe8qQV1vKkFdbypBXW8qQV1gboBdbypBXW8qYE3FbypBXW8qQV1vKkB9RlvakEdb2rQw8x4UwvqeFML6gJ1A+p4UwvqeFML6nhTC+p4UwvqeFMD6gve1MCbLnhTC+p4UwvqeFML6gJ1A+p4U4seBm9qQR1vakEdb2pBHW9qQH3Fm1pQx5taUMebWlDHm1pQF6jX96Yr3tSCOt7Ugjre1II63tSCOt7UoIfZ8KYW1PGmFtTxphbU8aYW1AXqBtTxphbU8aYW1PGmFtTxpgbedMObGlDPeFML6nhTC+p4UwvqeFODHiYL1A2o400tqONNLajjTS2o400tqONN61PfJrypBXW8qQV1vGl9b7pNeFML6gJ1A+p4UwvqeFML6nhTix4Gb2pBHW9qQD3gTS2o400tqONNLajjTS2oC9QNqONNLajjTQ28acCbWlDHm1pQx5saUI94UwvqeFODHibiTS2o400tqAvUDajjTS2o400tqONNLajjTS2o400NqCe8qYE3TXhTC+p4UwvqeFML6gJ1A+p4U4seBm9qQR1vakEdb2pBHW9qQF3wphbU8aYW1PGmFtTxphbUBer1vangTS2o400tqONNLajjTS2o400NepgZb2pBHW9qQR1vakEdb2pBXaBuQB1vakEdb2pBHW9qQR1vauBNZ7ypAfUFb2pBHW9qQR1vakEdb2rQwywCdQPqeFML6nhTC+p4UwvqeFML6nhTA+or3tSCOt7Ugjre1MCbrnhTC+oCdQPqeFML6nhTC+p4U4seBm9qQR1vakB9w5taUMebWlDHm1pQx5taUBeoG1DHm1pQx5saeNMNb2pBHW9qQR1vakA9400tqONNDXqYjDe1oI43taAuUDegjje1oI43taCON7Wgjje1oI43rU89T3jT+t40T3hTC+p4UwvqeFML6gJ1A+p4U4seBm9qQR1vakEdb2pBHW9qQD3gTS2o400tqONNLajjTS2oC9Tre9OAN7Wgjje1oI43taCON7Wgjjc16GEi3tSg1iPe1II63tSC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iW75fv78lJfw42VPSObtdg59CNP0g+SaL71sm669LF6a2/HduvLLniycnNPDIOcfL5uvvWy59rL12suO5f64NN9fFh8F+C8X5MoVPuT4YEntDwl//iHn9/XW4wMDdT8ivf8j5Lcf8fmy+drLlmsvWy99++RrX5H50lfkNk3XXhauvSxee1m69jK59rL52suWSy97cvvnw2fcXrWuj3/yedSaxY+bq19XxzXGHx8R3v8R8f0fkd7/EfL+j5jf/xHL+z9iff9HbO//iPz2j4jvX93x/as7vn91x/ev7vj+1R3fv7rj+1d3fP/qju9f3fH9qzv9enV/vixce1m89rJ07WVy7WXztZct1162XnvZdu1l+dLL5FqVyLUqkWtVIteqRK5ViVyrErlWJXKtSuRalci1KpmvVcl8rUrma1UyX6uS+VqVzNeqZL5WJfO1KpmvVcl8rUqWa1WyXKuS5VqVLNeqZLlWJcu1KlmuVclyrUqWa1WyXKuS9VqVrNeqZL1WJeu1KlmvVcl6rUrWa1WyXquS9VqVrNeqZLtWJdu1KtmuVcl2rUq2a1WyXauS7VqVbNeqZLtWJdu1KsnXqiRfq5J8rUrytSrJ16okX6uSfK1K8rUqydeqJF+qkjxN114Wrr0sXntZuvYyufay+drLlmsvW6+9bLv2smtVEq5VSbhWJeFalYRrVRKuVUm4ViXhWpWEa1USrlVJuFYl8VqVxGtVEq9VSbxWJfFalcRrVRKvVUm8ViXxWpXEa1VyLXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zdey13wte83Xstd8LXvN17LXfC17zZey13m6lL1+vCxce1m89rJ07WVy7WXztZct1162XnvZdu1l16okXKuScK1KwrUqCdeq5En2mvcf74UPR3/wsidVsq77y3L89rKjE2eVnmfxMZylreGs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",
      "brillig_names": [
        "discover_new_messages",
        "random",
        "decompose_hint",
        "lte_hint",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_to_radix",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "is_minter",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "minter",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgIEAScCAwQAHxgAAwACgEguCIBIAAElAAAASyUAAABvLgQAAYBJKAIAAgSASScCAwQBOw0AAgADKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgEAASgAgEcEAAEmJQAAAnQeAgACAB4CAAMAMzgAAgADAAQkAgAEAAAAkyUAAAKdHgIAAgknAgMAAQo4AgMEJAIABAAAAK8lAAACrycCAgAALQgBAycCBAQEABABBAEnAwMEAQAoAwIELQwEBS0OAgUAKAUCBS0OAgUAKAUCBS0OAgUtDQMEACgEAgQtDgQDKwIABAAAAAAAAAAAAgAAAAAAAAAALQgBBScCBgQFABABBgEnAwUEAQAoBQIGLQwGBy0OAgcAKAcCBy0OAgcAKAcCBy0OAgcAKAcCBy0OBActDQMEACgEAgQtDgQDLQ0FBAAoBAIELQ4EBS0IAQQAAAECAS0OAwQtCAEDAAABAgEtDgUDLQgBBQAAAQIBLgqARQAFLQgBBgAAAQIBLgqARAAGJwIHAAYnAggECS0IAAktDAQKLQwDCy0MBQwtDAYNLQwHDgAQAAgAJQAAAsEtBAAAJwIHBAgtCAAILQwECS0MAwotDAULLQwGDC0MAQ0AEAAHACUAAALBLQQAAC0NBgELKAABgEQAByQCAAcAAAINJwIIBAA8CQEIJwIBBActCAAHLQwECC0MAwktDAUKLQwGCwAQAAEAJQAAA+otBAAALQ0DAQEoAAGARwAELQ0EAwo4AwIBCygAAYBEAAIkAgACAAACXiUAAAT9LwwAAwABHAwBAwEcDAMCABwMAgEBJigAgAQEeAANAAAAgASAAyQAgAMAAAKcKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV0AjB8R9WsczwBAQImJQAAAnQtDQMGLQ0EBwsoAAeARAAIJAIACAAAAucnAgkEADwJAQkLKAAGgEMAByQCAAcAAAN2IwAAAvwtDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADISUAAAUPLgQABoADKACABAQABCUAAAUhLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA2ElAAAFry0OCgEtDgcCLQ4FAy0OCQQjAAAD6ScCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPqLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFIS4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+kmJQAAAnQuCIBFAAUjAAAD+g0oAAWAQwAGJAIABgAABGojAAAEDy0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASIIwAABPQtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUhLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPQtDAYFIwAAA/oqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU8IwAABUcuAIADgAUjAAAFri4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWaLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVpKAGABQQAAQMAgAYAAoAGIwAABa4mKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dTuM6EMffpde98Iw/xt5XWR0hYLuoUtWiAkc6Qrz7SaFOQjOJybjaFcrcIELnX09+sT3jKbVfV782dy8PN9v978PT6sfP19XucH/7vD3sm6vXt/Xq7rjd7bYPN/0/r8zpB0B4Fzw93u5P10/Pt8fn1Q+w6M16tdn/Ov1uo2/e5Pd2t2muwL2th/YGMZsbhz1rYKxdCHC2doFMa02JMY7e+LNx9Ah943/WK0C4jv8pZXOA9Cf9vxJ/H1v+scQfPFG2DtZO+598yjebgnWX/lt3bf8BP/t/asXhH2mF2FaweWxZht7ZQivUdKazOTX2BboY8sBJGP0lXY9f8ejzfb/rSKYLwvbICHWe07mmU7bjy3dDxhv2oQbbDd3ewyHLdv1wNkbTdQBrPfcgk8sjl1Lq3hlTZKwt5a7oeqMEOZcRIb8xYm/8scbe5bHqXeybnvhFo/yq+DnlV8UvKb8afkn7Xx0/7X81/NBo/6vjF5VfDT9A5VfFj5RfDT++eqD8vswvKL8aflbXb0V+MZcQfK+wlfk55VfFT/PnKn7OKr8Cv9Dahs+mJ35Bx28dP11/VPEjHb91/LT/VfGL2v/q+Gn/q+KXtP5Sx0/XvzX8rNH6Sx0//fy8ih9o/aWOn1N+Vfy0/lLFDzV/ZqDoh0JDKFYzXQaKpq9DKE5zAgaKJpoMFI3eQyheQzIDRetUQyhBQzIDRUPyEAppmYiBoiGZgaIheQhFv+XAQEma5jNQtKcwUHROGUBxC/3kwUJ2GS2GSygL/TihAEV7CgNlmXPKNJSFVvMLUJZZzZ+GYpe5ICxA0YmWgaIT7RCKcwplCEV7yhDKQqv5BSjLrOZPQ1loNb8AZZnV/GkopKtkBoqGZAaKTrRDKFEnWgaKrpKHUBb67Y4ClGWGZHLZFsnLjRuC3iwzfs8hCCG6fH9kcEBwmXHtigRBR3ElwYVufXNNgsust84iSKndaTjCZSz2C93+5poEnRKsJKixuJKgW+Yy45oENZupJOg1ktQS1GymkmDQPlhL0CnBSoKazRQJphYGJDcgSBqLKwle41AKiO1JLdg/N4Ql6H3KzoeInfMAxDFsD+8h6jZkhYgfzvtv7Hyy39f5cI29gP6e8+VZI7iS8+3Ybjwwn5pg3PFtbYqCKZwyRDZmP8j1Dj5ijZsZi0LriDOpb3661y9s2n7te6XuXtFMu+8pH6jkY+e69fbDd/q+vuP35U78NyPAtFEHTE/1EUiI312oJGIzIADvuhu/LOXSyCls06KRo88KoiQQ8dsMN7NdO07RDEDwyTS47kiu/lSQRVEgIpSIgkDEpxYlkeSeksC9yIew5tm2D9cTDEQkEI0MjYIoCUT8pxwFEV/YL4lELY3cU2oz1ACXX16LIwf9TYtGzuKbFgUjEXmJSAKC3/+4JJLQiyPnXHYrCesH4ymBROQlojRflIyViEggApCIBMgTSlpCLxFJkFsJcjuCPLSLBRsvJ5Y0EnOnRXwZuiTyAlEAiSgIRPx/ppZEgpibIkpEgkCdkqAlMHxq2Sy/2iTZDTR8fEptgShRGGj4rlfQ0HyNB4HGz8/Jm3qYEamcSJUkKhK1RaK2oqitKGorSdoCY0QqWVuS+2qKFCIVSVQjMbGkkowU4DPnyTlm5AzuJirncewYzfx5CfhRPN1OEPjGL0KnNfwatKAJ8xlEEGgE7fDb06SY+8Gn6n/W+NkaNEagcYX74TTz+xvyO0dMa/giWUEzP3aitQJNnK8R5AIoyAVQkAugFzwfP7MfvDVX/94et7d3u81Tozi9+LK/f94e9ufL5/8e8yt3x+1ut324eTwe7je/Xo6bm93h/vTaypx//ERPa6T4HhubywbWGjC9D5/Tq5TWGKFptWn5fw==",
      "brillig_names": [
        "is_minter"
      ]
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10846690067871036662": {
            "error_kind": "string",
            "string": "invalid owner"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "transfer_in_public"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "NFTNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "token_id",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "NFT"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "private_nfts",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "nft_exists",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_owners",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "token_id",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::NFTTransfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::mint_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::mint_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "approve",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_minter_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::owner_of_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::owner_of_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "partial_note",
                    "type": {
                      "fields": [
                        {
                          "name": "commitment",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::nft_note::PartialNFTNote"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_store_nft_set_partial_note_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_store_nft_set_partial_note_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "NFT::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::is_minter_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::is_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "commitment",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "types::nft_note::PartialNFTNote"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_id",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "NFT::_finish_transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "NFT::_finish_transfer_to_public_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "101": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "102": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "106": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "107": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "111": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "114": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "116": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "117": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "119": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "121": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "123": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "124": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "125": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "126": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "133": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<let N: u32>(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\npub unconstrained fn compute_note_log_unconstrained<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_note_log(note, storage_slot, recipient, sender)\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log =\n            unsafe { compute_note_log_unconstrained(note, storage_slot, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n"
    },
    "134": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr",
      "source": "use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n"
    },
    "139": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n"
    },
    "141": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "144": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    retrieved_note::RetrievedNote,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::{array, comparison::compare};\nuse dep::protocol_types::{\n    constants::{GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    traits::{Packable, ToField},\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_fields,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. nonce, note hash, etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_fields,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "147": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "148": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteType;\nuse dep::protocol_types::traits::{Packable, ToField};\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteType + Packable<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "150": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "153": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "154": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "155": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "156": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "157": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "158": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "162": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "163": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "164": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "165": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "166": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "168": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "169": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "171": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "173": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "179": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "181": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "182": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "196": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "197": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "199": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "201": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr",
      "source": "struct ComparatorEnum {\n    pub EQ: u8,\n    pub NEQ: u8,\n    pub LT: u8,\n    pub LTE: u8,\n    pub GT: u8,\n    pub GTE: u8,\n}\n\npub global Comparator: ComparatorEnum =\n    ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::Comparator;\n    use super::compare;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"
    },
    "202": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "203": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "205": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "207": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "208": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/random.nr",
      "source": "use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n"
    },
    "211": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "235": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "237": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "280": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "295": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "297": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "298": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "299": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "308": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "312": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "314": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "315": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "324": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "335": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "349": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "353": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "354": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "370": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "371": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "373": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "379": {
      "path": "/Users/0xandee/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "381": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "/Users/0xandee/Documents/Github/tezac/nft_contract/src/main.nr",
      "source": "// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal NFT implementation with `AuthWit` support that allows minting in public-only and transfers in both public\n// and private.\n#[aztec]\npub contract NFT {\n    use crate::types::nft_note::{NFTNote, PartialNFTNote};\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use dep::aztec::{\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, utility, view},\n            storage::storage,\n        },\n        messages::logs::note::encode_and_encrypt_note,\n        note::{constants::MAX_NOTES_PER_PAGE, note_interface::NoteProperties},\n        prelude::{\n            AztecAddress, Map, NoteGetterOptions, NoteViewerOptions, PrivateContext, PrivateSet,\n            PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::traits::Serialize,\n        utils::comparison::Comparator,\n    };\n    use dep::compressed_string::FieldCompressedString;\n    use aztec::protocol_types::traits::ToField;\n    use std::meta::derive;\n\n    // docs:end:imports\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[derive(Serialize)]\n    #[event]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // The symbol of the NFT\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        // The name of the NFT\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // The admin of the contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Addresses that can mint\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // Contains the NFTs owned by each address in private.\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        // A map from token ID to a boolean indicating if the NFT exists.\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        // A map from token ID to the public owner of the NFT.\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n    // docs:end:set_admin\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not a minter\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n    // docs:end:mint\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n    // docs:end:transfer_in_public\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    // docs:start:transfer_to_private\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the private balance increase.\n        let partial_note = _prepare_private_balance_increase(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, partial_note).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_private\n\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// `finalize_transfer_to_private` with the returned partial note.\n    // docs:start:prepare_private_balance_increase\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress) -> PartialNFTNote {\n        _prepare_private_balance_increase(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> PartialNFTNote {\n        // We create a partial note with unpopulated/zero token id for 'to'\n        let partial_note = NFTNote::partial(\n            to,\n            storage.private_nfts.at(to).storage_slot,\n            context,\n            to,\n            context.msg_sender(),\n        );\n\n        NFT::at(context.this_address())._store_nft_set_partial_note(partial_note).enqueue(context);\n\n        partial_note\n    }\n    // docs:end:prepare_private_balance_increase\n\n    // docs:start:store_payload_in_transient_storage_unsafe\n    #[public]\n    #[internal]\n    fn _store_nft_set_partial_note(partial_note: PartialNFTNote) {\n        // We store the partial note in a slot equal to its commitment. This is safe because the commitment is computed\n        // using a generator different from the one used to compute storage slots, so there can be no collisions.\n        // We could consider storing all pending partial notes in e.g. some array, but ultimately this is pointless: all\n        // we need to verify is that the note is valid.\n        context.storage_write(partial_note.commitment(), true);\n    }\n    // docs:end:store_payload_in_transient_storage_unsafe\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `partial_note` must be passed as an argument to this function.\n    // docs:start:finalize_transfer_to_private\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, partial_note: PartialNFTNote) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n    ) {\n        _finalize_transfer_to_private(from, token_id, partial_note, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        partial_note: PartialNFTNote,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // We verify that the partial note we're completing is valid (i.e. it uses the correct state variable's storage\n        // slot, and it is internally consistent). We *could* clear the storage since each partial note should only be\n        // used once, but since the AVM offers no gas refunds for doing so this would just make the transaction be more\n        // expensive.\n        assert(context.storage_read(partial_note.commitment()), \"Invalid partial note\");\n        partial_note.complete(token_id, context);\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let new_note = NFTNote::new(token_id, to);\n\n        nfts.at(to).insert(new_note).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:finish_transfer_to_public\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n    // docs:end:finish_transfer_to_public\n\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    // docs:start:get_private_nfts\n    #[utility]\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n    // docs:end:get_private_nfts\n}\n"
    },
    "59": {
      "path": "/Users/0xandee/Documents/Github/tezac/nft_contract/src/types/nft_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize},\n        utils::arrays::array_concat,\n    },\n};\n\n// NFTNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the token id).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n// docs:start:nft_note\n/// A private note representing a token id associated to an account.\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct NFTNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The ID of the token represented by this note.\n    token_id: Field,\n}\n// docs:end:nft_note\n\nimpl NoteHash for NFTNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because NFTNote has just one variant (where the token id is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            NFTPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note =\n            PartialNFTNote { commitment: private_content.compute_partial_commitment(storage_slot) };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.token_id)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { token_id, owner, randomness }\n    }\n\n    pub fn get_token_id(self) -> Field {\n        self.token_id\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the token id, since the note will be\n    /// later completed in public. This is a powerful technique for scenarios in which the token id cannot be known in\n    /// private (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialNFTNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialNFTNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = NFTPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialNFTNote { commitment }\n    }\n}\n\n/// The private content of a partial NFTNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct NFTPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of NFTNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NFTPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateNFTPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of NFTNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateNFTPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        NFTNote::get_id()\n    }\n}\n\n/// A partial instance of a NFTNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the token id field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the token id to the public), resulting in a NFTNote that can be used like any other one (except\n/// of course that its token id is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialNFTNote {\n    commitment: Field,\n}\n\nimpl PartialNFTNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialNFTNote {\n    /// Completes the partial note, creating a new note that can be used like any other NFTNote.\n    pub fn complete(self, token_id: Field, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(token_id != 0, \"Cannot complete a PartialNFTNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the token id). The contract will later find it by\n        //  searching for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(token_id));\n        context.push_note_hash(self.compute_complete_note_hash(token_id));\n    }\n\n    fn compute_note_completion_log(self, token_id: Field) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, token_id]\n    }\n\n    fn compute_complete_note_hash(self, token_id: Field) -> Field {\n        // Here we finalize the note hash by including the (public) token id into the partial note commitment. Note that\n        // we use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator([self.commitment, token_id], GENERATOR_INDEX__NOTE_HASH)\n    }\n}\n\nmod test {\n    use super::{\n        NFTNote, NFTPartialNotePrivateContent, PartialNFTNote,\n        PrivateNFTPartialNotePrivateLogContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global token_id: Field = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a NFTNote has the same note hash as a PartialNFTNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = NFTNote { token_id, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialNFTNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(token_id);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular NFTNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular NFTNote.\n\n        let note = NFTNote { token_id, randomness, owner };\n\n        let partial_note_private_content = NFTPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateNFTPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialNFTNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(token_id)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in NFTNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(token_id), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "70": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "71": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "78": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "79": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "80": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "81": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "85": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "97": {
      "path": "/Users/0xandee/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    }
  }
}
